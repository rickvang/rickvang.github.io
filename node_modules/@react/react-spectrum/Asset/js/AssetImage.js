'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _number = require('../../utils/number');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _Image = require('../../Image/js/Image');

var _Image2 = _interopRequireDefault(_Image);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var PERCENTAGE_CACHE = new Map();

/*
 * An AssetImage displays an image preview within an Asset component
 */

var AssetImage = function (_Component) {
  _inherits(AssetImage, _Component);

  function AssetImage() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, AssetImage);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = AssetImage.__proto__ || Object.getPrototypeOf(AssetImage)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      previewPercentage: PERCENTAGE_CACHE.get(_this.props.src) || 0
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  // Default previewPercentage of 0 ensures that it isn't rendered before previewPercentage is set onLoad
  // Loaded is set to true after the image is loaded, and is used to set opacity of image before/after load


  _createClass(AssetImage, [{
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      PERCENTAGE_CACHE.delete(this.props.src);
    }
  }, {
    key: 'calculateSize',
    value: function calculateSize(width, height) {
      if (width === 0 || height === 0) {
        return 0;
      }

      // smartness should be a value between 0 and 1
      var smartness = (0, _number.clamp)(this.props.smartness, 0, 1);

      // Any asset with an aspect ratio smaller than "smallestAspectRatio" would fit the space fully (on one side).
      // Any asset with an aspect ratio bigger than "smallestAspectRatio" would fit a percentage of the space.
      var smallestAspectRatio = 0.25;
      // An asset with an aspect ratio of 1 (a square) would be displayed at the "minimumPercentage" of the space.
      var minimumPercentage = 1 - smartness * 0.25;
      // Aspect ratio of the asset (from 0 to 1) if longest side is 1.
      var aspectRatio = width / Math.max(width, height) * height / Math.max(width, height);
      // Ratio (from 0 to 1) between "smallestAspectRatio" and 1 (a square).
      var ratio = Math.max(0, aspectRatio - smallestAspectRatio) / (1 - smallestAspectRatio);
      // Percentage of the space that the asset will fit in.
      return (1 - ratio * (1 - minimumPercentage)) * 100;
    }
  }, {
    key: 'onLoad',
    value: function onLoad(img) {
      var percentage = this.calculateSize(img.naturalWidth, img.naturalHeight);
      PERCENTAGE_CACHE.set(this.props.src, percentage);

      if (percentage !== this.state.previewPercentage) {
        this.setState({
          previewPercentage: percentage
        });
      }

      if (this.props.onLoad) {
        this.props.onLoad();
      }
    }
  }, {
    key: 'render',
    value: function render(props) {
      var _props = this.props,
          src = _props.src,
          className = _props.className,
          otherProps = _objectWithoutProperties(_props, ['src', 'className']);

      var percentage = this.state.previewPercentage;
      var style = {
        maxWidth: percentage + '%',
        maxHeight: percentage + '%'
      };

      return _react2.default.createElement(_Image2.default, _extends({}, otherProps, {
        className: (0, _classnames2.default)('spectrum-Asset-image', className),
        onLoad: this.onLoad.bind(this),
        src: src,
        style: style }));
    }
  }]);

  return AssetImage;
}(_react.Component);

AssetImage.propTypes = {
  /** The image url */
  src: _propTypes2.default.string.isRequired,

  /** A factor between 0 and 1 that controls how the preview is scaled. When 0 ("dumb") the assets fits all the space available. */
  smartness: _propTypes2.default.number
};
AssetImage.defaultProps = {
  smartness: 1
};
exports.default = AssetImage;