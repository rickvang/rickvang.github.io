'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class;

var _autobindDecorator = require('autobind-decorator');

var _autobindDecorator2 = _interopRequireDefault(_autobindDecorator);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _CollectionView = require('../../utils/CollectionView');

var _CollectionView2 = _interopRequireDefault(_CollectionView);

var _GridItem = require('./GridItem');

var _GridItem2 = _interopRequireDefault(_GridItem);

var _collectionView = require('@react/collection-view');

var _ListDataSource = require('../../ListDataSource');

var _ListDataSource2 = _interopRequireDefault(_ListDataSource);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

require('../style/index.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var GridView = (0, _autobindDecorator2.default)(_class = function (_React$Component) {
  _inherits(GridView, _React$Component);

  function GridView(props) {
    _classCallCheck(this, GridView);

    var _this = _possibleConstructorReturn(this, (GridView.__proto__ || Object.getPrototypeOf(GridView)).call(this, props));

    _this.state = {
      layout: _this.getLayout(props.layout, props.cardSize)
    };
    return _this;
  }

  _createClass(GridView, [{
    key: 'getLayout',
    value: function getLayout(layout, cardSize) {
      if (typeof layout === 'function') {
        layout = new layout({ cardSize: cardSize });
      }

      if (layout instanceof _collectionView.Layout) {
        return layout;
      }

      throw new Error('Invalid layout prop passed to GridView. Must be a Layout constructor or an instanceof the Layout class.');
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(props) {
      if (props.layout !== this.props.layout || props.cardSize !== this.props.cardSize) {
        this.setState({ layout: this.getLayout(props.layout, props.cardSize) });
      }
    }
  }, {
    key: 'renderItemView',
    value: function renderItemView(type, data) {
      return _react2.default.createElement(
        _GridItem2.default,
        { size: this.props.cardSize, allowsSelection: this.props.allowsSelection },
        this.props.renderItem(data)
      );
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          allowsSelection = _props.allowsSelection,
          allowsMultipleSelection = _props.allowsMultipleSelection,
          className = _props.className,
          dataSource = _props.dataSource,
          onSelectionChange = _props.onSelectionChange,
          otherProps = _objectWithoutProperties(_props, ['allowsSelection', 'allowsMultipleSelection', 'className', 'dataSource', 'onSelectionChange']);

      var rowCount = dataSource && dataSource.getNumberOfSections() > 0 ? dataSource.getSectionLength(0) : 0;

      return _react2.default.createElement(_CollectionView2.default, _extends({}, otherProps, {
        role: 'grid',
        'aria-rowcount': rowCount,
        'aria-multiselectable': allowsSelection && allowsMultipleSelection || null,
        className: (0, _classnames2.default)('react-spectrum-GridView', className),
        renderItemView: this.renderItemView,
        layout: this.state.layout,
        dataSource: dataSource,
        canSelectItems: allowsSelection,
        onSelectionChanged: onSelectionChange,
        allowsMultipleSelection: allowsMultipleSelection,
        selectionMode: 'toggle',
        keyboardMode: 'focus' }));
    }
  }]);

  return GridView;
}(_react2.default.Component)) || _class;

GridView.propTypes = {
  /** The layout to arrange the items in. */
  layout: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.instanceOf(_collectionView.Layout)]).isRequired,

  /** Whether changes to the `layout` prop should be animated. */
  animateLayoutChanges: _propTypes2.default.bool,

  /** Whether to display large or small size cards */
  cardSize: _propTypes2.default.oneOf(['S', 'L']),

  /** The datasource for the grid view. Should be a subclass of `ListDataSource`. */
  dataSource: _propTypes2.default.instanceOf(_ListDataSource2.default).isRequired,

  /** A function which renders a cell. Passed a column object and cell data. */
  renderItem: _propTypes2.default.func.isRequired,

  /** An optional function which is called to render the contents of the grid view when there are no items. */
  renderEmptyView: _propTypes2.default.func,

  /** Whether to allow the user to select items */
  allowsSelection: _propTypes2.default.bool,

  /** Whether to allow multiple selection of items */
  allowsMultipleSelection: _propTypes2.default.bool,

  /** A function that is called when the selection changes. Passed an IndexPathSet object. */
  onSelectionChange: _propTypes2.default.func,

  /** Sets the selected items. Should be an IndexPathSet object or an array of IndexPaths. */
  selectedIndexPaths: _propTypes2.default.oneOfType([_propTypes2.default.arrayOf(_propTypes2.default.instanceOf(_collectionView.IndexPath)), _propTypes2.default.instanceOf(_collectionView.IndexPathSet)]),

  /** Whether the user can drag items from the grid view. */
  canDragItems: _propTypes2.default.bool,

  /** A function which renders the view to display under the cursor during drag and drop. */
  renderDragView: _propTypes2.default.func,

  /**
   * Whether the GridView accepts drops.
   * If `true`, the grid view accepts all types of drops. Alternatively,
   * it can be set to an array of accepted drop types.
   */
  acceptsDrops: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.arrayOf(_propTypes2.default.string)]),

  /**
   * Whether drops should appear on top of items, or between them. If you want to customize this
   * or mix the modes, you can override `getDropTarget` on the data source.
   */
  dropPosition: _propTypes2.default.oneOf(['on', 'between'])
};
GridView.defaultProps = {
  cardSize: 'L',
  animateLayoutChanges: true,
  allowsSelection: true,
  allowsMultipleSelection: true,
  canDragItems: false,
  acceptsDrops: false,
  dropPosition: 'between'
};
exports.default = GridView;