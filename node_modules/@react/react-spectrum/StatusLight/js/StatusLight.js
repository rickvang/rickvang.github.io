'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = StatusLight;

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _filterDOMProps = require('../../utils/filterDOMProps');

var _filterDOMProps2 = _interopRequireDefault(_filterDOMProps);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

if (process.env.SCALE_MEDIUM && process.env.SCALE_LARGE) {
  require('../../spectrum-css/statuslight/index.css');

  require('../../spectrum-css/statuslight/index-diff.css');
} else if (process.env.SCALE_LARGE) {
  require('../../spectrum-css/statuslight/index-lg.css');
} else {
  require('../../spectrum-css/statuslight/index.css');
}

if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHT) require('../../spectrum-css/statuslight/multiStops/light.css');
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARK) require('../../spectrum-css/statuslight/multiStops/dark.css');
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHTEST) require('../../spectrum-css/statuslight/multiStops/lightest.css');
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARKEST) require('../../spectrum-css/statuslight/multiStops/darkest.css');


var VARIANTS = ['celery', 'yellow', 'fuchsia', 'indigo', 'seafoam', 'chartreuse', 'magenta', 'purple', 'neutral', 'active', 'positive', 'notice', 'negative', 'archived'];

// For backward compatibility
var DEPRECATED_VARIANTS = {
  archived: 'neutral'
};

function StatusLight(_ref) {
  var _ref$variant = _ref.variant,
      variant = _ref$variant === undefined ? VARIANTS[0] : _ref$variant,
      children = _ref.children,
      disabled = _ref.disabled,
      className = _ref.className,
      otherProps = _objectWithoutProperties(_ref, ['variant', 'children', 'disabled', 'className']);

  if (DEPRECATED_VARIANTS[variant]) {
    console.warn('The "' + variant + '" variant of StatusLight is deprecated. Please use "' + DEPRECATED_VARIANTS[variant] + '" instead.');
    variant = DEPRECATED_VARIANTS[variant];
  }

  return _react2.default.createElement(
    'div',
    _extends({
      className: (0, _classnames2.default)('spectrum-StatusLight', 'spectrum-StatusLight--' + variant, {
        'is-disabled': disabled
      }, className)
    }, (0, _filterDOMProps2.default)(otherProps)),
    children
  );
}

StatusLight.displayName = 'StatusLight';

StatusLight.propTypes = {
  /**
   * The css class for the status light, it's applied to the top level div.
   */
  className: _propTypes2.default.string,

  /**
   * The variant changes the color of the status light.
   */
  variant: _propTypes2.default.oneOf(VARIANTS),

  /**
   * Greys out the light and label
   */
  disabled: _propTypes2.default.bool
};