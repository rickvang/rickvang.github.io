{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar Collapsible = _react2.default.createClass({\n  displayName: 'Collapsible',\n  //Set validation for prop types\n  propTypes: {\n    transitionTime: _react2.default.PropTypes.number,\n    easing: _react2.default.PropTypes.string,\n    open: _react2.default.PropTypes.bool,\n    classParentString: _react2.default.PropTypes.string,\n    openedClassName: _react2.default.PropTypes.string,\n    triggerClassName: _react2.default.PropTypes.string,\n    triggerOpenedClassName: _react2.default.PropTypes.string,\n    contentOuterClassName: _react2.default.PropTypes.string,\n    contentInnerClassName: _react2.default.PropTypes.string,\n    accordionPosition: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.string, _react2.default.PropTypes.number]),\n    handleTriggerClick: _react2.default.PropTypes.func,\n    onOpen: _react2.default.PropTypes.func,\n    onClose: _react2.default.PropTypes.func,\n    trigger: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.string, _react2.default.PropTypes.element]),\n    triggerWhenOpen: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.string, _react2.default.PropTypes.element]),\n    triggerDisabled: _react2.default.PropTypes.bool,\n    lazyRender: _react2.default.PropTypes.bool,\n    overflowWhenOpen: _react2.default.PropTypes.oneOf(['hidden', 'visible', 'auto', 'scroll', 'inherit', 'initial', 'unset']),\n    triggerSibling: _react2.default.PropTypes.element\n  },\n  //If no transition time or easing is passed then default to this\n  getDefaultProps: function getDefaultProps() {\n    return {\n      transitionTime: 400,\n      easing: 'linear',\n      open: false,\n      classParentString: 'Collapsible',\n      triggerDisabled: false,\n      lazyRender: false,\n      overflowWhenOpen: 'hidden',\n      openedClassName: '',\n      triggerClassName: '',\n      triggerOpenedClassName: '',\n      contentOuterClassName: '',\n      contentInnerClassName: '',\n      className: '',\n      triggerSibling: null,\n      onOpen: function onOpen() {},\n      onClose: function onClose() {}\n    };\n  },\n  //Defaults the dropdown to be closed\n  getInitialState: function getInitialState() {\n    if (this.props.open) {\n      return {\n        isClosed: false,\n        shouldSwitchAutoOnNextCycle: false,\n        height: 'auto',\n        transition: 'none',\n        hasBeenOpened: true,\n        overflow: this.props.overflowWhenOpen\n      };\n    } else {\n      return {\n        isClosed: true,\n        shouldSwitchAutoOnNextCycle: false,\n        height: 0,\n        transition: 'height ' + this.props.transitionTime + 'ms ' + this.props.easing,\n        hasBeenOpened: false,\n        overflow: 'hidden'\n      };\n    }\n  },\n  // Taken from https://github.com/EvandroLG/transitionEnd/\n  // Determines which prefixed event to listen for\n  whichTransitionEnd: function whichTransitionEnd(element) {\n    var transitions = {\n      'WebkitTransition': 'webkitTransitionEnd',\n      'MozTransition': 'transitionend',\n      'OTransition': 'oTransitionEnd otransitionend',\n      'transition': 'transitionend'\n    };\n\n    for (var t in transitions) {\n      if (element.style[t] !== undefined) {\n        return transitions[t];\n      }\n    }\n  },\n  componentDidMount: function componentDidMount() {\n    var _this = this; //Set up event listener to listen to transitionend so we can switch the height from fixed pixel to auto for much responsiveness;\n    //TODO:  Once Synthetic transitionend events have been exposed in the next release of React move this funciton to a function handed to the onTransitionEnd prop\n\n\n    this.refs.outer.addEventListener(this.whichTransitionEnd(this.refs.outer), function (event) {\n      if (_this.state.isClosed === false) {\n        _this.setState({\n          shouldSwitchAutoOnNextCycle: true\n        });\n      }\n    });\n  },\n  componentDidUpdate: function componentDidUpdate(prevProps) {\n    if (this.state.shouldSwitchAutoOnNextCycle === true && this.state.isClosed === false) {\n      //Set the height to auto to make compoenent re-render with the height set to auto.\n      //This way the dropdown will be responsive and also change height if there is another dropdown within it.\n      this.makeResponsive();\n    }\n\n    if (this.state.shouldSwitchAutoOnNextCycle === true && this.state.isClosed === true) {\n      this.prepareToOpen();\n    } //If there has been a change in the open prop (controlled by accordion)\n\n\n    if (prevProps.open != this.props.open) {\n      if (this.props.open === true) {\n        this.openCollapsible();\n      } else {\n        this.closeCollapsible();\n      }\n    }\n  },\n  handleTriggerClick: function handleTriggerClick(event) {\n    event.preventDefault();\n\n    if (this.props.triggerDisabled) {\n      return;\n    }\n\n    if (this.props.handleTriggerClick) {\n      this.props.handleTriggerClick(this.props.accordionPosition);\n    } else {\n      if (this.state.isClosed === true) {\n        this.openCollapsible();\n      } else {\n        this.closeCollapsible();\n      }\n    }\n  },\n  closeCollapsible: function closeCollapsible() {\n    this.setState({\n      isClosed: true,\n      shouldSwitchAutoOnNextCycle: true,\n      height: this.refs.inner.offsetHeight,\n      overflow: 'hidden'\n    }, this.props.onClose);\n  },\n  openCollapsible: function openCollapsible() {\n    this.setState({\n      height: this.refs.inner.offsetHeight,\n      transition: 'height ' + this.props.transitionTime + 'ms ' + this.props.easing,\n      isClosed: false,\n      hasBeenOpened: true\n    }, this.props.onOpen);\n  },\n  makeResponsive: function makeResponsive() {\n    this.setState({\n      height: 'auto',\n      transition: 'none',\n      shouldSwitchAutoOnNextCycle: false,\n      overflow: this.props.overflowWhenOpen\n    });\n  },\n  prepareToOpen: function prepareToOpen() {\n    var _this2 = this; //The height has been changes back to fixed pixel, we set a small timeout to force the CSS transition back to 0 on the next tick.\n\n\n    window.setTimeout(function () {\n      _this2.setState({\n        height: 0,\n        shouldSwitchAutoOnNextCycle: false,\n        transition: 'height ' + _this2.props.transitionTime + 'ms ' + _this2.props.easing\n      });\n    }, 50);\n  },\n  renderNonClickableTriggerElement: function renderNonClickableTriggerElement() {\n    if (this.props.triggerSibling) {\n      return _react2.default.createElement('span', {\n        className: this.props.classParentString + \"__trigger-sibling\"\n      }, this.props.triggerSibling);\n    }\n\n    return null;\n  },\n  render: function render() {\n    var dropdownStyle = {\n      height: this.state.height,\n      WebkitTransition: this.state.transition,\n      msTransition: this.state.transition,\n      transition: this.state.transition,\n      overflow: this.state.overflow\n    };\n    var openClass = this.state.isClosed ? 'is-closed' : 'is-open';\n    var disabledClass = this.props.triggerDisabled ? 'is-disabled' : ''; //If user wants different text when tray is open\n\n    var trigger = this.state.isClosed === false && this.props.triggerWhenOpen !== undefined ? this.props.triggerWhenOpen : this.props.trigger; // Don't render children until the first opening of the Collapsible if lazy rendering is enabled\n\n    var children = this.props.children;\n    if (this.props.lazyRender) if (!this.state.hasBeenOpened) children = null;\n    var triggerClassName = this.props.classParentString + \"__trigger\" + ' ' + openClass + ' ' + disabledClass;\n\n    if (this.state.isClosed) {\n      triggerClassName = triggerClassName + ' ' + this.props.triggerClassName;\n    } else {\n      triggerClassName = triggerClassName + ' ' + this.props.triggerOpenedClassName;\n    }\n\n    return _react2.default.createElement('div', {\n      className: this.props.classParentString + ' ' + (this.state.isClosed ? this.props.className : this.props.openedClassName)\n    }, _react2.default.createElement('span', {\n      className: triggerClassName.trim(),\n      onClick: this.handleTriggerClick\n    }, trigger), this.renderNonClickableTriggerElement(), _react2.default.createElement('div', {\n      className: this.props.classParentString + \"__contentOuter\" + ' ' + this.props.contentOuterClassName,\n      ref: 'outer',\n      style: dropdownStyle\n    }, _react2.default.createElement('div', {\n      className: this.props.classParentString + \"__contentInner\" + ' ' + this.props.contentInnerClassName,\n      ref: 'inner'\n    }, children)));\n  }\n});\n\nexports.default = Collapsible;","map":null,"metadata":{},"sourceType":"script"}