'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class;

var _autobindDecorator = require('autobind-decorator');

var _autobindDecorator2 = _interopRequireDefault(_autobindDecorator);

var _closest = require('dom-helpers/query/closest');

var _closest2 = _interopRequireDefault(_closest);

var _OpenTransition = require('../../utils/OpenTransition');

var _OpenTransition2 = _interopRequireDefault(_OpenTransition);

var _ownerDocument = require('react-overlays/lib/utils/ownerDocument');

var _ownerDocument2 = _interopRequireDefault(_ownerDocument);

var _Portal = require('react-overlays/lib/Portal');

var _Portal2 = _interopRequireDefault(_Portal);

var _Position = require('./Position');

var _Position2 = _interopRequireDefault(_Position);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _RootCloseWrapper = require('react-overlays/lib/RootCloseWrapper');

var _RootCloseWrapper2 = _interopRequireDefault(_RootCloseWrapper);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var visibleOverlays = [];

var Overlay = (0, _autobindDecorator2.default)(_class = function (_React$Component) {
  _inherits(Overlay, _React$Component);

  function Overlay() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Overlay);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Overlay.__proto__ || Object.getPrototypeOf(Overlay)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      exited: !_this.props.show,
      targetNode: _reactDom2.default.findDOMNode(_this.props.target)
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Overlay, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.mounted = true;
      this.addOverlay();
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.mounted = false;
      this.removeOverlay();
    }
  }, {
    key: 'addOverlay',
    value: function addOverlay() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;

      if (props.show && this.mounted && !visibleOverlays.includes(this)) {
        visibleOverlays.push(this);
      }
    }
  }, {
    key: 'removeOverlay',
    value: function removeOverlay() {
      // Remove overlay from the stack of visible overlays
      var index = visibleOverlays.indexOf(this);
      if (index >= 0) {
        visibleOverlays.splice(index, 1);
      }
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.target && nextProps.target !== this.props.target) {
        this.setState(_extends({}, this.state, { targetNode: _reactDom2.default.findDOMNode(nextProps.target) }));
      }
    }
  }, {
    key: 'onEntered',
    value: function onEntered() {
      this.setState(_extends({}, this.state, { exited: false }));
      this.addOverlay();

      if (this.props.onEntered) {
        var _props;

        (_props = this.props).onEntered.apply(_props, arguments);
      }
    }
  }, {
    key: 'onExited',
    value: function onExited() {
      this.setState(_extends({}, this.state, { exited: true }));
      this.removeOverlay();

      if (this.props.onExited) {
        var _props2;

        (_props2 = this.props).onExited.apply(_props2, arguments);
      }
    }
  }, {
    key: 'getOverlayContainer',
    value: function getOverlayContainer(target) {
      var immediateAvailableContainer = (0, _closest2.default)(this.state.targetNode, '.react-spectrum-provider');
      return this.props.container || immediateAvailableContainer;
    }
  }, {
    key: 'hide',
    value: function hide() {
      // Only hide if this is the top overlay
      if (visibleOverlays[visibleOverlays.length - 1] === this && this.props.onHide) {
        this.props.onHide();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props3 = this.props,
          containerPadding = _props3.containerPadding,
          target = _props3.target,
          _props3$container = _props3.container,
          container = _props3$container === undefined ? this.getOverlayContainer(target) : _props3$container,
          placement = _props3.placement,
          offset = _props3.offset,
          crossOffset = _props3.crossOffset,
          flip = _props3.flip,
          _props3$boundariesEle = _props3.boundariesElement,
          boundariesElement = _props3$boundariesEle === undefined ? function () {
        return (0, _ownerDocument2.default)(_this2).body;
      } : _props3$boundariesEle,
          shouldUpdatePosition = _props3.shouldUpdatePosition,
          rootClose = _props3.rootClose,
          children = _props3.children,
          props = _objectWithoutProperties(_props3, ['containerPadding', 'target', 'container', 'placement', 'offset', 'crossOffset', 'flip', 'boundariesElement', 'shouldUpdatePosition', 'rootClose', 'children']);

      // Don't un-render the overlay while it's transitioning out.


      var mountOverlay = props.show || !this.state.exited;
      if (!mountOverlay) {
        // Don't bother showing anything if we don't have to.
        return null;
      }

      var child = children;

      // Position is be inner-most because it adds inline styles into the child,
      // which the other wrappers don't forward correctly.
      child = _react2.default.createElement(
        _Position2.default,
        { container: container, containerPadding: containerPadding, target: target, placement: placement, shouldUpdatePosition: shouldUpdatePosition, offset: offset, crossOffset: crossOffset, flip: flip, boundariesElement: boundariesElement },
        child
      );

      // This animates the child node by injecting props, so it must precede
      // anything that adds a wrapping div.
      var onExit = props.onExit,
          onExiting = props.onExiting,
          onEnter = props.onEnter,
          onEntering = props.onEntering;

      child = _react2.default.createElement(
        _OpenTransition2.default,
        {
          'in': props.show,
          appear: true,
          onExit: onExit,
          onExiting: onExiting,
          onExited: this.onExited,
          onEnter: onEnter,
          onEntering: onEntering,
          onEntered: this.onEntered },
        child
      );

      // This goes after everything else because it adds a wrapping div.
      if (rootClose) {
        child = _react2.default.createElement(
          _RootCloseWrapper2.default,
          { onRootClose: this.hide },
          child
        );
      }

      return _react2.default.createElement(
        _Portal2.default,
        { container: container },
        child
      );
    }
  }]);

  return Overlay;
}(_react2.default.Component)) || _class;

Overlay.defaultProps = {
  placement: 'left'
};
exports.default = Overlay;