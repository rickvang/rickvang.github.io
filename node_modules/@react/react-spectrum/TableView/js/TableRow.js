'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class;

var _autobindDecorator = require('autobind-decorator');

var _autobindDecorator2 = _interopRequireDefault(_autobindDecorator);

var _Checkbox = require('../../Checkbox');

var _Checkbox2 = _interopRequireDefault(_Checkbox);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _createId = require('../../utils/createId');

var _createId2 = _interopRequireDefault(_createId);

var _FocusManager = require('../../utils/FocusManager');

var _FocusManager2 = _interopRequireDefault(_FocusManager);

var _focusRing = require('../../utils/focusRing');

var _focusRing2 = _interopRequireDefault(_focusRing);

var _intl = require('../../utils/intl');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _TableCell = require('./TableCell');

var _TableCell2 = _interopRequireDefault(_TableCell);

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var intlMessages = {
  'cs-CZ': _interopRequireDefault(require('./../intl/cs-CZ.json')).default,
  'da-DK': _interopRequireDefault(require('./../intl/da-DK.json')).default,
  'de-DE': _interopRequireDefault(require('./../intl/de-DE.json')).default,
  'en-US': _interopRequireDefault(require('./../intl/en-US.json')).default,
  'es-ES': _interopRequireDefault(require('./../intl/es-ES.json')).default,
  'fi-FI': _interopRequireDefault(require('./../intl/fi-FI.json')).default,
  'fr-FR': _interopRequireDefault(require('./../intl/fr-FR.json')).default,
  'it-IT': _interopRequireDefault(require('./../intl/it-IT.json')).default,
  'ja-JP': _interopRequireDefault(require('./../intl/ja-JP.json')).default,
  'ko-KR': _interopRequireDefault(require('./../intl/ko-KR.json')).default,
  'nb-NO': _interopRequireDefault(require('./../intl/nb-NO.json')).default,
  'nl-NL': _interopRequireDefault(require('./../intl/nl-NL.json')).default,
  'pl-PL': _interopRequireDefault(require('./../intl/pl-PL.json')).default,
  'pt-BR': _interopRequireDefault(require('./../intl/pt-BR.json')).default,
  'ru-RU': _interopRequireDefault(require('./../intl/ru-RU.json')).default,
  'sv-SE': _interopRequireDefault(require('./../intl/sv-SE.json')).default,
  'tr-TR': _interopRequireDefault(require('./../intl/tr-TR.json')).default,
  'zh-CN': _interopRequireDefault(require('./../intl/zh-CN.json')).default,
  'zh-TW': _interopRequireDefault(require('./../intl/zh-TW.json')).default
};


var formatMessage = (0, _intl.messageFormatter)(intlMessages);

var FOCUSABLE_SELECTOR = '[tabIndex]:not([disabled]):not([aria-disabled])';

var TableRow = (0, _focusRing2.default)(_class = (0, _autobindDecorator2.default)(_class = function (_React$Component) {
  _inherits(TableRow, _React$Component);

  function TableRow(props) {
    _classCallCheck(this, TableRow);

    var _this = _possibleConstructorReturn(this, (TableRow.__proto__ || Object.getPrototypeOf(TableRow)).call(this, props));

    _this.state = {
      focused: false
    };

    _this.rowId = (0, _createId2.default)();
    return _this;
  }

  _createClass(TableRow, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if ('focused' in nextProps) {
        this.setState({
          focused: nextProps.focused
        });
      }
    }

    /**
     * Sets focus to the table row DOM element.
     */

  }, {
    key: 'focus',
    value: function focus() {
      if (this.row) {
        this.row.focus();
      }
    }
  }, {
    key: 'onCellClick',
    value: function onCellClick(column, isDoubleClick) {
      var rowIndex = null;

      if (this.props.collectionView) {
        var indexPath = this.props.collectionView.indexPathForComponent(this);
        rowIndex = indexPath && indexPath.index;
      }

      if (!isDoubleClick && this.props.onCellClick) {
        this.props.onCellClick(column, rowIndex);
      }

      if (isDoubleClick && this.props.onCellDoubleClick) {
        this.props.onCellDoubleClick(column, rowIndex);
      }
    }

    /**
     * Handle click event on checkbox to toggle selection of row using keyboard.
     * @param {MouseEvent} e Click event
     */

  }, {
    key: 'onCheckboxClick',
    value: function onCheckboxClick(e) {
      // force selection of item in the selection view
      var _props = this.props,
          collectionView = _props.collectionView,
          isHeaderRow = _props.isHeaderRow;


      if (collectionView && !isHeaderRow) {
        var indexPath = collectionView.indexPathForComponent(this);

        collectionView.selectItem(indexPath, true, e.shiftKey, true);
      }
    }
  }, {
    key: 'onMouseDown',
    value: function onMouseDown(event) {
      // Stop propagation on mouse down if the target is focusable.
      // Otherwise, collection-view will try to focus the row instead.
      if (event.target.matches(FOCUSABLE_SELECTOR) && event.target !== this.row) {
        event.stopPropagation();
      }
    }

    /**
     * Handle key down event on a row, to navigate between focusable descendant
     * elements using the left or right arrow keys, or to navigate between the
     * header row and the body using the down or up arrow keys.
     * @param {KeyboardEvent} event A keydown event
     */

  }, {
    key: 'onKeyDown',
    value: function onKeyDown(event) {
      var _props2 = this.props,
          collectionView = _props2.collectionView,
          isHeaderRow = _props2.isHeaderRow,
          onSelectChange = _props2.onSelectChange;
      var key = event.key;

      var focusable = null;

      switch (key) {
        case 'ArrowUp':
        case 'Up':
          if (!isHeaderRow && collectionView) {
            var indexPath = collectionView.indexPathForComponent(this);
            if (indexPath && indexPath.section === 0 && indexPath.index === 0) {
              focusable = collectionView.getDOMNode().previousSibling.querySelector(FOCUSABLE_SELECTOR);
            }
          }
          break;
        case 'ArrowDown':
        case 'Down':
          if (isHeaderRow) {
            focusable = this.row.parentNode.nextSibling.querySelector(FOCUSABLE_SELECTOR);
          }
          break;
        case 'a':
          if ((event.metaKey || event.ctrlKey) && onSelectChange) {
            onSelectChange(true);
            event.preventDefault();
            event.stopPropagation();
          }
          break;
        case 'Escape':
        case 'Esc':
          if (onSelectChange) {
            onSelectChange(false);
          }
          break;
        case 'Enter':
        case ' ':
          // Stop propagation on enter and space keys if the target is focusable.
          // Otherwise, collection-view will try to focus the row instead.
          if (event.target.matches(FOCUSABLE_SELECTOR) && event.target !== this.row) {
            event.stopPropagation();
          }
          break;
      }

      if (focusable) {
        event.preventDefault();
        event.stopPropagation();
        focusable.focus();
      }
    }

    /**
     * Handles focus event on row, setting focused state and refreshing visible items in the collection.
     */

  }, {
    key: 'onFocus',
    value: function onFocus() {
      this.setState({ focused: true });
    }

    /**
     * Handles blur event on row, setting focused state and refreshing visible items in the collection.
     */

  }, {
    key: 'onBlur',
    value: function onBlur() {
      this.setState({ focused: false });
    }
  }, {
    key: 'getAriaLabelledby',
    value: function getAriaLabelledby() {
      var _props3 = this.props,
          columns = _props3.columns,
          isHeaderRow = _props3.isHeaderRow,
          allowsSelection = _props3.allowsSelection,
          _props3$id = _props3.id,
          id = _props3$id === undefined ? this.rowId : _props3$id,
          tableId = _props3.tableId;

      var ariaLabelledby = null;

      if (isHeaderRow && tableId) {
        id = [tableId, 0].join('-');
      }

      ariaLabelledby = columns.map(function (column, i) {
        if (allowsSelection) {
          i += 1;
        }
        if (column.announce !== false) {
          return [[tableId, 0, i].join('-'), [id, i].join('-')].join(' ');
        }
      }).join(' ');

      return !isHeaderRow ? ariaLabelledby : null;
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props4 = this.props,
          columns = _props4.columns,
          renderCell = _props4.renderCell,
          _props4$selected = _props4.selected,
          selected = _props4$selected === undefined ? false : _props4$selected,
          _props4$focused = _props4.focused,
          focused = _props4$focused === undefined ? false : _props4$focused,
          isHeaderRow = _props4.isHeaderRow,
          allowsSelection = _props4.allowsSelection,
          onSelectChange = _props4.onSelectChange,
          _props4$id = _props4.id,
          id = _props4$id === undefined ? this.rowId : _props4$id,
          tableId = _props4.tableId,
          _props4$layoutInfo = _props4.layoutInfo,
          layoutInfo = _props4$layoutInfo === undefined ? {} : _props4$layoutInfo,
          collectionView = _props4.collectionView,
          allowsMultipleSelection = _props4.allowsMultipleSelection,
          otherProps = _objectWithoutProperties(_props4, ['columns', 'renderCell', 'selected', 'focused', 'isHeaderRow', 'allowsSelection', 'onSelectChange', 'id', 'tableId', 'layoutInfo', 'collectionView', 'allowsMultipleSelection']);

      var index = layoutInfo.index;

      var className = (0, _classnames2.default)('react-spectrum-TableView-row', {
        'spectrum-Table-head': isHeaderRow,
        'spectrum-Table-row': !isHeaderRow,
        'is-selected': selected,
        'is-focused': focused && this.state.focused,
        'is-drop-target': this.props['drop-target']
      });
      var ariaRowIndex = null;
      var tabIndex = null;
      var indeterminate = null;

      if (isHeaderRow && tableId) {
        id = [tableId, 0].join('-');
      }

      if (collectionView) {
        if (!isHeaderRow) {
          ariaRowIndex = index;
          if (ariaRowIndex !== null) {
            ariaRowIndex += 2;
          }

          // determine appropriate tabIndex for row depending on whether it is focused.
          tabIndex = focused || !collectionView.focusedIndexPath ? 0 : -1;
        } else {
          indeterminate = !selected && collectionView.selectedIndexPaths.length > 0;
        }
      }

      delete otherProps.onCellClick;
      delete otherProps.onCellDoubleClick;
      delete otherProps.onResize;
      delete otherProps.reusableView;
      delete otherProps.setSelectAll;

      var checkboxCellClassNames = (0, _classnames2.default)('spectrum-Table-checkboxCell', 'react-spectrum-TableView-checkboxCell');

      return _react2.default.createElement(
        _FocusManager2.default,
        { itemSelector: FOCUSABLE_SELECTOR, orientation: 'horizontal', manageTabIndex: false, includeSelf: true, ignorePageUpPageDown: true },
        _react2.default.createElement(
          'div',
          _extends({
            className: className,
            ref: function ref(row) {
              return _this2.row = row;
            },
            id: id,
            role: 'row',
            tabIndex: tabIndex,
            'aria-selected': allowsSelection ? selected : null,
            'aria-rowindex': isHeaderRow ? 1 : ariaRowIndex,
            'aria-labelledby': this.getAriaLabelledby(),
            onFocus: this.onFocus,
            onBlur: this.onBlur,
            onKeyDown: this.onKeyDown,
            onMouseDown: this.onMouseDown
          }, otherProps),
          allowsSelection && _react2.default.createElement(
            _TableCell2.default,
            {
              id: [id, 0].join('-'),
              isHeaderRow: isHeaderRow,
              className: checkboxCellClassNames,
              'aria-colindex': '1',
              'aria-label': isHeaderRow && allowsMultipleSelection === false ? formatMessage('Select') : null,
              focused: focused },
            _react2.default.createElement(_Checkbox2.default, {
              className: 'spectrum-Table-checkbox',
              checked: selected,
              indeterminate: indeterminate,
              onChange: onSelectChange,
              onClick: this.onCheckboxClick,
              onMouseDown: function onMouseDown(e) {
                return e.stopPropagation();
              },
              tabIndex: isHeaderRow || focused ? 0 : -1,
              title: isHeaderRow ? formatMessage('Select All') : formatMessage('Select'),
              style: isHeaderRow && !allowsMultipleSelection ? { visibility: 'hidden' } : null })
          ),
          columns.map(function (column, i) {
            return _react2.default.cloneElement(renderCell(column, i, focused), {
              key: i,
              id: [id, allowsSelection ? i + 1 : i].join('-'),
              'aria-colindex': allowsSelection ? i + 2 : i + 1,
              onClick: _this2.onCellClick.bind(_this2, column, false),
              onDoubleClick: _this2.onCellClick.bind(_this2, column, true),
              rowFocused: focused
            });
          })
        )
      );
    }
  }]);

  return TableRow;
}(_react2.default.Component)) || _class) || _class;

exports.default = TableRow;