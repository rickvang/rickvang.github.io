{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _class;\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _filterDOMProps = require('../../utils/filterDOMProps');\n\nvar _filterDOMProps2 = _interopRequireDefault(_filterDOMProps);\n\nvar _FocusManager = require('../../utils/FocusManager');\n\nvar _FocusManager2 = _interopRequireDefault(_FocusManager);\n\nvar _focusRing = require('../../utils/focusRing');\n\nvar _focusRing2 = _interopRequireDefault(_focusRing);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _Tag = require('./Tag');\n\nvar _Tag2 = _interopRequireDefault(_Tag);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nif (process.env.SCALE_MEDIUM && process.env.SCALE_LARGE) {\n  require('../../spectrum-css/tags/index.css');\n\n  require('../../spectrum-css/tags/index-diff.css');\n} else if (process.env.SCALE_LARGE) {\n  require('../../spectrum-css/tags/index-lg.css');\n} else {\n  require('../../spectrum-css/tags/index.css');\n}\n\nif (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHT) require('../../spectrum-css/tags/multiStops/light.css');\nif (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARK) require('../../spectrum-css/tags/multiStops/dark.css');\nif (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHTEST) require('../../spectrum-css/tags/multiStops/lightest.css');\nif (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARKEST) require('../../spectrum-css/tags/multiStops/darkest.css');\n/**\n * A TagList displays a list of Tags\n */\n\nvar TAGLIST_SELECTOR = '[role=row]:not([aria-disabled])';\nvar TAGLIST_SELECTED_SELECTOR = TAGLIST_SELECTOR + '[aria-selected=true]';\n\nvar TagList = (0, _focusRing2.default)(_class = function (_React$Component) {\n  _inherits(TagList, _React$Component);\n\n  function TagList() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, TagList);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = TagList.__proto__ || Object.getPrototypeOf(TagList)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n      selectedIndex: null,\n      focused: false\n    }, _this.handleFocus = function (e) {\n      var onFocus = _this.props.onFocus;\n\n      _this.setState({\n        focused: true\n      });\n\n      onFocus(e);\n    }, _this.handleBlur = function (e) {\n      var onBlur = _this.props.onBlur;\n\n      _this.setState({\n        focused: false\n      });\n\n      onBlur(e);\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(TagList, [{\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      if ('selectedIndex' in nextProps) {\n        this.setState({\n          selectedIndex: nextProps.selectedIndex\n        });\n      }\n    }\n  }, {\n    key: 'onClickItem',\n    value: function onClickItem(selectedIndex, e) {\n      this.setSelectedIndex(selectedIndex, e);\n    }\n  }, {\n    key: 'setSelectedIndex',\n    value: function setSelectedIndex(selectedIndex, e) {\n      var lastSelectedIndex = this.state.selectedIndex; // If selectedIndex is defined on props then this is a controlled component and we shouldn't\n      // change our own state.\n\n      if (!('selectedIndex' in this.props)) {\n        this.setState({\n          selectedIndex: selectedIndex\n        });\n      }\n\n      if (lastSelectedIndex !== selectedIndex) {\n        this.props.onChange(selectedIndex);\n      }\n    }\n  }, {\n    key: 'baseChildProps',\n    value: function baseChildProps(index) {\n      var _props = this.props,\n          readOnly = _props.readOnly,\n          onClose = _props.onClose,\n          disabled = _props.disabled;\n      var _state = this.state,\n          selectedIndex = _state.selectedIndex,\n          focused = _state.focused;\n      return {\n        key: index,\n        selected: !disabled && focused && selectedIndex === index,\n        tabIndex: !disabled && (selectedIndex === index || !focused && selectedIndex === null) ? 0 : -1,\n        closable: !readOnly,\n        disabled: disabled,\n        onClick: this.getChildOnClick(index),\n        onFocus: this.getChildOnFocus(index),\n        onClose: onClose,\n        role: 'gridcell'\n      };\n    }\n  }, {\n    key: 'getChildOnClick',\n    value: function getChildOnClick(index) {\n      if (this.props.disabled) {\n        return null;\n      }\n\n      var tagListOnClick = this.onClickItem.bind(this, index);\n      return function (e) {\n        tagListOnClick(e);\n      };\n    }\n  }, {\n    key: 'getChildOnFocus',\n    value: function getChildOnFocus(index) {\n      var _this2 = this;\n\n      if (this.props.disabled) {\n        return null;\n      }\n\n      return function (e) {\n        _this2.setSelectedIndex(index, e);\n\n        _this2.handleFocus;\n      };\n    }\n  }, {\n    key: 'renderChildren',\n    value: function renderChildren() {\n      var _this3 = this;\n\n      if (this.props.values) {\n        return this.renderValues();\n      }\n\n      return _react2.default.Children.map(this.props.children, function (child, index) {\n        return _react2.default.cloneElement(child, _this3.baseChildProps(index));\n      });\n    }\n  }, {\n    key: 'renderValues',\n    value: function renderValues() {\n      var _this4 = this;\n\n      var values = this.props.values;\n      return values.map(function (value, index) {\n        return _react2.default.createElement(_Tag2.default, _extends({\n          value: value\n        }, _this4.baseChildProps(index)), value);\n      });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props2 = this.props,\n          className = _props2.className,\n          name = _props2.name,\n          readOnly = _props2.readOnly,\n          disabled = _props2.disabled,\n          invalid = _props2.invalid,\n          otherProps = _objectWithoutProperties(_props2, ['className', 'name', 'readOnly', 'disabled', 'invalid']);\n\n      var focused = this.state.focused;\n      return _react2.default.createElement(_FocusManager2.default, {\n        itemSelector: TAGLIST_SELECTOR,\n        selectedItemSelector: TAGLIST_SELECTED_SELECTOR,\n        orientation: 'horizontal'\n      }, _react2.default.createElement('div', _extends({}, (0, _filterDOMProps2.default)(otherProps), {\n        className: (0, _classnames2.default)('spectrum-Tags', {\n          'is-disabled': disabled\n        }, className),\n        name: name,\n        readOnly: readOnly,\n        disabled: disabled,\n        role: 'grid',\n        'aria-atomic': 'false',\n        'aria-relevant': 'additions',\n        'aria-live': focused ? 'polite' : 'off',\n        'aria-disabled': disabled,\n        'aria-invalid': invalid,\n        onFocus: this.handleFocus,\n        onBlur: this.handleBlur\n      }), this.renderChildren()));\n    }\n  }]);\n\n  return TagList;\n}(_react2.default.Component)) || _class;\n\nTagList.displayName = 'TagList';\nTagList.propTypes = {\n  /** Custom CSS class to add to the tag list */\n  className: _propTypes2.default.string,\n\n  /** Whether to disable the tag list */\n  disabled: _propTypes2.default.bool,\n\n  /** Name of tag list **/\n  name: _propTypes2.default.string,\n\n  /** Function called when focus is taken away from the tag list */\n  onBlur: _propTypes2.default.func,\n\n  /** Function called when a tag  in the tag list is closed */\n  onClose: _propTypes2.default.func,\n\n  /** Function called when focus is put on the tag list */\n  onFocus: _propTypes2.default.func,\n\n  /** Whether the tag list can only be read */\n  readOnly: _propTypes2.default.bool,\n\n  /** Initial tags in the tag list */\n  values: _propTypes2.default.arrayOf(_propTypes2.default.string)\n};\nTagList.defaultProps = {\n  readOnly: false,\n  disabled: false,\n  onClose: function onClose() {},\n  onFocus: function onFocus() {},\n  onBlur: function onBlur() {},\n  onChange: function onChange() {}\n};\nexports.default = TagList;","map":null,"metadata":{},"sourceType":"script"}