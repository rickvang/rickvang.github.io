{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _Point = require('./Point');\n\nvar _Point2 = _interopRequireDefault(_Point);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/**\n * Represents a rectangle\n */\n\n\nvar Rect = function () {\n  /** @public */\n  function Rect() {\n    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var width = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var height = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n    _classCallCheck(this, Rect);\n    /**\n     * The x-coordinate of the rectangle\n     * @type {number}\n     */\n\n\n    this.x = x;\n    /**\n     * The y-coordinate of the rectangle\n     * @type {number}\n     */\n\n    this.y = y;\n    /**\n     * The width of the rectangle\n     * @type {number}\n     */\n\n    this.width = width;\n    /**\n     * The height of the rectangle\n     * @type {number}\n     */\n\n    this.height = height;\n  }\n  /**\n   * The maximum x-coordinate in the rectangle\n   * @type {number}\n   */\n\n\n  _createClass(Rect, [{\n    key: 'intersects',\n\n    /**\n     * Returns whether this rectangle intersects another rectangle\n     * @param {Rect} rect - The rectangle to check\n     * @return {boolean}\n     */\n    value: function intersects(rect) {\n      return this.x <= rect.x + rect.width && rect.x <= this.x + this.width && this.y <= rect.y + rect.height && rect.y <= this.y + this.height;\n    }\n    /**\n     * Returns whether this rectangle fully contains another rectangle\n     * @param {Rect} rect - The rectangle to check\n     * @return {boolean}\n     */\n\n  }, {\n    key: 'containsRect',\n    value: function containsRect(rect) {\n      return this.x <= rect.x && this.y <= rect.y && this.maxX >= rect.maxX && this.maxY >= rect.maxY;\n    }\n    /**\n     * Returns whether the rectangle contains the given point\n     * @param {Point} point - The point to check\n     * @return {boolean}\n     */\n\n  }, {\n    key: 'containsPoint',\n    value: function containsPoint(point) {\n      return this.x <= point.x && this.y <= point.y && this.maxX >= point.x && this.maxY >= point.y;\n    }\n    /**\n     * Returns the first corner of this rectangle (from top to bottom, left to right)\n     * that is contained in the given rectangle, or null of the rectangles do not intersect.\n     * @param {Rect} rect - The rectangle to check\n     * @return {string}\n     */\n\n  }, {\n    key: 'getCornerInRect',\n    value: function getCornerInRect(rect) {\n      var _arr = ['topLeft', 'topRight', 'bottomLeft', 'bottomRight'];\n\n      for (var _i = 0; _i < _arr.length; _i++) {\n        var key = _arr[_i];\n\n        if (rect.containsPoint(this[key])) {\n          return key;\n        }\n      }\n\n      return null;\n    }\n    /**\n     * Returns a copy of this rectangle\n     * @return {Rect}\n     */\n\n  }, {\n    key: 'copy',\n    value: function copy() {\n      return new Rect(this.x, this.y, this.width, this.height);\n    }\n  }, {\n    key: 'maxX',\n    get: function get() {\n      return this.x + this.width;\n    }\n    /**\n     * The maximum y-coordinate in the rectangle\n     * @type {number}\n     */\n\n  }, {\n    key: 'maxY',\n    get: function get() {\n      return this.y + this.height;\n    }\n    /**\n     * The area of the rectangle\n     * @type {number}\n     */\n\n  }, {\n    key: 'area',\n    get: function get() {\n      return this.width * this.height;\n    }\n    /**\n     * The top left corner of the rectangle\n     * @type {Point}\n     */\n\n  }, {\n    key: 'topLeft',\n    get: function get() {\n      return new _Point2.default(this.x, this.y);\n    }\n    /**\n     * The top right corner of the rectangle\n     * @type {Point}\n     */\n\n  }, {\n    key: 'topRight',\n    get: function get() {\n      return new _Point2.default(this.maxX, this.y);\n    }\n    /**\n     * The bottom left corner of the rectangle\n     * @type {Point}\n     */\n\n  }, {\n    key: 'bottomLeft',\n    get: function get() {\n      return new _Point2.default(this.x, this.maxY);\n    }\n    /**\n     * The bottom right corner of the rectangle\n     * @type {Point}\n     */\n\n  }, {\n    key: 'bottomRight',\n    get: function get() {\n      return new _Point2.default(this.maxX, this.maxY);\n    }\n  }]);\n\n  return Rect;\n}();\n\nexports.default = Rect;","map":null,"metadata":{},"sourceType":"script"}