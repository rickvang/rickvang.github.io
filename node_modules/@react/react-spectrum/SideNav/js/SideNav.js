'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class;

var _autobindDecorator = require('autobind-decorator');

var _autobindDecorator2 = _interopRequireDefault(_autobindDecorator);

var _events = require('../../utils/events');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _createId = require('../../utils/createId');

var _createId2 = _interopRequireDefault(_createId);

var _filterDOMProps = require('../../utils/filterDOMProps');

var _filterDOMProps2 = _interopRequireDefault(_filterDOMProps);

var _FocusManager = require('../../utils/FocusManager');

var _FocusManager2 = _interopRequireDefault(_FocusManager);

var _focusRing = require('../../utils/focusRing');

var _focusRing2 = _interopRequireDefault(_focusRing);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

if (process.env.SCALE_MEDIUM && process.env.SCALE_LARGE) {
  require('../../spectrum-css/sidenav/index.css');

  require('../../spectrum-css/sidenav/index-diff.css');
} else if (process.env.SCALE_LARGE) {
  require('../../spectrum-css/sidenav/index-lg.css');
} else {
  require('../../spectrum-css/sidenav/index.css');
}

if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHT) require('../../spectrum-css/sidenav/multiStops/light.css');
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARK) require('../../spectrum-css/sidenav/multiStops/dark.css');
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHTEST) require('../../spectrum-css/sidenav/multiStops/lightest.css');
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARKEST) require('../../spectrum-css/sidenav/multiStops/darkest.css');


var SIDENAV_ITEM_SELECTOR = '.spectrum-SideNav-itemLink:not(.is-hidden):not(.is-disabled)';
var SELECTED_SIDENAV_ITEM_SELECTOR = SIDENAV_ITEM_SELECTOR + '.is-selected';

var isNestedSelected = function isNestedSelected(props, value) {
  return props.children && props.children.filter(function (c) {
    var children = c.props.children;

    if (children && typeof children !== 'string') {
      return isNestedSelected(c.props, value);
    }
    return c.props.value === value;
  }).length !== 0;
};

var SideNav = (0, _autobindDecorator2.default)(_class = (0, _focusRing2.default)(_class = function (_Component) {
  _inherits(SideNav, _Component);

  function SideNav(props) {
    _classCallCheck(this, SideNav);

    var _this = _possibleConstructorReturn(this, (SideNav.__proto__ || Object.getPrototypeOf(SideNav)).call(this, props));

    _this.state = {
      value: _this.props.defaultValue || _this.props.value
    };

    _this.id = (0, _createId2.default)();
    return _this;
  }

  _createClass(SideNav, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var value = nextProps.value;

      if (value !== this.props.value) {
        this.setState({ value: value });
      }
    }
  }, {
    key: 'isSelected',
    value: function isSelected(child) {
      return child.props.value === this.state.value;
    }
  }, {
    key: 'isDefaultSelected',
    value: function isDefaultSelected(child) {
      return child.props.value === this.props.defaultValue;
    }
  }, {
    key: 'onSelect',
    value: function onSelect(value, e) {
      if (this.props.value === undefined) {
        this.setState({ value: value });
      }
      this.props.onSelect(value, e);
    }
  }, {
    key: 'isDefaultExpanded',
    value: function isDefaultExpanded(child) {
      if (child.props.defaultExpanded !== undefined) {
        return child.props.defaultExpanded;
      }
      // Expand nested sidenav if any item is selected
      return Array.isArray(child.props.children) && isNestedSelected(child.props, this.state.value);
    }
  }, {
    key: 'getListRole',
    value: function getListRole() {
      var _props = this.props,
          variant = _props.variant,
          role = _props.role;

      if (variant === 'multiLevel') {
        return role === 'none' ? 'group' : 'tree';
      }
      return undefined;
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props2 = this.props,
          className = _props2.className,
          children = _props2.children,
          hidden = _props2.hidden,
          variant = _props2.variant,
          _props2$id = _props2.id,
          id = _props2$id === undefined ? this.id : _props2$id,
          role = _props2.role,
          manageTabIndex = _props2.manageTabIndex,
          typeToSelect = _props2.typeToSelect,
          _props2$ariaLevel = _props2.ariaLevel,
          ariaLevel = _props2$ariaLevel === undefined ? 1 : _props2$ariaLevel,
          autoFocus = _props2.autoFocus,
          otherProps = _objectWithoutProperties(_props2, ['className', 'children', 'hidden', 'variant', 'id', 'role', 'manageTabIndex', 'typeToSelect', 'ariaLevel', 'autoFocus']);

      var isMultiLevel = variant === 'multiLevel';
      var Element = role !== 'none' ? 'nav' : 'div';

      delete otherProps.value;

      return _react2.default.createElement(
        Element,
        {
          id: id,
          hidden: hidden,
          'aria-hidden': hidden,
          role: role,
          'aria-label': role !== 'none' ? otherProps['aria-label'] : undefined,
          'aria-labelledby': role !== 'none' ? otherProps['aria-labelledby'] : undefined,
          className: className },
        _react2.default.createElement(
          _FocusManager2.default,
          {
            itemSelector: SIDENAV_ITEM_SELECTOR,
            selectedItemSelector: SELECTED_SIDENAV_ITEM_SELECTOR,
            manageTabIndex: isMultiLevel || manageTabIndex,
            typeToSelect: isMultiLevel || typeToSelect,
            autoFocus: autoFocus },
          _react2.default.createElement(
            'ul',
            _extends({
              className: (0, _classnames2.default)('spectrum-SideNav', {
                'spectrum-SideNav--multiLevel': isMultiLevel
              }),
              role: this.getListRole(),
              id: id + '-list'
            }, (0, _filterDOMProps2.default)(otherProps)),
            _react.Children.map(children, function (child) {
              return (0, _react.cloneElement)(child, {
                role: isMultiLevel ? 'treeitem' : undefined,
                hidden: hidden,
                manageTabIndex: manageTabIndex,
                ariaLevel: isMultiLevel ? ariaLevel : undefined,
                _nestedNavValue: _this2.state.value,
                _isSelected: _this2.isSelected(child),
                onSelect: (0, _events.chain)(child.props.onSelect, _this2.onSelect),
                defaultExpanded: _this2.isDefaultExpanded(child)
              });
            })
          )
        )
      );
    }
  }]);

  return SideNav;
}(_react.Component)) || _class) || _class;

SideNav.propTypes = {
  /**
   * The variant of sidenav to display
   */
  variant: _propTypes2.default.oneOf(['default', 'multiLevel']),

  /**
   * Whether SideNav should use roving tabIndex so that only one item can receive focus at a time. With multiLevel, this defaults to true.
   */
  manageTabIndex: _propTypes2.default.bool,

  /**
   * Whether SideNav should use alphanumeric search to locate next item to focus. With multiLevel, this defaults to true.
   */
  typeToSelect: _propTypes2.default.bool,

  /**
   * Custom className of sidenav to apply
   */
  className: _propTypes2.default.string,

  /**
   * Value of selected Sidenav Item (use for controlled selection)
   */
  value: _propTypes2.default.string,

  /**
   * Value of selected Sidenav Item at initialization
   */
  defaultValue: _propTypes2.default.string,

  /**
   * Whether to automatically set focus to the seleted item when the component mounts.
   */
  autoFocus: _propTypes2.default.bool,

  /**
   * A select handler for the sidenav
   */
  onSelect: _propTypes2.default.func
};
SideNav.defaultProps = {
  variant: 'default',
  manageTabIndex: false,
  typeToSelect: false,
  autoFocus: false,
  onSelect: function onSelect() {}
};
exports.default = SideNav;