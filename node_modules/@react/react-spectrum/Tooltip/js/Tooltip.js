'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _createId = require('../../utils/createId');

var _createId2 = _interopRequireDefault(_createId);

var _filterDOMProps = require('../../utils/filterDOMProps');

var _filterDOMProps2 = _interopRequireDefault(_filterDOMProps);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

if (process.env.SCALE_MEDIUM && process.env.SCALE_LARGE) {
  require('../../spectrum-css/tooltip/index.css');

  require('../../spectrum-css/tooltip/index-diff.css');
} else if (process.env.SCALE_LARGE) {
  require('../../spectrum-css/tooltip/index-lg.css');
} else {
  require('../../spectrum-css/tooltip/index.css');
}

if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHT) require('../../spectrum-css/tooltip/multiStops/light.css');
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARK) require('../../spectrum-css/tooltip/multiStops/dark.css');
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHTEST) require('../../spectrum-css/tooltip/multiStops/lightest.css');
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARKEST) require('../../spectrum-css/tooltip/multiStops/darkest.css');

var Tooltip = function (_Component) {
  _inherits(Tooltip, _Component);

  function Tooltip(props) {
    _classCallCheck(this, Tooltip);

    var _this = _possibleConstructorReturn(this, (Tooltip.__proto__ || Object.getPrototypeOf(Tooltip)).call(this, props));

    _this.tooltipId = (0, _createId2.default)();
    return _this;
  }

  _createClass(Tooltip, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          variant = _props.variant,
          children = _props.children,
          arrowStyle = _props.arrowStyle,
          className = _props.className,
          placement = _props.placement,
          open = _props.open,
          _props$id = _props.id,
          id = _props$id === undefined ? this.tooltipId : _props$id,
          otherProps = _objectWithoutProperties(_props, ['variant', 'children', 'arrowStyle', 'className', 'placement', 'open', 'id']);

      return _react2.default.createElement(
        'span',
        _extends({
          className: (0, _classnames2.default)('spectrum-Tooltip', 'spectrum-Tooltip--' + variant, 'spectrum-Tooltip--' + placement.split(' ')[0], {
            'is-open': open
          }, className),
          id: id
        }, (0, _filterDOMProps2.default)(otherProps)),
        _react2.default.createElement(
          'span',
          { className: 'spectrum-Tooltip-label' },
          children
        ),
        _react2.default.createElement('span', { className: 'spectrum-Tooltip-tip', style: arrowStyle })
      );
    }
  }]);

  return Tooltip;
}(_react.Component);

Tooltip.propTypes = {
  /**
   * The placement of the tooltip.
   */
  placement: _propTypes2.default.oneOf(['bottom', 'bottom left', 'bottom right', 'top', 'top left', 'top right', 'left', 'left top', 'left bottom', 'right', 'right top', 'right bottom']),

  /**
   * The variant will affect color.
   */
  variant: _propTypes2.default.oneOf(['inspect', 'info', 'success', 'error']),

  /**
   * The class name of the tooltip.
   */
  className: _propTypes2.default.string,

  /**
   * The ID of the tooltip.
   */
  id: _propTypes2.default.string,

  /**
   * The WAI-ARIA role for the tooltip
   */
  role: _propTypes2.default.oneOf(['tooltip']),

  /**
   * Control if the tooltip should be opened or not.
   */
  open: _propTypes2.default.bool
};
Tooltip.defaultProps = {
  variant: 'inspect',
  placement: 'right',
  open: true,
  role: 'tooltip'
};
exports.default = Tooltip;