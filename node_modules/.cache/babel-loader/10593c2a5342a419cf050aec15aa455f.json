{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _DataSource2 = require('./DataSource.js');\n\nvar _DataSource3 = _interopRequireDefault(_DataSource2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/**\n * This is a simple concrete implementation of a {@link DataSource}\n * that returns content from a 2d array.\n */\n\n\nvar ArrayDataSource = function (_DataSource) {\n  _inherits(ArrayDataSource, _DataSource);\n  /**\n   * Creates an ArrayDataSource\n   * @param {Array<Array>} sections an array of sections\n   */\n\n\n  function ArrayDataSource() {\n    var sections = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n    _classCallCheck(this, ArrayDataSource);\n\n    var _this = _possibleConstructorReturn(this, (ArrayDataSource.__proto__ || Object.getPrototypeOf(ArrayDataSource)).call(this));\n\n    _this.sections = sections;\n    return _this;\n  }\n\n  _createClass(ArrayDataSource, [{\n    key: 'getNumberOfSections',\n    value: function getNumberOfSections() {\n      return this.sections.length;\n    }\n    /**\n     * Returns an array of items in the given section.\n     * Mostly for use by subclasses. Other methods in this\n     * class use this method to get items in a section.\n     * @param {number} section the section to retrieve\n     * @return {Array}\n     */\n\n  }, {\n    key: 'getItemsInSection',\n    value: function getItemsInSection(section) {\n      return this.sections[section];\n    }\n  }, {\n    key: 'getSectionLength',\n    value: function getSectionLength(section) {\n      return this.getItemsInSection(section).length;\n    }\n  }, {\n    key: 'getItem',\n    value: function getItem(section, index) {\n      return this.getItemsInSection(section)[index];\n    }\n  }, {\n    key: 'startTransaction',\n    value: function startTransaction() {\n      this.emit('startTransaction');\n    }\n  }, {\n    key: 'endTransaction',\n    value: function endTransaction(animated) {\n      this.emit('endTransaction', animated);\n    }\n  }, {\n    key: 'insertItem',\n    value: function insertItem(indexPath, item, animated) {\n      this.getItemsInSection(indexPath.section).splice(indexPath.index, 0, item);\n      this.emit('insertItem', indexPath, animated);\n    }\n  }, {\n    key: 'insertSection',\n    value: function insertSection(section, items, animated) {\n      this.sections.splice(section, 0, items);\n      this.emit('insertSection', section, animated);\n    }\n  }, {\n    key: 'removeItem',\n    value: function removeItem(indexPath, animated) {\n      this.getItemsInSection(indexPath.section).splice(indexPath.index, 1);\n      this.emit('removeItem', indexPath, animated);\n    }\n  }, {\n    key: 'removeSection',\n    value: function removeSection(section, animated) {\n      this.sections.splice(section, 1);\n      this.emit('removeSection', section, animated);\n    }\n  }, {\n    key: 'moveItem',\n    value: function moveItem(from, to, animated) {\n      var item = this.getItemsInSection(from.section).splice(from.index, 1)[0];\n      this.getItemsInSection(to.section).splice(to.index, 0, item);\n      this.emit('moveItem', from, to, animated);\n    }\n  }, {\n    key: 'moveSection',\n    value: function moveSection(from, to, animated) {\n      var section = this.sections.splice(from, 1)[0];\n      this.sections.splice(to, 0, section);\n      this.emit('moveSection', from, to, animated);\n    }\n  }, {\n    key: 'replaceItem',\n    value: function replaceItem(indexPath, item, animated) {\n      this.getItemsInSection(indexPath.section)[indexPath.index] = item;\n      this.emit('reloadItem', indexPath, animated);\n    }\n  }, {\n    key: 'replaceSection',\n    value: function replaceSection(section, items, animated) {\n      this.sections[section] = items;\n      this.emit('reloadSection', section, animated);\n    }\n  }]);\n\n  return ArrayDataSource;\n}(_DataSource3.default);\n\nexports.default = ArrayDataSource;","map":null,"metadata":{},"sourceType":"script"}