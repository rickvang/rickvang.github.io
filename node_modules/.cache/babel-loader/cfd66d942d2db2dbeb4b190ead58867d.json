{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ToastContainer = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nexports.addToast = addToast;\nexports.removeToast = removeToast;\nexports.success = success;\nexports.warning = warning;\nexports.error = error;\nexports.info = info;\nexports.help = help;\n\nvar _createId = require('../../utils/createId');\n\nvar _createId2 = _interopRequireDefault(_createId);\n\nvar _CSSTransition = require('react-transition-group/CSSTransition');\n\nvar _CSSTransition2 = _interopRequireDefault(_CSSTransition);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _timer = require('../../utils/timer');\n\nvar _timer2 = _interopRequireDefault(_timer);\n\nvar _Toast = require('./Toast');\n\nvar _Toast2 = _interopRequireDefault(_Toast);\n\nvar _TransitionGroup = require('react-transition-group/TransitionGroup');\n\nvar _TransitionGroup2 = _interopRequireDefault(_TransitionGroup);\n\nrequire('../style/index.css');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar TOAST_CONTAINERS = new Map();\nvar TOAST_TIMEOUT = 5000;\nvar TOAST_ANIMATION_TIME = 200;\n/**\n * @type {Map<Toast, {Timer, int}>}\n * Maps allow us to use objects as keys\n * timer - a Timer object\n * id - a unique integer to identify the toast by, used\n *   to keep the key so React doesn't clobber our DOM and\n *   cause use to lose focus while other elements are\n *   being removed around it\n */\n\nvar TOAST_DATA = new Map();\n\nvar ToastContainer = exports.ToastContainer = function (_React$Component) {\n  _inherits(ToastContainer, _React$Component);\n\n  function ToastContainer() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, ToastContainer);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ToastContainer.__proto__ || Object.getPrototypeOf(ToastContainer)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n      toasts: []\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(ToastContainer, [{\n    key: 'timerAction',\n    value: function timerAction(toast, action) {\n      if (TOAST_DATA.has(toast)) {\n        var timer = TOAST_DATA.get(toast).timer;\n\n        if (timer) {\n          timer[action]();\n        }\n      }\n    }\n  }, {\n    key: 'add',\n    value: function add(toast) {\n      var timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : TOAST_TIMEOUT;\n\n      if (timeout < 0) {\n        timeout = TOAST_TIMEOUT;\n      }\n\n      TOAST_DATA.set(toast, {\n        timer: timeout === 0 ? null : new _timer2.default(this.remove.bind(this, toast), timeout),\n        id: (0, _createId2.default)()\n      });\n      this.setState({\n        toasts: [].concat(_toConsumableArray(this.state.toasts), [toast])\n      });\n    }\n  }, {\n    key: 'remove',\n    value: function remove(toast, e) {\n      var currentToasts = this.state.toasts;\n      var toasts = currentToasts.filter(function (t) {\n        return t !== toast;\n      });\n\n      if (toasts.length !== currentToasts.length && toast.props.onClose) {\n        toast.props.onClose(e);\n      }\n\n      this.setState({\n        toasts: toasts\n      });\n      this.timerAction(toast, 'pause');\n      TOAST_DATA.delete(toast);\n    }\n  }, {\n    key: 'onFocus',\n    value: function onFocus(toast, e) {\n      this.timerAction(toast, 'pause');\n\n      if (toast.props.onFocus) {\n        toast.props.onFocus();\n      }\n    }\n  }, {\n    key: 'onBlur',\n    value: function onBlur(toast, e) {\n      this.timerAction(toast, 'resume');\n\n      if (toast.props.onBlur) {\n        toast.props.onBlur();\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      return _react2.default.createElement(_TransitionGroup2.default, {\n        className: 'react-spectrum-ToastContainer'\n      }, this.state.toasts.map(function (toast) {\n        return _react2.default.createElement(_CSSTransition2.default, {\n          key: TOAST_DATA.get(toast).id,\n          classNames: 'react-spectrum-Toast-slide',\n          timeout: TOAST_ANIMATION_TIME\n        }, _react2.default.cloneElement(toast, {\n          onClose: _this2.remove.bind(_this2, toast),\n          onFocus: _this2.onFocus.bind(_this2, toast),\n          onBlur: _this2.onBlur.bind(_this2, toast)\n        }));\n      }));\n    }\n  }]);\n\n  return ToastContainer;\n}(_react2.default.Component);\n\nfunction createToastNode(container) {\n  var parent = container || document.querySelector('.react-spectrum-provider') || document.body;\n  var node = document.createElement('div');\n  parent.appendChild(node);\n  return node;\n}\n\nfunction ensureToastContainer(container, callback) {\n  var toastContainer = TOAST_CONTAINERS.get(container); // Make sure that toastContainer is a real DOM node, not only a memory footprint of previously cached node.\n\n  if (toastContainer && document.body.contains(_reactDom2.default.findDOMNode(toastContainer))) {\n    callback(toastContainer);\n  } else {\n    var toastContainerRef = void 0;\n\n    _reactDom2.default.render(_react2.default.createElement(ToastContainer, {\n      ref: function ref(_ref2) {\n        return toastContainerRef = _ref2;\n      }\n    }), createToastNode(container), function () {\n      TOAST_CONTAINERS.set(container, toastContainerRef);\n      callback(toastContainerRef);\n    });\n  }\n}\n\nfunction addToast(toast, timeout, container) {\n  ensureToastContainer(container, function (toastContainer) {\n    return toastContainer.add(toast, timeout);\n  });\n}\n\nfunction removeToast(toast, container) {\n  ensureToastContainer(container, function (toastContainer) {\n    return toastContainer.remove(toast);\n  });\n}\n\nfunction success(message) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  addToast(_react2.default.createElement(_Toast2.default, _extends({\n    closable: true,\n    variant: 'success'\n  }, options), message), options.timeout, options.container);\n}\n\nfunction warning(message) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  addToast(_react2.default.createElement(_Toast2.default, _extends({\n    closable: true,\n    variant: 'warning'\n  }, options), message), options.timeout, options.container);\n}\n\nfunction error(message) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  addToast(_react2.default.createElement(_Toast2.default, _extends({\n    closable: true,\n    variant: 'error'\n  }, options), message), options.timeout, options.container);\n}\n\nfunction info(message) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  addToast(_react2.default.createElement(_Toast2.default, _extends({\n    closable: true,\n    variant: 'info'\n  }, options), message), options.timeout, options.container);\n}\n\nfunction help(message) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  addToast(_react2.default.createElement(_Toast2.default, _extends({\n    closable: true,\n    variant: 'help'\n  }, options), message), options.timeout, options.container);\n}","map":null,"metadata":{},"sourceType":"script"}