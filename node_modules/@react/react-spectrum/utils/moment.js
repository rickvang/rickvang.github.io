'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.formatMoment = exports.isDateInRange = exports.toMoment = undefined;

var _momentRange = require('moment-range');

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var toMoment = exports.toMoment = function toMoment(value, format) {
  if (!value) {
    return null;
  }

  // if 'today'
  if (value === 'today') {
    return (0, _moment2.default)();
  }

  if (value instanceof _momentRange.DateRange) {
    return value;
  }

  if (Array.isArray(value)) {
    return new _momentRange.DateRange(value.map(function (v) {
      return toMoment(v, format);
    }));
  }

  // If it's a moment object
  if (_moment2.default.isMoment(value)) {
    return value.isValid() ? value.clone() : null;
  }

  // Anything else
  var result = (0, _moment2.default)(value, value instanceof Date ? null : format, true);
  return result.isValid() ? result : null;
};

var isDateInRange = exports.isDateInRange = function isDateInRange(date, min, max) {
  if (!min && !max) {
    return true;
  }
  if (!min) {
    return date <= max;
  }
  if (!max) {
    return date >= min;
  }
  return min <= date && date <= max;
};

var formatMoment = exports.formatMoment = function formatMoment(date, valueFormat) {
  if (!date) {
    return '';
  }
  if (valueFormat === _moment2.default.ISO_8601) {
    return date.format();
  }
  if (typeof valueFormat === 'string') {
    return date.format(valueFormat);
  }

  throw new Error(valueFormat + ' is not valid, \'valueFormat\' should be a moment format string ' + 'or the moment.ISO_8601 constant.');
};