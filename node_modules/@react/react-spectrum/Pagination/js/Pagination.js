'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class;

var _autobindDecorator = require('autobind-decorator');

var _autobindDecorator2 = _interopRequireDefault(_autobindDecorator);

var _Button = require('../../Button');

var _Button2 = _interopRequireDefault(_Button);

var _ChevronLeftMedium = require('../../Icon/core/ChevronLeftMedium');

var _ChevronLeftMedium2 = _interopRequireDefault(_ChevronLeftMedium);

var _ChevronRightMedium = require('../../Icon/core/ChevronRightMedium');

var _ChevronRightMedium2 = _interopRequireDefault(_ChevronRightMedium);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _filterDOMProps = require('../../utils/filterDOMProps');

var _filterDOMProps2 = _interopRequireDefault(_filterDOMProps);

var _intl = require('../../utils/intl');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Textfield = require('../../Textfield');

var _Textfield2 = _interopRequireDefault(_Textfield);

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var intlMessages = {
  'en-US': _interopRequireDefault(require('./../intl/en-US.json')).default
};

if (process.env.SCALE_MEDIUM && process.env.SCALE_LARGE) {
  require('../../spectrum-css/pagination/index.css');

  require('../../spectrum-css/pagination/index-diff.css');
} else if (process.env.SCALE_LARGE) {
  require('../../spectrum-css/pagination/index-lg.css');
} else {
  require('../../spectrum-css/pagination/index.css');
}

if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHT) require('../../spectrum-css/pagination/multiStops/light.css');
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARK) require('../../spectrum-css/pagination/multiStops/dark.css');
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHTEST) require('../../spectrum-css/pagination/multiStops/lightest.css');
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARKEST) require('../../spectrum-css/pagination/multiStops/darkest.css');

if (process.env.SCALE_MEDIUM && process.env.SCALE_LARGE) {
  require('../../spectrum-css/splitbutton/index.css');

  require('../../spectrum-css/splitbutton/index-diff.css');
} else if (process.env.SCALE_LARGE) {
  require('../../spectrum-css/splitbutton/index-lg.css');
} else {
  require('../../spectrum-css/splitbutton/index.css');
}

var formatMessage = (0, _intl.messageFormatter)(intlMessages);

var Pagination = (0, _autobindDecorator2.default)(_class = function (_Component) {
  _inherits(Pagination, _Component);

  function Pagination() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Pagination);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Pagination.__proto__ || Object.getPrototypeOf(Pagination)).call.apply(_ref, [this].concat(args))), _this), _this.defaultPage = _this.props.currentPage || _this.props.defaultPage, _this.state = {
      currentPage: _this.defaultPage,
      pageInput: _this.defaultPage
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Pagination, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var currentPage = nextProps.currentPage;
      if ('currentPage' in nextProps && !this.isInvalidPage(currentPage)) {
        this.setState({ currentPage: currentPage, pageInput: currentPage });
      }
    }
  }, {
    key: 'isInvalidPage',
    value: function isInvalidPage(page) {
      var totalPages = this.props.totalPages;

      return isNaN(page) || page < 1 || totalPages && page > totalPages;
    }
  }, {
    key: 'changePage',
    value: function changePage(pageNumber, eventToFire, event) {
      if (this.isInvalidPage(pageNumber)) {
        return;
      }
      if (!('currentPage' in this.props)) {
        this.setState({ currentPage: pageNumber, pageInput: pageNumber });
      }
      if (eventToFire) {
        eventToFire(pageNumber, event);
      }
    }
  }, {
    key: 'onPageInputChange',
    value: function onPageInputChange(value) {
      if (value === '' || !this.isInvalidPage(Number(value))) {
        this.setState({ pageInput: value });
      }
    }
  }, {
    key: 'onKeyDown',
    value: function onKeyDown(event) {
      var currentPage = Number(this.state.pageInput);
      switch (event.key) {
        case 'ArrowUp':
        case 'Up':
          currentPage += 1;
          break;
        case 'ArrowDown':
        case 'Down':
          currentPage -= 1;
          break;
        case 'Enter':
        case ' ':
          return this.changePage(currentPage, this.props.onChange, event);
      }
      this.onPageInputChange(currentPage);
    }
  }, {
    key: 'onPrevious',
    value: function onPrevious(e) {
      this.changePage(this.state.currentPage - 1, this.props.onPrevious, e);
    }
  }, {
    key: 'onNext',
    value: function onNext(e) {
      this.changePage(this.state.currentPage + 1, this.props.onNext, e);
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          mode = _props.mode,
          variant = _props.variant,
          totalPages = _props.totalPages,
          otherProps = _objectWithoutProperties(_props, ['mode', 'variant', 'totalPages']);

      delete otherProps.onChange;

      var pageInput = this.state.pageInput;

      var isButtonMode = variant === 'button';
      var isExplicitMode = variant === 'explicit';
      var buttonVariant = isButtonMode ? mode : 'icon';

      return _react2.default.createElement(
        'nav',
        _extends({
          className: (0, _classnames2.default)({
            'spectrum-SplitButton': isButtonMode,
            'spectrum-SplitButton--left': isButtonMode,
            'spectrum-Pagination--explicit': isExplicitMode
          })
        }, (0, _filterDOMProps2.default)(otherProps)),
        _react2.default.createElement(
          _Button2.default,
          {
            onClick: this.onPrevious,
            variant: buttonVariant,
            'aria-label': formatMessage('previous'),
            className: (0, _classnames2.default)({
              'spectrum-SplitButton-trigger': isButtonMode
            }) },
          _react2.default.createElement(_ChevronLeftMedium2.default, null)
        ),
        isExplicitMode && [_react2.default.createElement(_Textfield2.default, {
          key: 1,
          value: pageInput,
          onChange: this.onPageInputChange,
          onKeyDown: this.onKeyDown,
          className: 'spectrum-Pagination-input' }), _react2.default.createElement(
          'span',
          {
            key: 2,
            className: 'spectrum-Body--secondary spectrum-Pagination-counter' },
          formatMessage('page_count', { n: totalPages })
        )],
        _react2.default.createElement(
          _Button2.default,
          {
            onClick: this.onNext,
            variant: buttonVariant,
            'aria-label': formatMessage('next'),
            className: (0, _classnames2.default)({
              'spectrum-SplitButton-action': isButtonMode
            }) },
          _react2.default.createElement(
            'span',
            { className: 'spectrum-Button-label' },
            isButtonMode ? formatMessage('next') : ''
          ),
          _react2.default.createElement(_ChevronRightMedium2.default, null)
        )
      );
    }
  }]);

  return Pagination;
}(_react.Component)) || _class;

Pagination.propTypes = {
  /**
   * Button will give two button controls, one for increment and one for decrement.
   * Explicit will give a text field input that accepts numbers between 1 and totalPages.
   * When a number is typed in explicit mode, an onChange is fired only when enter is pressed.
   * If the user tabs off without hitting enter and then uses the increment button, it will resume
   * from the number it was at before the user typed anything.
   */
  variant: _propTypes2.default.oneOf(['button', 'explicit']),

  /**
   * The mode of pagination. This is purely cosmetic.
   */
  mode: _propTypes2.default.oneOf(['cta', 'primary', 'secondary']),

  /**
   * The current page number.
   */
  currentPage: _propTypes2.default.number,

  /**
   * The default page number.
   */
  defaultPage: _propTypes2.default.number,

  /**
   * The total page number. If user hits the total number, the pagination will be capped and will not
   * progress any higher. It also can't go lower than 1.
   */
  totalPages: _propTypes2.default.number,

  /**
   * The callback function when the pagination is changed. It sends the value of the new current page.
   */
  onChange: _propTypes2.default.func,

  /**
   * The callback function when the pagination is changed to previous page.
   * It sends the value of the new current page.
   */
  onPrevious: _propTypes2.default.func,

  /**
   * The callback function when the pagination is changed to next page.
   * It sends the value of the new current page.
   */
  onNext: _propTypes2.default.func
};
Pagination.defaultProps = {
  variant: 'button',
  mode: 'primary',
  defaultPage: 1
};
exports.default = Pagination;


Pagination.displayName = 'Pagination';