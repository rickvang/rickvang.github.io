'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Image or file preview, displayed at the top of a card. Pass contents as children, often an Asset component.
 */
var CardPreview = function (_React$Component) {
  _inherits(CardPreview, _React$Component);

  function CardPreview() {
    _classCallCheck(this, CardPreview);

    return _possibleConstructorReturn(this, (CardPreview.__proto__ || Object.getPrototypeOf(CardPreview)).apply(this, arguments));
  }

  _createClass(CardPreview, [{
    key: 'render',
    value: function render() {
      var child = _react2.default.Children.only(this.props.children);
      var _context = this.context,
          cardVariant = _context.cardVariant,
          onLoad = _context.onLoad,
          hasTitle = _context.hasTitle;


      var smartness = 0;
      if (cardVariant === 'quiet') {
        smartness = 1;
      }

      // Default image to decorative if there is already a title in the CardBody.
      // If the child already defines the decorative prop or alt prop, don't override it.
      var decorative = hasTitle;
      if (child.props.decorative != null || child.props.alt != null) {
        decorative = child.props.decorative;
      }

      return _react2.default.createElement(
        'div',
        { className: 'spectrum-Card-preview' },
        _react2.default.cloneElement(child, {
          smartness: smartness,
          onLoad: onLoad,
          decorative: decorative
        })
      );
    }
  }]);

  return CardPreview;
}(_react2.default.Component);

CardPreview.contextTypes = {
  cardVariant: _propTypes2.default.string,
  onLoad: _propTypes2.default.func,
  hasTitle: _propTypes2.default.bool
};
exports.default = CardPreview;