'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = LabelBase;

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _createId = require('../../utils/createId');

var _createId2 = _interopRequireDefault(_createId);

var _filterDOMProps = require('../../utils/filterDOMProps');

var _filterDOMProps2 = _interopRequireDefault(_filterDOMProps);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function LabelBase(_ref) {
  var label = _ref.label,
      children = _ref.children,
      className = _ref.className,
      labelClassName = _ref.labelClassName,
      wrapperClassName = _ref.wrapperClassName,
      labelFor = _ref.labelFor,
      componentName = _ref.componentName,
      icon = _ref.icon,
      otherProps = _objectWithoutProperties(_ref, ['label', 'children', 'className', 'labelClassName', 'wrapperClassName', 'labelFor', 'componentName', 'icon']);

  // There are 3 cases:
  // 1. No children - only render the <label>, no wrapping div. `labelFor` required.
  // 2. 1 child - render wrapping <div>. Automatically generate child `id` and label `for` attributes.
  // 3. > 1 children - render wrapping <div>. `labelFor` required, along with `id` on child.
  var childArray = _react2.default.Children.toArray(children);
  var id = void 0;
  var labelId = otherProps.id || (0, _createId2.default)();
  delete otherProps.id;

  if (childArray.length === 1) {
    // Use the existing id prop, or generate one.
    id = childArray[0].props.id || (0, _createId2.default)();
    var ariaLabelledby = childArray[0].props['aria-labelledby'] || (label ? labelId : null);
    childArray[0] = _react2.default.cloneElement(childArray[0], {
      id: id,
      labelId: labelId,
      'aria-labelledby': ariaLabelledby
    });
  }

  if (id && !labelFor) {
    labelFor = id;
  }

  if (!labelFor) {
    console.warn('Missing labelFor attribute on ' + componentName + ' with label "' + label + '"');
  }

  var fieldLabelClassName = (0, _classnames2.default)(labelClassName, childArray.length === 0 ? className : null);

  var fieldLabel = label ? _react2.default.createElement(
    'label',
    _extends({
      className: fieldLabelClassName,
      id: labelId,
      htmlFor: labelFor
    }, (0, _filterDOMProps2.default)(otherProps)),
    label,
    icon && ' ',
    icon && icon
  ) : _react2.default.createElement('div', _extends({
    className: fieldLabelClassName
  }, (0, _filterDOMProps2.default)(otherProps)));

  if (childArray.length > 0) {
    if (wrapperClassName) {
      childArray = _react2.default.createElement(
        'div',
        { className: wrapperClassName },
        childArray
      );
    }

    return _react2.default.createElement(
      'div',
      { className: className },
      fieldLabel,
      childArray
    );
  }

  return fieldLabel;
}