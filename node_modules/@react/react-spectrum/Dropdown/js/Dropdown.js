'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class;

var _autobindDecorator = require('autobind-decorator');

var _autobindDecorator2 = _interopRequireDefault(_autobindDecorator);

var _createId = require('../../utils/createId');

var _createId2 = _interopRequireDefault(_createId);

var _filterDOMProps = require('../../utils/filterDOMProps');

var _filterDOMProps2 = _interopRequireDefault(_filterDOMProps);

var _Menu = require('../../Menu');

var _OverlayTrigger = require('../../OverlayTrigger');

var _OverlayTrigger2 = _interopRequireDefault(_OverlayTrigger);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Dropdown = (0, _autobindDecorator2.default)(_class = function (_React$Component) {
  _inherits(Dropdown, _React$Component);

  function Dropdown(props) {
    _classCallCheck(this, Dropdown);

    var _this = _possibleConstructorReturn(this, (Dropdown.__proto__ || Object.getPrototypeOf(Dropdown)).call(this, props));

    _this.dropdownId = (0, _createId2.default)();
    _this.state = {
      open: false
    };
    return _this;
  }

  _createClass(Dropdown, [{
    key: 'onOpen',
    value: function onOpen(e) {
      this.setState({ open: true });
      if (this.props.onOpen) {
        this.props.onOpen(e);
      }
    }
  }, {
    key: 'onClose',
    value: function onClose(e) {
      this.setState({ open: false });
      if (e && e.type === 'keyup') {
        this.restoreFocusOnClose();
      }
      if (this.props.onClose) {
        this.props.onClose(e);
      }
    }
  }, {
    key: 'onMenuClose',
    value: function onMenuClose() {
      this.overlayTrigger.hide();
      this.restoreFocusOnClose();
    }
  }, {
    key: 'onSelect',
    value: function onSelect() {
      if (this.props.closeOnSelect) {
        this.onMenuClose();
      }
      if (this.props.onSelect) {
        var _props;

        (_props = this.props).onSelect.apply(_props, arguments);
      }
    }
  }, {
    key: 'restoreFocusOnClose',
    value: function restoreFocusOnClose() {
      var node = _reactDom2.default.findDOMNode(this.triggerRef);
      if (node && node.focus) {
        node.focus();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props2 = this.props,
          alignRight = _props2.alignRight,
          closeOnSelect = _props2.closeOnSelect,
          flip = _props2.flip,
          otherProps = _objectWithoutProperties(_props2, ['alignRight', 'closeOnSelect', 'flip']);

      var children = _react2.default.Children.toArray(this.props.children);
      var trigger = children.find(function (c) {
        return c.props.dropdownTrigger;
      }) || children[0];
      var menu = children.find(function (c) {
        return c.props.dropdownMenu || c.type === _Menu.Menu;
      });
      var menuId = menu.props.id || this.dropdownId + '-menu';
      delete otherProps.onOpen;
      delete otherProps.onClose;

      return _react2.default.createElement(
        'div',
        (0, _filterDOMProps2.default)(otherProps),
        children.map(function (child, index) {
          if (child === trigger) {
            return _react2.default.createElement(
              _OverlayTrigger2.default,
              {
                target: _this2,
                trigger: 'click',
                placement: alignRight ? 'bottom right' : 'bottom left',
                ref: function ref(t) {
                  return _this2.overlayTrigger = t;
                },
                onShow: _this2.onOpen,
                closeOnSelect: closeOnSelect,
                key: index,
                onHide: _this2.onClose,
                flip: flip,
                delayHide: 0 },
              _react2.default.cloneElement(trigger, {
                'aria-haspopup': trigger.props['aria-haspopup'] || 'true',
                'aria-controls': _this2.state.open ? menuId : null,
                ref: function ref(node) {
                  _this2.triggerRef = node;
                  var ref = trigger.ref;

                  if (typeof ref === 'function') {
                    ref(node);
                  }
                }
              }),
              _react2.default.cloneElement(menu, {
                id: menuId,
                onClose: _this2.onMenuClose,
                onSelect: _this2.onSelect,
                autoFocus: true
              })
            );
          } else if (child !== menu) {
            return child;
          }
        })
      );
    }
  }]);

  return Dropdown;
}(_react2.default.Component)) || _class;

Dropdown.propTypes = {
  /**
   * If true, dropdown will close on selection of an item
   */
  closeOnSelect: _propTypes2.default.bool,

  /**
   * Callback for when the dropdown is opened
   */
  onOpen: _propTypes2.default.func,

  /**
   * Callback for when the dropdown is closed
   */
  onClose: _propTypes2.default.func,

  /**
   * Callback for when an item is selected from the dropdown
   */
  onSelect: _propTypes2.default.func,

  /**
   * Aligns the dropdown to the right or left of the button opening the dropdown
   */
  alignRight: _propTypes2.default.bool,

  /**
   * Sets whether the overlay is flippable
   */
  flip: _propTypes2.default.bool
};
Dropdown.defaultProps = {
  closeOnSelect: true
};
exports.default = Dropdown;