'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _createId = require('../../utils/createId');

var _createId2 = _interopRequireDefault(_createId);

var _intl = require('../../utils/intl');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _Search = require('../../Search');

var _Search2 = _interopRequireDefault(_Search);

var _Select = require('../../Select');

var _Select2 = _interopRequireDefault(_Select);

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var intlMessages = {
  'en-US': _interopRequireDefault(require('./../intl/en-US.json')).default
};

if (process.env.SCALE_MEDIUM && process.env.SCALE_LARGE) {
  require('../../spectrum-css/searchwithin/index.css');

  require('../../spectrum-css/searchwithin/index-diff.css');
} else if (process.env.SCALE_LARGE) {
  require('../../spectrum-css/searchwithin/index-lg.css');
} else {
  require('../../spectrum-css/searchwithin/index.css');
}

require('../style/index.css');

var formatMessage = (0, _intl.messageFormatter)(intlMessages);

/**
 * A SearchWithin component displays a dropdown next to a search input, typically
 * used to select the scope of a search.
 */

var SearchWithin = function (_React$Component) {
  _inherits(SearchWithin, _React$Component);

  function SearchWithin(props) {
    _classCallCheck(this, SearchWithin);

    var _this = _possibleConstructorReturn(this, (SearchWithin.__proto__ || Object.getPrototypeOf(SearchWithin)).call(this, props));

    var scopeOptions = props.scopeOptions;

    // convert strings to <Select>'s expected label/value objects

    var newScopeOptions = scopeOptions.map(function (scope) {
      return typeof scope === 'string' ? { label: scope, value: scope } : scope;
    });

    _this.state = { scopeOptions: newScopeOptions };

    _this.outerId = (0, _createId2.default)();
    return _this;
  }

  _createClass(SearchWithin, [{
    key: 'getChildId',
    value: function getChildId(childName) {
      return this.outerId + '-' + childName;
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          scope = _props.scope,
          defaultScope = _props.defaultScope,
          value = _props.value,
          defaultValue = _props.defaultValue,
          onScopeChange = _props.onScopeChange,
          onValueChange = _props.onValueChange,
          onSubmit = _props.onSubmit,
          _props$disabled = _props.disabled,
          disabled = _props$disabled === undefined ? false : _props$disabled,
          _props$placeholder = _props.placeholder,
          placeholder = _props$placeholder === undefined ? '' : _props$placeholder,
          _props$id = _props.id,
          id = _props$id === undefined ? this.getChildId('search') : _props$id,
          _props$selectId = _props.selectId,
          selectId = _props$selectId === undefined ? this.getChildId('select') : _props$selectId,
          otherProps = _objectWithoutProperties(_props, ['scope', 'defaultScope', 'value', 'defaultValue', 'onScopeChange', 'onValueChange', 'onSubmit', 'disabled', 'placeholder', 'id', 'selectId']);

      var ariaLabel = !otherProps['aria-labelledby'] ? formatMessage('Search within') : null;

      if (otherProps['aria-label']) {
        ariaLabel = otherProps['aria-label'];
        delete otherProps['aria-label'];
      }

      var ariaLabelledby = this.outerId;

      if (otherProps['aria-labelledby']) {
        if (ariaLabel) {
          ariaLabelledby = otherProps['aria-labelledby'] + ' ' + this.outerId;
        } else {
          ariaLabelledby = otherProps['aria-labelledby'];
        }
        delete otherProps['aria-labelledby'];
      }

      var selectProps = {};

      if (scope) {
        selectProps.value = scope;
      } else {
        selectProps.defaultValue = defaultScope ? defaultScope : this.state.scopeOptions[0].value;
      }

      var select = _react2.default.createElement(_Select2.default, _extends({
        id: selectId,
        'aria-labelledby': ariaLabelledby,
        onChange: onScopeChange,
        options: this.state.scopeOptions,
        disabled: disabled,
        required: true,
        flexible: true
      }, selectProps));

      var searchProps = {};

      if (value) {
        searchProps.value = value;
      } else if (defaultValue) {
        searchProps.defaultValue = defaultValue;
      }

      var search = _react2.default.createElement(_Search2.default, _extends({
        id: id,
        'aria-labelledby': selectId,
        placeholder: placeholder,
        onChange: onValueChange,
        onSubmit: onSubmit,
        disabled: disabled,
        role: 'presentation'
      }, searchProps));

      return _react2.default.createElement(
        'div',
        { className: 'spectrum-SearchWithin react-spectrum-SearchWithin', 'aria-label': ariaLabel, 'aria-labelledby': ariaLabelledby, id: this.outerId, role: 'search' },
        select,
        search
      );
    }
  }]);

  return SearchWithin;
}(_react2.default.Component);

SearchWithin.propTypes = {
  /**
   * Scope options to be shown in the dropdown
   */
  scopeOptions: _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.shape({
    label: _propTypes2.default.string,
    value: _propTypes2.default.string
  })])).isRequired,

  /**
   * The currently selected scope value (controlled).
   */
  scope: _propTypes2.default.string,

  /**
   * The default selected scope value (uncontrolled).
   */
  defaultScope: _propTypes2.default.string,

  /**
   * The current value of the textfield (controlled).
   */
  value: _propTypes2.default.string,

  /**
   * The default value of the textfield (uncontrolled).
   */
  defaultValue: _propTypes2.default.string,

  /**
   * A placeholder for the textfield.
   */
  placeholder: _propTypes2.default.string,

  /**
   * Whether the field is disabled
   */
  disabled: _propTypes2.default.bool,

  /**
   * A callback for when the field is submitted
   */
  onSubmit: _propTypes2.default.func,

  /**
   * A callback for when the textfield changes.
   */
  onValueChange: _propTypes2.default.func,

  /**
   * A callback for when the scope changes
   */
  onScopeChange: _propTypes2.default.func
};
exports.default = SearchWithin;