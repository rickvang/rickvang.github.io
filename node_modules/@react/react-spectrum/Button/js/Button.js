'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class;

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _icon = require('../../utils/icon');

var _filterDOMProps = require('../../utils/filterDOMProps');

var _filterDOMProps2 = _interopRequireDefault(_filterDOMProps);

var _events = require('../../utils/events');

var _focusRing = require('../../utils/focusRing');

var _focusRing2 = _interopRequireDefault(_focusRing);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

require('../style/index.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

if (process.env.SCALE_MEDIUM && process.env.SCALE_LARGE) {
  require('../../spectrum-css/button/index.css');

  require('../../spectrum-css/button/index-diff.css');
} else if (process.env.SCALE_LARGE) {
  require('../../spectrum-css/button/index-lg.css');
} else {
  require('../../spectrum-css/button/index.css');
}

if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHT) require('../../spectrum-css/button/multiStops/light.css');
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARK) require('../../spectrum-css/button/multiStops/dark.css');
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHTEST) require('../../spectrum-css/button/multiStops/lightest.css');
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARKEST) require('../../spectrum-css/button/multiStops/darkest.css');


// For backward compatibility with coral
var VARIANTS = {
  quiet: {
    variant: 'primary',
    quiet: true
  },
  minimal: {
    variant: 'secondary',
    quiet: true
  },
  icon: {
    variant: 'action',
    quiet: true
  }
};

/**
 * A **button** represents an action a user can take. Buttons can be clicked or tapped to
 * perform an action or to navigate to another page. Buttons in Spectrum have several variations
 * for different uses and multiple levels of loudness for various attention-getting needs.
 */

var Button = (0, _focusRing2.default)(_class = function (_Component) {
  _inherits(Button, _Component);

  function Button() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Button);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Button.__proto__ || Object.getPrototypeOf(Button)).call.apply(_ref, [this].concat(args))), _this), _this.onClick = function (event) {
      for (var _len2 = arguments.length, rest = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        rest[_key2 - 1] = arguments[_key2];
      }

      // This is needed when `element` is an anchor or something similar.
      // When `element` is a button, we won't even get here if it's disabled and clicked.
      if (_this.props.disabled) {
        // If the element is an anchor with an href, we need to preventDefault() or the browser
        // will follow the link.
        event.preventDefault();
      } else if (_this.props.onClick) {
        var _this$props;

        (_this$props = _this.props).onClick.apply(_this$props, [event].concat(rest));
      }
    }, _this.onKeyDownSpace = function (event) {
      if (event.key === ' ' || event.key === 'Enter') {
        event.preventDefault();
        _this.buttonRef.click();
      }
    }, _this.setButtonRef = function (b) {
      return _this.buttonRef = b;
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Button, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      if (this.props.autoFocus) {
        // wait a frame to make sure the button in the DOM and focusable
        requestAnimationFrame(function () {
          return _this2.focus();
        });
      }
    }

    /**
     * Focus the button
     */

  }, {
    key: 'focus',
    value: function focus() {
      if (this.buttonRef && !this.props.disabled && this.buttonRef.focus) {
        this.buttonRef.focus();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          _props$element = _props.element,
          Element = _props$element === undefined ? 'button' : _props$element,
          label = _props.label,
          children = _props.children,
          _props$variant = _props.variant,
          variant = _props$variant === undefined ? 'secondary' : _props$variant,
          logic = _props.logic,
          quiet = _props.quiet,
          icon = _props.icon,
          selected = _props.selected,
          block = _props.block,
          className = _props.className,
          disabled = _props.disabled,
          invalid = _props.invalid,
          onMouseDown = _props.onMouseDown,
          onMouseUp = _props.onMouseUp,
          otherProps = _objectWithoutProperties(_props, ['element', 'label', 'children', 'variant', 'logic', 'quiet', 'icon', 'selected', 'block', 'className', 'disabled', 'invalid', 'onMouseDown', 'onMouseUp']);

      // Map variants for backwards compatibility


      if (VARIANTS[variant]) {
        var mappedVariant = VARIANTS[variant];
        var variantName = (mappedVariant.quiet ? 'quiet ' : '') + ('"' + mappedVariant.variant + '"');
        console.warn('The "' + variant + '" variant of Button is deprecated. Please use the ' + variantName + ' variant instead.');
        variant = mappedVariant.variant;
        quiet = mappedVariant.quiet;
      }

      // Some button variants were broken out into their own components, map them appropriately
      var baseButtonClass = 'spectrum-Button';
      if (variant === 'action' || variant === 'toggle') {
        baseButtonClass = 'spectrum-ActionButton';
        if (variant === 'toggle') {
          quiet = true;
        }
        variant = '';
      } else if (logic) {
        baseButtonClass = 'spectrum-LogicButton';
      } else if (variant === 'clear') {
        baseButtonClass = 'spectrum-ClearButton';
        variant = '';
      } else if (variant === 'field') {
        baseButtonClass = 'spectrum-FieldButton';
        variant = '';
      } else if (variant === 'tool') {
        baseButtonClass = 'spectrum-Tool';
        variant = '';
      }

      if (Element !== 'button') {
        otherProps.role = 'button';
        otherProps.tabIndex = disabled ? null : otherProps.tabIndex || 0;
        otherProps['aria-disabled'] = disabled || null;
        if (Element === 'a' && disabled && otherProps.href) {
          otherProps.href = null;
        }
        otherProps.onKeyDown = disabled ? null : this.onKeyDownSpace;
      }

      var labelContents = label || (typeof children === 'string' ? children : null);

      var ariaExpanded = null;
      if (otherProps['aria-expanded'] !== undefined) {
        ariaExpanded = otherProps['aria-expanded'];
      } else if (otherProps['aria-haspopup']) {
        ariaExpanded = selected || null;
      }

      var filteredProps = typeof Element === 'string' ? (0, _filterDOMProps2.default)(otherProps) : otherProps;

      return _react2.default.createElement(
        Element,
        _extends({}, filteredProps, {
          className: (0, _classnames2.default)(baseButtonClass, quiet ? baseButtonClass + '--quiet' : '', variant ? baseButtonClass + '--' + variant : '', {
            'is-selected': selected,
            'is-disabled': disabled,
            'is-invalid': invalid,
            'spectrum-Button--block': block
          }, className),
          disabled: disabled,
          'aria-invalid': invalid || null,
          'aria-expanded': ariaExpanded,
          onClick: this.onClick,
          onMouseDown: _events.focusAfterMouseEvent.bind(this, onMouseDown),
          onMouseUp: _events.focusAfterMouseEvent.bind(this, onMouseUp),
          ref: this.setButtonRef }),
        (0, _icon.cloneIcon)(icon, { size: 'S' }),
        labelContents && _react2.default.createElement(
          'span',
          { className: baseButtonClass + '-label' },
          labelContents
        ),
        typeof children !== 'string' && children
      );
    }
  }]);

  return Button;
}(_react.Component)) || _class;

Button.propTypes = {
  /**
   * The variant of button to display
   */
  variant: _propTypes2.default.oneOf(['cta', 'primary', 'secondary', 'warning', 'action', 'toggle', 'and', 'or', 'icon', 'quiet', 'minimal', 'dropdown', 'clear', 'field', 'tool', 'overBackground']),

  /**
   * Whether the button should render using a quiet variant
   */
  quiet: _propTypes2.default.bool,

  /**
   * Whether the button is a logic button variant
   */
  logic: _propTypes2.default.bool,

  /**
   * Whether the button is disabled
   */
  disabled: _propTypes2.default.bool,

  /**
   * Whether the button represents a selected state
   */
  selected: _propTypes2.default.bool,

  /**
   * Whether the button represents an invalid state
   */
  invalid: _propTypes2.default.bool,

  /**
   * An icon to render in the button.
   */
  icon: _propTypes2.default.element,

  /**
   * The label to display in the button
   */
  label: _propTypes2.default.string,

  /**
   * Whether the button is a block element
   */
  block: _propTypes2.default.bool,

  /**
   * The DOM element to use to render the button
   */
  element: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),

  /**
   * Whether the button should be auto focused on mount
   */
  autoFocus: _propTypes2.default.bool,

  /**
   * A click handler for the button
   */
  onClick: _propTypes2.default.func
};
Button.defaultProps = {
  autoFocus: false,
  block: false,
  disabled: false,
  element: 'button',
  invalid: false,
  label: '',
  logic: false,
  quiet: false,
  selected: false,
  variant: 'secondary'
};
exports.default = Button;