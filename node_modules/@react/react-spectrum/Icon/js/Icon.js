'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = Icon;

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

if (process.env.SCALE_MEDIUM && process.env.SCALE_LARGE) {
  require('../../spectrum-css/icon/index.css');

  require('../../spectrum-css/icon/index-diff.css');
} else if (process.env.SCALE_LARGE) {
  require('../../spectrum-css/icon/index-lg.css');
} else {
  require('../../spectrum-css/icon/index.css');
}

var SIZES = {
  XXS: 18,
  XS: 24,
  S: 18,
  M: 24,
  L: 18,
  XL: 24,
  XXL: 24
};

function Icon(_ref) {
  var icon = _ref.icon,
      _ref$size = _ref.size,
      size = _ref$size === undefined ? 'M' : _ref$size,
      className = _ref.className,
      children = _ref.children,
      alt = _ref.alt,
      otherProps = _objectWithoutProperties(_ref, ['icon', 'size', 'className', 'children', 'alt']);

  var sizeKey = SIZES[size];
  var svg = icon && icon[sizeKey] || icon || children;
  if (typeof svg === 'string') {
    throw new Error('String icon names are deprecated. Please import icons from react-spectrum/Icon/IconName and render as <IconName />.');
  }

  return _react2.default.cloneElement(svg, _extends({
    focusable: 'false',
    'aria-label': alt,
    'aria-hidden': alt ? null : 'true',
    role: 'img',
    className: (0, _classnames2.default)(svg.props.className, 'spectrum-Icon', _defineProperty({}, 'spectrum-Icon--size' + size, size), className)
  }, otherProps));
}

Icon.displayName = 'Icon';