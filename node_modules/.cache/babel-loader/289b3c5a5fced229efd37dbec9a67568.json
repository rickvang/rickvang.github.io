{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/rvang/Desktop/Spectrum/testapp/node_modules/@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _class;\n\nvar _autobindDecorator = require('autobind-decorator');\n\nvar _autobindDecorator2 = _interopRequireDefault(_autobindDecorator);\n\nvar _events = require('../../utils/events');\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _createId = require('../../utils/createId');\n\nvar _createId2 = _interopRequireDefault(_createId);\n\nvar _Menu = require('../../Menu');\n\nvar _Overlay = require('../../OverlayTrigger/js/Overlay');\n\nvar _Overlay2 = _interopRequireDefault(_Overlay);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _scrollToDOMNode = require('../../utils/scrollToDOMNode');\n\nvar _scrollToDOMNode2 = _interopRequireDefault(_scrollToDOMNode);\n\nrequire('../style/index.css');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var gen = fn.apply(this, arguments);\n    return new Promise(function (resolve, reject) {\n      function step(key, arg) {\n        try {\n          var info = gen[key](arg);\n          var value = info.value;\n        } catch (error) {\n          reject(error);\n          return;\n        }\n\n        if (info.done) {\n          resolve(value);\n        } else {\n          return Promise.resolve(value).then(function (value) {\n            step(\"next\", value);\n          }, function (err) {\n            step(\"throw\", err);\n          });\n        }\n      }\n\n      return step(\"next\");\n    });\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar getLabel = function getLabel(o) {\n  return typeof o === 'string' ? o : o.label;\n};\n\nvar LISTBOX = '-listbox';\nvar OPTION = '-option-';\n\nvar Autocomplete = (0, _autobindDecorator2.default)(_class = function (_React$Component) {\n  _inherits(Autocomplete, _React$Component);\n\n  function Autocomplete(props) {\n    _classCallCheck(this, Autocomplete);\n\n    var _this = _possibleConstructorReturn(this, (Autocomplete.__proto__ || Object.getPrototypeOf(Autocomplete)).call(this, props));\n\n    _this.state = {\n      value: '',\n      showDropdown: false,\n      results: [],\n      selectedIndex: -1,\n      isFocused: false\n    };\n    _this.autocompleteId = (0, _createId2.default)();\n    return _this;\n  }\n\n  _createClass(Autocomplete, [{\n    key: 'componentWillMount',\n    value: function componentWillMount() {\n      this.componentWillReceiveProps(this.props);\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(props) {\n      if (props.value != null && props.value !== this.state.value) {\n        this.setValue(props.value);\n      }\n    }\n  }, {\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.updateSize();\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate() {\n      this.updateSize();\n    }\n  }, {\n    key: 'updateSize',\n    value: function updateSize() {\n      if (this.wrapper) {\n        var width = this.wrapper.offsetWidth;\n\n        if (width !== this.state.width) {\n          this.setState({\n            width: width\n          });\n        }\n      }\n    }\n  }, {\n    key: 'onChange',\n    value: function onChange(value) {\n      var onChange = this.props.onChange;\n\n      if (onChange) {\n        onChange(value);\n      }\n\n      if (this.props.value == null) {\n        this.setValue(value);\n      }\n    }\n  }, {\n    key: 'setValue',\n    value: function setValue(value) {\n      this.setState({\n        value: value,\n        showDropdown: this.state.isFocused,\n        selectedIndex: this.props.allowCreate && this.state.selectedIndex === -1 ? -1 : 0\n      });\n      this.getCompletions(value);\n    }\n  }, {\n    key: 'getCompletions',\n    value: function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(value) {\n        var _this2 = this;\n\n        var results, getCompletions;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.optionIdPrefix = this.optionIdPrefix || this.autocompleteId + LISTBOX;\n                this._value = value;\n                results = [];\n                getCompletions = this.props.getCompletions;\n\n                if (!getCompletions) {\n                  _context.next = 8;\n                  break;\n                }\n\n                _context.next = 7;\n                return getCompletions(value);\n\n              case 7:\n                results = _context.sent;\n\n              case 8:\n                if (!(this._value === value)) {\n                  _context.next = 11;\n                  break;\n                }\n\n                this.setState({\n                  results: results\n                }, function () {\n                  var list = _reactDom2.default.findDOMNode(_this2.getListRef());\n\n                  if (list) {\n                    list.scrollTop = 0;\n                  }\n                });\n                return _context.abrupt('return', results);\n\n              case 11:\n                return _context.abrupt('return', this.state.results);\n\n              case 12:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getCompletions(_x) {\n        return _ref.apply(this, arguments);\n      }\n\n      return getCompletions;\n    }()\n  }, {\n    key: 'onSelect',\n    value: function onSelect(value, event) {\n      this.onChange(typeof value === 'string' ? value : value.label);\n      this.hideMenu();\n\n      if (this.props.onSelect) {\n        this.props.onSelect(value, event);\n      }\n    }\n  }, {\n    key: 'onFocus',\n    value: function onFocus() {\n      this.setState({\n        isFocused: true\n      });\n    }\n  }, {\n    key: 'onBlur',\n    value: function onBlur(event) {\n      if (this.wrapper && this.wrapper.contains(event.relatedTarget)) {\n        // If the element receiving focus is a child of the Autocomplete,\n        // for example the toggle button on a ComboBox,\n        // do nothing in order prevent hideMenu from executing twice.\n        return;\n      }\n\n      this.hideMenu();\n      this.setState({\n        isFocused: false\n      });\n    }\n  }, {\n    key: 'onEscape',\n    value: function onEscape(event) {\n      event.preventDefault();\n      this.hideMenu();\n    }\n  }, {\n    key: 'onSelectFocused',\n    value: function onSelectFocused(event) {\n      // Autocomplete should accept space key as text entry\n      if (event.key === ' ') {\n        return;\n      }\n\n      var _state = this.state,\n          _state$results = _state.results,\n          results = _state$results === undefined ? [] : _state$results,\n          selectedIndex = _state.selectedIndex;\n      var value = results[selectedIndex];\n\n      if (value) {\n        event.preventDefault();\n        this.onSelect(value, event);\n      } else if (this.props.allowCreate) {\n        if (event.key !== 'Tab') {\n          event.preventDefault();\n        }\n\n        this.onSelect(this.state.value, event);\n      }\n    }\n  }, {\n    key: 'onFocusFirst',\n    value: function onFocusFirst(event) {\n      event.preventDefault();\n      this.selectIndex(0);\n    }\n  }, {\n    key: 'onFocusLast',\n    value: function onFocusLast(event) {\n      event.preventDefault();\n      this.selectIndex(this.state.results.length - 1);\n    }\n  }, {\n    key: 'onFocusPrevious',\n    value: function onFocusPrevious(event) {\n      event.preventDefault();\n      var _state2 = this.state,\n          _state2$results = _state2.results,\n          results = _state2$results === undefined ? [] : _state2$results,\n          selectedIndex = _state2.selectedIndex;\n      var index = selectedIndex - 1;\n\n      if (index < 0) {\n        index = results.length - 1;\n      }\n\n      this.selectIndex(index);\n    }\n  }, {\n    key: 'onFocusNext',\n    value: function onFocusNext(event) {\n      event.preventDefault(); // make sure menu is shown\n\n      if (!this.state.showDropdown) {\n        this.showMenu();\n      }\n\n      var _state3 = this.state,\n          _state3$results = _state3.results,\n          results = _state3$results === undefined ? [] : _state3$results,\n          selectedIndex = _state3.selectedIndex;\n      var index = results.length ? (selectedIndex + 1) % results.length : 0;\n      this.selectIndex(index);\n    }\n  }, {\n    key: 'onPageDown',\n    value: function onPageDown(event) {\n      event.preventDefault();\n      var _state4 = this.state,\n          _state4$results = _state4.results,\n          results = _state4$results === undefined ? [] : _state4$results,\n          selectedIndex = _state4.selectedIndex,\n          showDropdown = _state4.showDropdown;\n      var len = results.length;\n\n      if (!showDropdown || !len) {\n        return;\n      }\n\n      var listNode = _reactDom2.default.findDOMNode(this.getListRef());\n\n      var items = [].concat(_toConsumableArray(listNode.children));\n      var targetItem = items[selectedIndex === -1 ? 0 : selectedIndex];\n      var nextPage = Math.min(targetItem.offsetTop + listNode.clientHeight, listNode.scrollHeight + listNode.clientHeight);\n      var index = items.indexOf(targetItem) + 1;\n      var item = items.slice(index).find(function (item) {\n        return item.offsetTop + item.offsetHeight > nextPage;\n      });\n\n      if (item) {\n        this.selectIndex(items.indexOf(item), true);\n      } else {\n        this.onFocusLast(event);\n      }\n    }\n  }, {\n    key: 'onPageUp',\n    value: function onPageUp(event) {\n      event.preventDefault();\n      var _state5 = this.state,\n          _state5$results = _state5.results,\n          results = _state5$results === undefined ? [] : _state5$results,\n          selectedIndex = _state5.selectedIndex,\n          showDropdown = _state5.showDropdown;\n      var len = results.length;\n\n      if (!showDropdown || !len) {\n        return;\n      }\n\n      var listNode = _reactDom2.default.findDOMNode(this.getListRef());\n\n      var items = [].concat(_toConsumableArray(listNode.children));\n      var targetItem = items[selectedIndex === -1 ? 0 : selectedIndex];\n      var nextPage = Math.max(targetItem.offsetTop + targetItem.offsetHeight - listNode.clientHeight, 0);\n      var index = items.indexOf(targetItem);\n      var item = items.slice(0, index).reverse().find(function (item) {\n        return item.offsetTop < nextPage;\n      });\n\n      if (item) {\n        this.selectIndex(items.indexOf(item));\n      } else {\n        this.onFocusFirst(event);\n      }\n    }\n  }, {\n    key: 'onMouseEnter',\n    value: function onMouseEnter(index) {\n      this.selectIndex(index);\n    }\n  }, {\n    key: 'onAltArrowDown',\n    value: function onAltArrowDown(event) {\n      event.preventDefault();\n\n      if (!this.state.showDropdown) {\n        this.showMenu();\n      }\n    }\n  }, {\n    key: 'onAltArrowUp',\n    value: function onAltArrowUp(event) {\n      event.preventDefault();\n\n      if (this.state.showDropdown) {\n        this.hideMenu();\n      }\n    }\n  }, {\n    key: 'onTab',\n    value: function onTab(event) {\n      this.onSelectFocused(event);\n    }\n  }, {\n    key: 'selectIndex',\n    value: function selectIndex(selectedIndex, alignToStart) {\n      var _this3 = this;\n\n      this.setState({\n        selectedIndex: selectedIndex\n      }, function () {\n        if (_this3.menu && !isNaN(selectedIndex) && selectedIndex !== -1) {\n          // make sure that the selected item scrolls into view\n          var list = _reactDom2.default.findDOMNode(_this3.getListRef());\n\n          if (list) {\n            var node = list.children[selectedIndex];\n\n            if (node) {\n              (0, _scrollToDOMNode2.default)(node, list, alignToStart);\n            }\n          }\n        }\n      });\n    }\n  }, {\n    key: 'toggleMenu',\n    value: function toggleMenu() {\n      if (this.state.showDropdown) {\n        this.hideMenu();\n      } else {\n        this.showMenu();\n      }\n    }\n  }, {\n    key: 'showMenu',\n    value: function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var _this4 = this;\n\n        var results, selectedIndex;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.setState({\n                  showDropdown: true,\n                  selectedIndex: -1\n                });\n                _context2.next = 3;\n                return this.getCompletions(this.state.value);\n\n              case 3:\n                _context2.t0 = _context2.sent;\n\n                if (_context2.t0) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                _context2.t0 = [];\n\n              case 6:\n                results = _context2.t0; // Reset the selected index based on the value\n\n                selectedIndex = results.findIndex(function (result) {\n                  return getLabel(result) === _this4.state.value;\n                });\n\n                if (selectedIndex !== -1) {\n                  this.setState({\n                    selectedIndex: selectedIndex\n                  });\n                }\n\n                if (this.props.onMenuShow) {\n                  this.props.onMenuShow();\n                }\n\n              case 10:\n              case 'end':\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function showMenu() {\n        return _ref2.apply(this, arguments);\n      }\n\n      return showMenu;\n    }()\n  }, {\n    key: 'hideMenu',\n    value: function hideMenu() {\n      this.setState({\n        showDropdown: false,\n        selectedIndex: -1\n      });\n\n      if (this.props.onMenuHide) {\n        this.props.onMenuHide();\n      }\n    }\n  }, {\n    key: 'getActiveDescendantId',\n    value: function getActiveDescendantId() {\n      var _state6 = this.state,\n          selectedIndex = _state6.selectedIndex,\n          showDropdown = _state6.showDropdown,\n          _state6$results = _state6.results,\n          results = _state6$results === undefined ? [] : _state6$results;\n      return showDropdown && results.length > 0 && selectedIndex !== -1 ? this.optionIdPrefix + OPTION + selectedIndex : undefined;\n    }\n  }, {\n    key: 'getListboxId',\n    value: function getListboxId() {\n      var _state7 = this.state,\n          showDropdown = _state7.showDropdown,\n          _state7$results = _state7.results,\n          results = _state7$results === undefined ? [] : _state7$results;\n      return showDropdown && results.length > 0 ? this.autocompleteId + LISTBOX : undefined;\n    }\n  }, {\n    key: 'getListRef',\n    value: function getListRef() {\n      return this.menu && this.menu.getListRef();\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this5 = this;\n\n      var _props = this.props,\n          id = _props.id,\n          className = _props.className;\n      var _state8 = this.state,\n          isFocused = _state8.isFocused,\n          _state8$results = _state8.results,\n          results = _state8$results === undefined ? [] : _state8$results,\n          selectedIndex = _state8.selectedIndex,\n          showDropdown = _state8.showDropdown,\n          value = _state8.value;\n\n      var children = _react2.default.Children.toArray(this.props.children);\n\n      var trigger = children.find(function (c) {\n        return c.props.autocompleteInput;\n      }) || children[0];\n      var menuShown = showDropdown && results.length > 0;\n      var inputId = id || trigger.props.id || this.autocompleteId;\n      return _react2.default.createElement('div', {\n        className: (0, _classnames2.default)('react-spectrum-Autocomplete', {\n          'is-focused': isFocused\n        }, className),\n        ref: function ref(w) {\n          return _this5.wrapper = w;\n        },\n        role: 'combobox',\n        'aria-controls': this.getListboxId(),\n        'aria-expanded': menuShown,\n        'aria-haspopup': 'true',\n        'aria-owns': this.getListboxId()\n      }, children.map(function (child) {\n        if (child === trigger) {\n          return _react2.default.cloneElement(child, {\n            value: value,\n            onChange: (0, _events.chain)(child.props.onChange, _this5.onChange),\n            onKeyDown: (0, _events.chain)(child.props.onKeyDown, _events.interpretKeyboardEvent.bind(_this5)),\n            onFocus: (0, _events.chain)(child.props.onFocus, _this5.onFocus),\n            onBlur: (0, _events.chain)(child.props.onBlur, _this5.onBlur),\n            id: inputId,\n            autoComplete: 'off',\n            role: 'textbox',\n            'aria-activedescendant': _this5.getActiveDescendantId(),\n            'aria-autocomplete': 'list',\n            'aria-controls': _this5.getListboxId()\n          });\n        }\n\n        return child;\n      }), _react2.default.createElement(_Overlay2.default, {\n        target: this.wrapper,\n        show: menuShown,\n        placement: 'bottom left',\n        role: 'presentation'\n      }, _react2.default.createElement(_Menu.Menu, {\n        onSelect: this.onSelect,\n        onMouseDown: function onMouseDown(e) {\n          return e.preventDefault();\n        },\n        style: {\n          width: this.state.width + 'px'\n        },\n        role: 'listbox',\n        ref: function ref(m) {\n          return _this5.menu = m;\n        },\n        id: this.getListboxId()\n      }, results.map(function (result, i) {\n        var label = getLabel(result);\n        return _react2.default.createElement(_Menu.MenuItem, {\n          role: 'option',\n          id: _this5.optionIdPrefix + OPTION + i,\n          tabIndex: selectedIndex === i ? 0 : -1,\n          key: 'item-' + i,\n          value: result,\n          icon: result.icon,\n          focused: selectedIndex === i,\n          selected: label === value,\n          onMouseEnter: _this5.onMouseEnter.bind(_this5, i),\n          onMouseDown: function onMouseDown(e) {\n            return e.preventDefault();\n          }\n        }, label);\n      }))));\n    }\n  }]);\n\n  return Autocomplete;\n}(_react2.default.Component)) || _class;\n\nAutocomplete.propTypes = {\n  /**\n   * Allows input that isn't part of the list of options\n   */\n  allowCreate: _propTypes2.default.bool,\n\n  /**\n   * Value of the input\n   */\n  value: _propTypes2.default.string,\n\n  /**\n   * Callback for when value changes due to selection\n   */\n  onSelect: _propTypes2.default.func,\n\n  /**\n   * String for extra class names to add to the top level div\n   */\n  className: _propTypes2.default.string,\n\n  /**\n   * String that will override the default id generated by the instance\n   */\n  id: _propTypes2.default.string,\n\n  /**\n   * Callback for when the menu opens\n   */\n  onMenuShow: _propTypes2.default.func,\n\n  /**\n   * Callback for when the menu closes\n   */\n  onMenuHide: _propTypes2.default.func\n};\nAutocomplete.defaultProps = {\n  allowCreate: false\n};\nexports.default = Autocomplete;","map":null,"metadata":{},"sourceType":"script"}