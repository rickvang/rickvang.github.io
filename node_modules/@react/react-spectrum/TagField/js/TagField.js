'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class;

var _autobindDecorator = require('autobind-decorator');

var _autobindDecorator2 = _interopRequireDefault(_autobindDecorator);

var _Autocomplete = require('../../Autocomplete');

var _Autocomplete2 = _interopRequireDefault(_Autocomplete);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _TagList = require('../../TagList');

var _Textfield = require('../../Textfield');

var _Textfield2 = _interopRequireDefault(_Textfield);

require('../style/index.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TagField = (0, _autobindDecorator2.default)(_class = function (_React$Component) {
  _inherits(TagField, _React$Component);

  function TagField() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, TagField);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = TagField.__proto__ || Object.getPrototypeOf(TagField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      value: '',
      tags: _this.props.value || []
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(TagField, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(props) {
      var _this2 = this;

      if (props.value && props.value !== this.state.value) {
        var deleting = props.value.length < this.state.tags.length;
        var hadFocus = this.taglist && _reactDom2.default.findDOMNode(this).contains(document.activeElement);
        this.setState({ tags: props.value }, function () {
          return hadFocus && _this2.focus(deleting);
        });
      }
    }
  }, {
    key: 'onTextfieldChange',
    value: function onTextfieldChange(value) {
      this.setState({ value: value });
    }
  }, {
    key: 'onSelect',
    value: function onSelect(value) {
      value = value.label || value;
      if (!value || !this.props.allowDuplicates && this.state.tags.includes(value)) {
        return;
      }

      this.setState({ value: '' });

      var tags = [].concat(_toConsumableArray(this.state.tags), [value]);
      this.onChange(tags);
    }
  }, {
    key: 'onRemove',
    value: function onRemove(value) {
      var tags = this.state.tags.filter(function (t) {
        return t !== value;
      });
      this.onChange(tags);
    }
  }, {
    key: 'focus',
    value: function focus(deleting) {
      if (this.taglist) {
        var dom = _reactDom2.default.findDOMNode(this.taglist);
        if (!dom.contains(document.activeElement)) {
          var nodes = dom.querySelectorAll('[role=row]');
          if (nodes.length && deleting) {
            nodes[nodes.length - 1].focus();
          } else {
            this.textfield.focus();
          }
        }
      }
    }
  }, {
    key: 'onChange',
    value: function onChange(tags) {
      var _this3 = this;

      if (this.props.value == null) {
        var deleting = tags.length < this.state.tags.length;
        this.setState({ tags: tags }, function () {
          return _this3.focus(deleting);
        });
      }
      if (this.props.onChange) {
        this.props.onChange(tags);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this4 = this;

      var _props = this.props,
          getCompletions = _props.getCompletions,
          allowCreate = _props.allowCreate,
          disabled = _props.disabled,
          invalid = _props.invalid,
          quiet = _props.quiet,
          className = _props.className,
          props = _objectWithoutProperties(_props, ['getCompletions', 'allowCreate', 'disabled', 'invalid', 'quiet', 'className']);

      var _state = this.state,
          value = _state.value,
          tags = _state.tags;


      delete props.onChange;

      return _react2.default.createElement(
        _Autocomplete2.default,
        {
          className: (0, _classnames2.default)('react-spectrum-TagField', 'spectrum-Textfield', {
            'spectrum-Textfield--quiet': quiet,
            'react-spectrum-TagField--quiet': quiet,
            'is-disabled': disabled,
            'is-invalid': invalid
          }, className),
          getCompletions: getCompletions,
          allowCreate: allowCreate,
          onSelect: this.onSelect,
          value: value,
          onChange: this.onTextfieldChange },
        _react2.default.createElement(_TagList.TagList, {
          ref: function ref(tl) {
            return _this4.taglist = tl;
          },
          disabled: disabled,
          onClose: this.onRemove,
          values: tags.map(function (tag) {
            return tag.label || tag;
          }),
          'aria-labelledby': this.props['aria-labelledby'],
          'aria-label': this.props['aria-label'] }),
        _react2.default.createElement(_Textfield2.default, _extends({
          ref: function ref(tf) {
            return _this4.textfield = tf;
          },
          className: 'react-spectrum-TagField-input',
          autocompleteInput: true,
          disabled: disabled
        }, props))
      );
    }
  }]);

  return TagField;
}(_react2.default.Component)) || _class;

TagField.propTypes = {
  /** Allow tag creation in tag field */
  allowCreate: _propTypes2.default.bool,

  /** Class to add to the tag field */
  className: _propTypes2.default.string,

  /** Whether the tag field is disabled */
  disabled: _propTypes2.default.bool,

  /** Function to retrieve autocomplete options */
  getCompletions: _propTypes2.default.func,

  /** Whether to disable the invalid icon and styling */
  invalid: _propTypes2.default.bool,

  /** Whether to use the quiet styling for the tag field */
  quiet: _propTypes2.default.bool
};
TagField.defaultProps = {
  allowCreate: true
};
exports.default = TagField;