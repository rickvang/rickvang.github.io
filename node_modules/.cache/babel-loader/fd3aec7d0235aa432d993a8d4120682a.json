{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _DOMView2 = require('../src/dom/DOMView');\n\nvar _DOMView3 = _interopRequireDefault(_DOMView2);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar ReactView = function (_DOMView) {\n  _inherits(ReactView, _DOMView);\n\n  function ReactView(view) {\n    _classCallCheck(this, ReactView);\n\n    var _this = _possibleConstructorReturn(this, (ReactView.__proto__ || Object.getPrototypeOf(ReactView)).call(this, view));\n\n    _this.component = null;\n    return _this;\n  }\n\n  _createClass(ReactView, [{\n    key: 'getRenderContext',\n    value: function getRenderContext() {\n      return this;\n    }\n  }, {\n    key: 'getEventHandlers',\n    value: function getEventHandlers() {\n      var events = {};\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        var _loop = function _loop() {\n          var _step$value = _slicedToArray(_step.value, 2),\n              event = _step$value[0],\n              handlers = _step$value[1];\n\n          var key = 'on' + event[0].toUpperCase() + event.slice(1);\n\n          events[key] = function (event) {\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n\n            try {\n              for (var _iterator2 = handlers[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                var handler = _step2.value;\n                handler(event);\n              }\n            } catch (err) {\n              _didIteratorError2 = true;\n              _iteratorError2 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                  _iterator2.return();\n                }\n              } finally {\n                if (_didIteratorError2) {\n                  throw _iteratorError2;\n                }\n              }\n            }\n          };\n        };\n\n        for (var _iterator = this.view.events[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          _loop();\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return events;\n    }\n  }, {\n    key: 'flushUpdates',\n    value: function flushUpdates(fn) {\n      if (this.component) {\n        this.component.forceUpdate(fn);\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render(backend) {\n      return _react2.default.createElement(View, {\n        reactView: this,\n        backend: backend\n      });\n    }\n  }, {\n    key: 'getDOMNode',\n    value: function getDOMNode() {\n      if (this.component) {\n        return _reactDom2.default.findDOMNode(this.component);\n      }\n\n      var container = document.createElement('div');\n\n      _reactDom2.default.render(this.render(), container);\n\n      var res = container.firstChild;\n\n      _reactDom2.default.unmountComponentAtNode(container);\n\n      return res;\n    }\n  }]);\n\n  return ReactView;\n}(_DOMView3.default);\n\nexports.default = ReactView;\n\nvar View = function (_React$Component) {\n  _inherits(View, _React$Component);\n\n  function View() {\n    _classCallCheck(this, View);\n\n    return _possibleConstructorReturn(this, (View.__proto__ || Object.getPrototypeOf(View)).apply(this, arguments));\n  }\n\n  _createClass(View, [{\n    key: 'shouldComponentUpdate',\n    value: function shouldComponentUpdate(props) {\n      return props.reactView.view.dirty;\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this3 = this;\n\n      var reactView = this.props.reactView;\n      var view = reactView.view;\n\n      var res = _react2.default.createElement('div', _extends({}, view.attrs, reactView.getEventHandlers(), {\n        style: view.style,\n        className: view.getClassName()\n      }), Array.from(view.children).map(function (child, index) {\n        return _react2.default.cloneElement(child.renderBackendView ? child.renderBackendView(_this3.props.backend) : child, {\n          key: child.key || index\n        });\n      }));\n\n      view.dirty = false;\n      return res;\n    }\n  }, {\n    key: 'componentWillMount',\n    value: function componentWillMount() {\n      this.props.reactView.component = this;\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.props.reactView.component = null;\n    }\n  }]);\n\n  return View;\n}(_react2.default.Component);","map":null,"metadata":{},"sourceType":"script"}