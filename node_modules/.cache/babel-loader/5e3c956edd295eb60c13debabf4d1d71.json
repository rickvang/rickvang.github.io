{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar children = {};\n/*\n * A global portal that lives in the document body which can be used to add\n * overlays like modals outside the normal React component tree.\n */\n\nvar PortalContainer = function () {\n  function PortalContainer() {\n    _classCallCheck(this, PortalContainer);\n  }\n\n  _createClass(PortalContainer, null, [{\n    key: 'add',\n\n    /**\n     * Renders the child\n     * @param child component to be render\n     * @param context Parent with the context\n     */\n    value: function add(child, context) {\n      var node = children[child.key] || document.createElement('div');\n\n      if (!context) {\n        _reactDom2.default.render(child, node);\n      } else {\n        _reactDom2.default.unstable_renderSubtreeIntoContainer(context, child, node);\n      }\n\n      children[child.key] = node;\n    }\n    /**\n     * Remove child from the dom\n     * @param child\n     */\n\n  }, {\n    key: 'remove',\n    value: function remove(child) {\n      _reactDom2.default.unmountComponentAtNode(children[child.key]);\n\n      delete children[child.key];\n    }\n  }]);\n\n  return PortalContainer;\n}();\n\nexports.default = PortalContainer;","map":null,"metadata":{},"sourceType":"script"}