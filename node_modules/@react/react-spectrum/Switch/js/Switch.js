'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = Switch;

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _SwitchBase = require('./SwitchBase');

var _SwitchBase2 = _interopRequireDefault(_SwitchBase);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

if (process.env.SCALE_MEDIUM && process.env.SCALE_LARGE) {
  require('../../spectrum-css/toggle/index.css');

  require('../../spectrum-css/toggle/index-diff.css');
} else if (process.env.SCALE_LARGE) {
  require('../../spectrum-css/toggle/index-lg.css');
} else {
  require('../../spectrum-css/toggle/index.css');
}

if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHT) require('../../spectrum-css/toggle/multiStops/light.css');
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARK) require('../../spectrum-css/toggle/multiStops/dark.css');
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHTEST) require('../../spectrum-css/toggle/multiStops/lightest.css');
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARKEST) require('../../spectrum-css/toggle/multiStops/darkest.css');
function Switch(_ref) {
  var _classNames;

  var variant = _ref.variant,
      quiet = _ref.quiet,
      className = _ref.className,
      otherProps = _objectWithoutProperties(_ref, ['variant', 'quiet', 'className']);

  return _react2.default.createElement(_SwitchBase2.default, _extends({
    inputType: 'checkbox',
    className: (0, _classnames2.default)('spectrum-ToggleSwitch', (_classNames = {}, _defineProperty(_classNames, 'spectrum-ToggleSwitch--' + variant, variant), _defineProperty(_classNames, 'spectrum-ToggleSwitch--quiet', quiet), _classNames), className),
    inputClassName: 'spectrum-ToggleSwitch-input',
    markClassName: 'spectrum-ToggleSwitch-switch',
    labelClassName: 'spectrum-ToggleSwitch-label',
    role: 'switch'
  }, otherProps));
}

Switch.displayName = 'Switch';
Switch.propTypes = {
  /**
  * Class given to switch
  */
  className: _propTypes2.default.string,

  /**
  * Whether the switch is checked or not (controlled state)
  */
  checked: _propTypes2.default.bool,

  /**
  * Whether the switch should be checked (uncontrolled state)
  */
  defaultChecked: _propTypes2.default.bool,

  /** Text to add to switch. Can be Text of HTML */
  label: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]),

  /**
  * Function called when switch is changed
  */
  onChange: _propTypes2.default.func,

  /**
  * Whether switch is a quiet variation
  */
  quiet: _propTypes2.default.bool,

  /**
  * Change switch to A/B variant rather an on/off
  */
  variant: _propTypes2.default.oneOf(['ab'])

};