{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _get = function get(object, property, receiver) {\n  if (object === null) object = Function.prototype;\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n\n  if (desc === undefined) {\n    var parent = Object.getPrototypeOf(object);\n\n    if (parent === null) {\n      return undefined;\n    } else {\n      return get(parent, property, receiver);\n    }\n  } else if (\"value\" in desc) {\n    return desc.value;\n  } else {\n    var getter = desc.get;\n\n    if (getter === undefined) {\n      return undefined;\n    }\n\n    return getter.call(receiver);\n  }\n};\n\nvar _IndexPathSet2 = require('./IndexPathSet.js');\n\nvar _IndexPathSet3 = _interopRequireDefault(_IndexPathSet2);\n\nvar _Range = require('./Range');\n\nvar _Range2 = _interopRequireDefault(_Range);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/**\n * This class models the selection behavior for a collection view.\n * It extends IndexPathSet which implements the data structure for\n * storing the set of selected items, and implements the mouse/keyboard\n * interaction behavior.\n * @private\n */\n\n\nvar Selection = function (_IndexPathSet) {\n  _inherits(Selection, _IndexPathSet);\n  /**\n   * Creates a new Selection\n   * @param {CollectionData} content the content of the CollectionView\n   */\n\n\n  function Selection(content) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Selection);\n\n    var _this = _possibleConstructorReturn(this, (Selection.__proto__ || Object.getPrototypeOf(Selection)).call(this));\n\n    _this.content = content;\n    _this.anchor = null;\n    _this.current = null;\n    _this.allowsMultipleSelection = options.allowsMultipleSelection !== false;\n    _this.allowsEmptySelection = options.allowsEmptySelection !== false;\n\n    _this._emptyCheck();\n\n    return _this;\n  }\n\n  _createClass(Selection, [{\n    key: '_emptyCheck',\n    value: function _emptyCheck() {\n      var firstIndexPath = void 0;\n\n      if (!this.allowsEmptySelection && this.isEmpty && (firstIndexPath = this.content.firstIndexPath)) {\n        this.replaceWith(firstIndexPath);\n      }\n    }\n    /**\n     * Toggles the given IndexPath in the selection\n     * @param {IndexPath} indexPath the IndexPath to toggle\n     */\n\n  }, {\n    key: 'toggleIndexPath',\n    value: function toggleIndexPath(indexPath) {\n      if (!this.allowsMultipleSelection && !(this.allowsEmptySelection && this.contains(indexPath))) {\n        _get(Selection.prototype.__proto__ || Object.getPrototypeOf(Selection.prototype), 'clear', this).call(this);\n      }\n\n      if (!this.allowsEmptySelection && this.length === 1 && this.contains(indexPath)) {\n        return;\n      }\n\n      _get(Selection.prototype.__proto__ || Object.getPrototypeOf(Selection.prototype), 'toggleIndexPath', this).call(this, indexPath); // If we the item is now selected, make it the new anchor, otherwise\n      // use the last selected item.\n\n\n      var last = this.contains(indexPath) ? indexPath : this.lastIndexPath;\n      this.anchor = last && last.copy();\n      this.current = last && last.copy();\n    }\n  }, {\n    key: '_makeRange',\n    value: function _makeRange(a, b) {\n      var min = a.min(b);\n      var max = a.max(b);\n      return [min, max];\n    }\n  }, {\n    key: '_addRange',\n    value: function _addRange(start, end) {\n      for (var section = start.section; section <= end.section; section++) {\n        var endIndex = section === end.section ? end.index : this.content.getSectionLength(section) - 1;\n        var index = section === start.section ? start.index : 0;\n        this.addRangeInSection(section, new _Range2.default(index, endIndex));\n      }\n    }\n  }, {\n    key: '_removeRange',\n    value: function _removeRange(start, end) {\n      for (var section = start.section; section <= end.section; section++) {\n        var endIndex = section === end.section ? end.index : this.content.getSectionLength(section) - 1;\n        var index = section === start.section ? start.index : 0;\n        this.removeRangeInSection(section, new _Range2.default(index, endIndex));\n      }\n    }\n    /**\n     * Extends the selection to the given index path\n     * @param {IndexPath} indexPath the IndexPath to extend the selection to\n     */\n\n  }, {\n    key: 'extendTo',\n    value: function extendTo(indexPath) {\n      if (!this.allowsMultipleSelection) {\n        return this.replaceWith(indexPath);\n      }\n\n      if (!this.anchor) {\n        this.anchor = indexPath.copy();\n      }\n\n      this._removeRange.apply(this, _toConsumableArray(this._makeRange(this.anchor, this.current || indexPath)));\n\n      this._addRange.apply(this, _toConsumableArray(this._makeRange(indexPath, this.anchor)));\n\n      this.current = indexPath.copy();\n    }\n    /**\n     * Clears the selection\n     */\n\n  }, {\n    key: 'clear',\n    value: function clear() {\n      if (!this.allowsEmptySelection) {\n        return;\n      }\n\n      _get(Selection.prototype.__proto__ || Object.getPrototypeOf(Selection.prototype), 'clear', this).call(this);\n\n      this._emptyCheck();\n\n      this.anchor = null;\n      this.current = null;\n    }\n    /**\n     * Clears the selection and replaces it with the given index path\n     * @param {IndexPath} indexPath the IndexPath to replace the selection with\n     */\n\n  }, {\n    key: 'replaceWith',\n    value: function replaceWith(indexPath) {\n      _get(Selection.prototype.__proto__ || Object.getPrototypeOf(Selection.prototype), 'clear', this).call(this);\n\n      this.addIndexPath(indexPath);\n      this.anchor = indexPath.copy();\n      this.current = indexPath.copy();\n    }\n    /**\n     * Selects all elements in the content\n     */\n\n  }, {\n    key: 'selectAll',\n    value: function selectAll() {\n      if (!this.allowsMultipleSelection) {\n        return;\n      }\n\n      this.clear();\n      var start = this.content.firstIndexPath;\n\n      if (start) {\n        var end = this.content.lastIndexPath;\n\n        this._addRange(start, end);\n\n        this.anchor = start.copy();\n        this.current = end.copy();\n      }\n    }\n  }, {\n    key: '_adjustSelectionIndex',\n    value: function _adjustSelectionIndex(section, index, amount) {\n      if (this.anchor && this.anchor.section === section && this.anchor.index >= index) {\n        this.anchor.index += amount;\n      }\n\n      if (this.current && this.current.section === section && this.current.index >= index) {\n        this.current.index += amount;\n      }\n    }\n  }, {\n    key: 'adjustForInsertionInSection',\n    value: function adjustForInsertionInSection(section, range) {\n      _get(Selection.prototype.__proto__ || Object.getPrototypeOf(Selection.prototype), 'adjustForInsertionInSection', this).call(this, section, range);\n\n      this._adjustSelectionIndex(section, range.start, range.length);\n\n      this._emptyCheck();\n    }\n  }, {\n    key: 'adjustForDeletionInSection',\n    value: function adjustForDeletionInSection(section, range) {\n      _get(Selection.prototype.__proto__ || Object.getPrototypeOf(Selection.prototype), 'adjustForDeletionInSection', this).call(this, section, range); // null anchor and current if they were deleted\n\n\n      if (this.anchor && this.anchor.section === section && range.contains(this.anchor.index)) {\n        this.anchor = null;\n      }\n\n      if (this.current && this.current.section === section && range.contains(this.current.index)) {\n        this.current = null;\n      }\n\n      this._adjustSelectionIndex(section, range.start, -range.length);\n\n      this._emptyCheck();\n    }\n  }, {\n    key: 'adjustForMove',\n    value: function adjustForMove(from, to) {\n      var anchor = from.equals(this.anchor) ? to : this.anchor;\n      var current = from.equals(this.current) ? to : this.current;\n\n      _get(Selection.prototype.__proto__ || Object.getPrototypeOf(Selection.prototype), 'adjustForMove', this).call(this, from, to);\n\n      this.anchor = anchor;\n      this.current = current;\n    }\n  }, {\n    key: '_adjustSelectionSection',\n    value: function _adjustSelectionSection(section, count) {\n      if (this.anchor && this.anchor.section >= section) {\n        this.anchor.section += count;\n      }\n\n      if (this.current && this.current.section >= section) {\n        this.current.section += count;\n      }\n    }\n  }, {\n    key: 'adjustForInsertedSection',\n    value: function adjustForInsertedSection(section) {\n      _get(Selection.prototype.__proto__ || Object.getPrototypeOf(Selection.prototype), 'adjustForInsertedSection', this).call(this, section);\n\n      this._adjustSelectionSection(section, +1);\n\n      this._emptyCheck();\n    }\n  }, {\n    key: 'adjustForDeletedSection',\n    value: function adjustForDeletedSection(section) {\n      _get(Selection.prototype.__proto__ || Object.getPrototypeOf(Selection.prototype), 'adjustForDeletedSection', this).call(this, section); // null anchor and current if their section was deleted\n\n\n      if (this.anchor && this.anchor.section === section) {\n        this.anchor = null;\n      }\n\n      if (this.current && this.current.section === section) {\n        this.current = null;\n      }\n\n      this._adjustSelectionSection(section, -1);\n\n      this._emptyCheck();\n    }\n  }, {\n    key: 'adjustForMovedSection',\n    value: function adjustForMovedSection(fromSection, toSection) {\n      _get(Selection.prototype.__proto__ || Object.getPrototypeOf(Selection.prototype), 'adjustForMovedSection', this).call(this, fromSection, toSection);\n\n      if (this.anchor && this.anchor.section === fromSection) {\n        this.anchor.section = toSection;\n      }\n\n      if (this.current && this.current.section === fromSection) {\n        this.current.section = toSection;\n      }\n    }\n  }, {\n    key: 'adjustForReloadedSection',\n    value: function adjustForReloadedSection(section) {\n      this.removeSection(section); // null anchor and current if their section was deleted\n\n      if (this.anchor && this.anchor.section === section) {\n        this.anchor = null;\n      }\n\n      if (this.current && this.current.section === section) {\n        this.current = null;\n      }\n\n      this._emptyCheck();\n    }\n    /**\n     * Returns whether this Selection is equal to another one\n     * @param {Selection} other the Selection to compare\n     * @return {boolean}\n     */\n\n  }, {\n    key: 'equals',\n    value: function equals(other) {\n      if (!_get(Selection.prototype.__proto__ || Object.getPrototypeOf(Selection.prototype), 'equals', this).call(this, other) || this.content !== other.content) {\n        return false;\n      }\n\n      if (this.anchor && !this.anchor.equals(other.anchor)) {\n        return false;\n      }\n\n      if (this.current && !this.current.equals(other.current)) {\n        return false;\n      }\n\n      return true;\n    }\n    /**\n     * Copies the selection\n     * @return {Selection}\n     */\n\n  }, {\n    key: 'copy',\n    value: function copy() {\n      var res = new Selection(this.content, {\n        allowsMultipleSelection: this.allowsMultipleSelection,\n        allowsEmptySelection: this.allowsEmptySelection\n      });\n      res.sectionIndexes.addIndexSet(this.sectionIndexes);\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this.sectionIndexSets[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var _step$value = _slicedToArray(_step.value, 2),\n              section = _step$value[0],\n              indexSet = _step$value[1];\n\n          res.sectionIndexSets.set(section, indexSet.copy());\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      if (this.anchor) {\n        res.anchor = this.anchor.copy();\n      }\n\n      if (this.current) {\n        res.current = this.current.copy();\n      }\n\n      return res;\n    }\n    /**\n     * Returns an IndexPathSet containing the IndexPaths in the selection\n     * @return {IndexPathSet}\n     */\n\n  }, {\n    key: 'getIndexPathSet',\n    value: function getIndexPathSet() {\n      return _get(Selection.prototype.__proto__ || Object.getPrototypeOf(Selection.prototype), 'copy', this).call(this);\n    }\n  }]);\n\n  return Selection;\n}(_IndexPathSet3.default);\n\nexports.default = Selection;","map":null,"metadata":{},"sourceType":"script"}