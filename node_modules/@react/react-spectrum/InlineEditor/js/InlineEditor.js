'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class;

var _autobindDecorator = require('autobind-decorator');

var _autobindDecorator2 = _interopRequireDefault(_autobindDecorator);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _Textfield = require('../../Textfield');

var _Textfield2 = _interopRequireDefault(_Textfield);

require('../style/index.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var InlineEditor = (0, _autobindDecorator2.default)(_class = function (_React$Component) {
  _inherits(InlineEditor, _React$Component);

  function InlineEditor() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, InlineEditor);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = InlineEditor.__proto__ || Object.getPrototypeOf(InlineEditor)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      editing: !!_this.props.autoFocus,
      value: _this.props.value || _this.props.defaultValue || '',
      invalid: false
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(InlineEditor, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(props) {
      if (props.value != null && props.value !== this.props.value) {
        this.setState({ value: props.value });
      }
    }
  }, {
    key: 'onChange',
    value: function onChange(value) {
      this.setState({ value: value });
    }
  }, {
    key: 'onKeyDown',
    value: function onKeyDown(e) {
      if (e.key === 'Enter') {
        this.endEditing(true);
      } else if (e.key === 'Escape') {
        this.endEditing(false);
      }
    }
  }, {
    key: 'startEditing',
    value: function startEditing() {
      this.setState({
        editing: true,
        startValue: this.state.value,
        invalid: false
      });
    }
  }, {
    key: 'endEditing',
    value: function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var shouldSave = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
        var contEditing, value;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                contEditing = false;
                value = shouldSave ? this.state.value : this.state.startValue;

                if (!(shouldSave && this.props.onChange)) {
                  _context.next = 9;
                  break;
                }

                _context.next = 5;
                return this.props.onChange(value);

              case 5:
                _context.t0 = _context.sent;
                contEditing = _context.t0 === false;
                _context.next = 10;
                break;

              case 9:
                if (!shouldSave && this.props.onCancel) {
                  this.props.onCancel();
                }

              case 10:
                this.setState({
                  editing: contEditing,
                  value: this.props.value == null ? value : this.props.value,
                  invalid: contEditing
                });

              case 11:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function endEditing() {
        return _ref2.apply(this, arguments);
      }

      return endEditing;
    }()
  }, {
    key: 'focusTextfield',
    value: function focusTextfield(textfield) {
      if (textfield) {
        var input = _reactDom2.default.findDOMNode(textfield);
        input.focus();
        input.select();
      }
    }
  }, {
    key: 'renderLabel',
    value: function renderLabel() {
      var _props = this.props,
          className = _props.className,
          disabled = _props.disabled;


      return _react2.default.createElement(
        'span',
        {
          className: (0, _classnames2.default)('react-spectrum-InlineEditor', 'react-spectrum-InlineEditor-label', className),
          onDoubleClick: !disabled && this.startEditing },
        this.state.value
      );
    }
  }, {
    key: 'renderEditor',
    value: function renderEditor() {
      var _props2 = this.props,
          className = _props2.className,
          props = _objectWithoutProperties(_props2, ['className']);

      return _react2.default.createElement(_Textfield2.default, _extends({}, props, {
        ref: this.focusTextfield,
        className: (0, _classnames2.default)('react-spectrum-InlineEditor', 'react-spectrum-InlineEditor-input', className),
        value: this.state.value,
        onChange: this.onChange,
        onKeyDown: this.onKeyDown,
        onBlur: this.endEditing,
        invalid: this.state.invalid }));
    }
  }, {
    key: 'render',
    value: function render() {
      return this.state.editing ? this.renderEditor() : this.renderLabel();
    }
  }]);

  return InlineEditor;
}(_react2.default.Component)) || _class;

exports.default = InlineEditor;