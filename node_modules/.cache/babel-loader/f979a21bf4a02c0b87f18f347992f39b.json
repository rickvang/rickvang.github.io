{"ast":null,"code":"import _regeneratorRuntime from \"/Users/rvang/Desktop/Spectrum/testapp/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/rvang/Desktop/Spectrum/testapp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/rvang/Desktop/Spectrum/testapp/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/rvang/Desktop/Spectrum/testapp/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/rvang/Desktop/Spectrum/testapp/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/rvang/Desktop/Spectrum/testapp/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/rvang/Desktop/Spectrum/testapp/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/rvang/Desktop/Spectrum/testapp/src/Components_old/TableView.js\";\nimport React from 'react';\nimport { TableView } from '@react/react-spectrum/TableView';\nimport { TableRow } from '@react/react-spectrum/TableView';\nimport ListDataSource from '@react/react-spectrum/ListDataSource';\nimport Switch from '@react/react-spectrum/Switch';\nvar tableData = [{\n  'id': 1,\n  'name': 'Python, carpet',\n  'enabled': true,\n  'createdBy': 'Alexandro Hindrich'\n}, {\n  'id': 2,\n  'name': 'Cormorant, flightless',\n  'enabled': false,\n  'createdBy': 'Felicity McRinn'\n}, {\n  'id': 3,\n  'name': 'Cape cobra',\n  'enabled': false,\n  'createdBy': 'Emalee Worsfield'\n}, {\n  'id': 4,\n  'name': 'Red lava crab',\n  'enabled': true,\n  'createdBy': 'Cedric Henriet'\n}, {\n  'id': 5,\n  'name': 'Tiger',\n  'enabled': true,\n  'createdBy': 'Roselin Burk'\n}, {\n  'id': 6,\n  'name': 'Blue-tongued skink',\n  'enabled': false,\n  'createdBy': 'Dru Kretschmer'\n}, {\n  'id': 7,\n  'name': 'Springbuck',\n  'enabled': false,\n  'createdBy': 'Brockie Eastham'\n}, {\n  'id': 8,\n  'name': 'Woodpecker, downy',\n  'enabled': true,\n  'createdBy': 'Lexis Bravey'\n}, {\n  'id': 9,\n  'name': 'Cape white-eye',\n  'enabled': true,\n  'createdBy': 'Vevay Wessel'\n}, {\n  'id': 10,\n  'name': 'African wild cat',\n  'enabled': false,\n  'createdBy': 'Melamie Klais'\n}];\nvar columns = [{\n  title: 'Active',\n  key: 'enabled',\n  width: 100,\n  announce: false\n}, {\n  title: 'Name',\n  key: 'name',\n  minWidth: 200,\n  sortable: true,\n  divider: true\n}, {\n  title: 'Created By',\n  key: 'createdBy',\n  width: 200,\n  sortable: true\n}];\n\nvar TableDS =\n/*#__PURE__*/\nfunction (_ListDataSource) {\n  _inherits(TableDS, _ListDataSource);\n\n  function TableDS() {\n    var _this;\n\n    var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : tableData;\n\n    _classCallCheck(this, TableDS);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TableDS).call(this));\n    _this.data = data;\n    return _this;\n  }\n\n  _createClass(TableDS, [{\n    key: \"load\",\n    value: function () {\n      var _load = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(sortDescriptor) {\n        var data;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                data = this.data.slice();\n\n                if (sortDescriptor) {\n                  data.sort(function (a, b) {\n                    return a[sortDescriptor.column.key] < b[sortDescriptor.column.key] ? -sortDescriptor.direction : sortDescriptor.direction;\n                  });\n                }\n\n                return _context.abrupt(\"return\", data);\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function load(_x) {\n        return _load.apply(this, arguments);\n      }\n\n      return load;\n    }()\n  }, {\n    key: \"loadMore\",\n    value: function () {\n      var _loadMore = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var _this2 = this;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", new Promise(function (resolve) {\n                  setTimeout(function () {\n                    resolve(_this2.data);\n                  }, 2000);\n                }));\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function loadMore() {\n        return _loadMore.apply(this, arguments);\n      }\n\n      return loadMore;\n    }()\n  }]);\n\n  return TableDS;\n}(ListDataSource);\n\nvar ds = new TableDS();\n\nfunction renderCell(column, data, rowFocused) {\n  if (column.key === 'enabled') {\n    // Determine how to set tabIndex of Switch based on focused state of row.\n    var tabIndex = rowFocused ? 0 : -1;\n    return React.createElement(Switch, {\n      defaultChecked: data[column.key] == null ? data : data[column.key],\n      onChange: function onChange() {},\n      tabIndex: tabIndex,\n      title: column.title,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    });\n  }\n\n  return React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, '' + (data[column.key] || data));\n}\n\nvar ProtoTableView =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ProtoTableView, _React$Component);\n\n  function ProtoTableView() {\n    _classCallCheck(this, ProtoTableView);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ProtoTableView).apply(this, arguments));\n  }\n\n  _createClass(ProtoTableView, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(TableView, {\n        columns: columns,\n        dataSource: ds,\n        renderCell: renderCell,\n        style: {\n          \"width\": \"100%\"\n        } // allowsSelection={true}\n        // allowsMultipleSelection={false}\n        // canReorderItems={true}\n        // canShrinkColumns={true}\n        // render={this.render}\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      });\n    } //   componentDidMount() {\n    //     setTimeout(() => {\n    //         window.dispatchEvent(new Event('resize'));\n    //     },100);\n    // }\n\n  }]);\n\n  return ProtoTableView;\n}(React.Component);\n\nexport { ProtoTableView as default };","map":{"version":3,"sources":["/Users/rvang/Desktop/Spectrum/testapp/src/Components_old/TableView.js"],"names":["React","TableView","TableRow","ListDataSource","Switch","tableData","columns","title","key","width","announce","minWidth","sortable","divider","TableDS","data","sortDescriptor","slice","sort","a","b","column","direction","Promise","resolve","setTimeout","ds","renderCell","rowFocused","tabIndex","ProtoTableView","Component"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport {TableView} from '@react/react-spectrum/TableView';\nimport {TableRow} from '@react/react-spectrum/TableView';\nimport ListDataSource from '@react/react-spectrum/ListDataSource';\nimport Switch from '@react/react-spectrum/Switch';\n\nvar tableData = [\n  {'id': 1, 'name': 'Python, carpet', 'enabled': true, 'createdBy': 'Alexandro Hindrich'},\n  {'id': 2, 'name': 'Cormorant, flightless', 'enabled': false, 'createdBy': 'Felicity McRinn'},\n  {'id': 3, 'name': 'Cape cobra', 'enabled': false, 'createdBy': 'Emalee Worsfield'},\n  {'id': 4, 'name': 'Red lava crab', 'enabled': true, 'createdBy': 'Cedric Henriet'},\n  {'id': 5, 'name': 'Tiger', 'enabled': true, 'createdBy': 'Roselin Burk'},\n  {'id': 6, 'name': 'Blue-tongued skink', 'enabled': false, 'createdBy': 'Dru Kretschmer'},\n  {'id': 7, 'name': 'Springbuck', 'enabled': false, 'createdBy': 'Brockie Eastham'},\n  {'id': 8, 'name': 'Woodpecker, downy', 'enabled': true, 'createdBy': 'Lexis Bravey'},\n  {'id': 9, 'name': 'Cape white-eye', 'enabled': true, 'createdBy': 'Vevay Wessel'},\n  {'id': 10, 'name': 'African wild cat', 'enabled': false, 'createdBy': 'Melamie Klais'},\n];\nlet columns = [\n  {\n    title: 'Active',\n    key: 'enabled',\n    width: 100,\n    announce: false\n  },\n  {\n    title: 'Name',\n    key: 'name',\n    minWidth: 200,\n    sortable: true,\n    divider: true\n  },\n  {\n    title: 'Created By',\n    key: 'createdBy',\n    width: 200,\n    sortable: true\n  }\n];\n\nclass TableDS extends ListDataSource {\n  constructor(data = tableData) {\n    super();\n    this.data = data;\n  }\n\n  async load(sortDescriptor) {\n    let data = this.data.slice();\n    if (sortDescriptor) {\n      data.sort((a, b) => a[sortDescriptor.column.key] < b[sortDescriptor.column.key] ? -sortDescriptor.direction : sortDescriptor.direction);\n    }\n\n    return data;\n  }\n\n  async loadMore() {\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        resolve(this.data);\n      }, 2000);\n    });\n  }\n}\n\nvar ds = new TableDS();\n\nfunction renderCell(column, data, rowFocused) {\n  if (column.key === 'enabled') {\n    // Determine how to set tabIndex of Switch based on focused state of row.\n    var tabIndex = rowFocused ? 0 : -1;\n\n    return (\n      <Switch\n        defaultChecked={data[column.key] == null ? data : data[column.key]}\n        onChange={() => {}}\n        tabIndex={tabIndex}\n        title={column.title} />\n    );\n  }\n  return <span>{'' + (data[column.key] || data)}</span>;\n}\n  \nexport default class ProtoTableView extends React.Component {\n    render(){\n      return (\n        \n        <TableView\n        \n          columns={columns}\n          dataSource={ds}\n          renderCell={renderCell}\n          style={{\"width\":\"100%\"}}\n          // allowsSelection={true}\n          // allowsMultipleSelection={false}\n          // canReorderItems={true}\n          // canShrinkColumns={true}\n          // render={this.render}\n        >\n        </TableView>\n      )\n    }\n  //   componentDidMount() {\n  //     setTimeout(() => {\n  //         window.dispatchEvent(new Event('resize'));\n  //     },100);\n  // }\n  }\n"]},"metadata":{},"sourceType":"module"}