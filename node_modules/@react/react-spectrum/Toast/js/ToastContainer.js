'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ToastContainer = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.addToast = addToast;
exports.removeToast = removeToast;
exports.success = success;
exports.warning = warning;
exports.error = error;
exports.info = info;
exports.help = help;

var _createId = require('../../utils/createId');

var _createId2 = _interopRequireDefault(_createId);

var _CSSTransition = require('react-transition-group/CSSTransition');

var _CSSTransition2 = _interopRequireDefault(_CSSTransition);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _timer = require('../../utils/timer');

var _timer2 = _interopRequireDefault(_timer);

var _Toast = require('./Toast');

var _Toast2 = _interopRequireDefault(_Toast);

var _TransitionGroup = require('react-transition-group/TransitionGroup');

var _TransitionGroup2 = _interopRequireDefault(_TransitionGroup);

require('../style/index.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TOAST_CONTAINERS = new Map();
var TOAST_TIMEOUT = 5000;
var TOAST_ANIMATION_TIME = 200;

/**
 * @type {Map<Toast, {Timer, int}>}
 * Maps allow us to use objects as keys
 * timer - a Timer object
 * id - a unique integer to identify the toast by, used
 *   to keep the key so React doesn't clobber our DOM and
 *   cause use to lose focus while other elements are
 *   being removed around it
 */
var TOAST_DATA = new Map();

var ToastContainer = exports.ToastContainer = function (_React$Component) {
  _inherits(ToastContainer, _React$Component);

  function ToastContainer() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, ToastContainer);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ToastContainer.__proto__ || Object.getPrototypeOf(ToastContainer)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      toasts: []
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(ToastContainer, [{
    key: 'timerAction',
    value: function timerAction(toast, action) {
      if (TOAST_DATA.has(toast)) {
        var timer = TOAST_DATA.get(toast).timer;
        if (timer) {
          timer[action]();
        }
      }
    }
  }, {
    key: 'add',
    value: function add(toast) {
      var timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : TOAST_TIMEOUT;

      if (timeout < 0) {
        timeout = TOAST_TIMEOUT;
      }
      TOAST_DATA.set(toast, {
        timer: timeout === 0 ? null : new _timer2.default(this.remove.bind(this, toast), timeout),
        id: (0, _createId2.default)()
      });

      this.setState({
        toasts: [].concat(_toConsumableArray(this.state.toasts), [toast])
      });
    }
  }, {
    key: 'remove',
    value: function remove(toast, e) {
      var currentToasts = this.state.toasts;

      var toasts = currentToasts.filter(function (t) {
        return t !== toast;
      });

      if (toasts.length !== currentToasts.length && toast.props.onClose) {
        toast.props.onClose(e);
      }

      this.setState({ toasts: toasts });

      this.timerAction(toast, 'pause');
      TOAST_DATA.delete(toast);
    }
  }, {
    key: 'onFocus',
    value: function onFocus(toast, e) {
      this.timerAction(toast, 'pause');
      if (toast.props.onFocus) {
        toast.props.onFocus();
      }
    }
  }, {
    key: 'onBlur',
    value: function onBlur(toast, e) {
      this.timerAction(toast, 'resume');
      if (toast.props.onBlur) {
        toast.props.onBlur();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      return _react2.default.createElement(
        _TransitionGroup2.default,
        { className: 'react-spectrum-ToastContainer' },
        this.state.toasts.map(function (toast) {
          return _react2.default.createElement(
            _CSSTransition2.default,
            { key: TOAST_DATA.get(toast).id, classNames: 'react-spectrum-Toast-slide', timeout: TOAST_ANIMATION_TIME },
            _react2.default.cloneElement(toast, {
              onClose: _this2.remove.bind(_this2, toast),
              onFocus: _this2.onFocus.bind(_this2, toast),
              onBlur: _this2.onBlur.bind(_this2, toast)
            })
          );
        })
      );
    }
  }]);

  return ToastContainer;
}(_react2.default.Component);

function createToastNode(container) {
  var parent = container || document.querySelector('.react-spectrum-provider') || document.body;
  var node = document.createElement('div');
  parent.appendChild(node);
  return node;
}

function ensureToastContainer(container, callback) {
  var toastContainer = TOAST_CONTAINERS.get(container);

  // Make sure that toastContainer is a real DOM node, not only a memory footprint of previously cached node.
  if (toastContainer && document.body.contains(_reactDom2.default.findDOMNode(toastContainer))) {
    callback(toastContainer);
  } else {
    var toastContainerRef = void 0;
    _reactDom2.default.render(_react2.default.createElement(ToastContainer, { ref: function ref(_ref2) {
        return toastContainerRef = _ref2;
      } }), createToastNode(container), function () {
      TOAST_CONTAINERS.set(container, toastContainerRef);
      callback(toastContainerRef);
    });
  }
}

function addToast(toast, timeout, container) {
  ensureToastContainer(container, function (toastContainer) {
    return toastContainer.add(toast, timeout);
  });
}

function removeToast(toast, container) {
  ensureToastContainer(container, function (toastContainer) {
    return toastContainer.remove(toast);
  });
}

function success(message) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  addToast(_react2.default.createElement(
    _Toast2.default,
    _extends({ closable: true, variant: 'success' }, options),
    message
  ), options.timeout, options.container);
}

function warning(message) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  addToast(_react2.default.createElement(
    _Toast2.default,
    _extends({ closable: true, variant: 'warning' }, options),
    message
  ), options.timeout, options.container);
}

function error(message) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  addToast(_react2.default.createElement(
    _Toast2.default,
    _extends({ closable: true, variant: 'error' }, options),
    message
  ), options.timeout, options.container);
}

function info(message) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  addToast(_react2.default.createElement(
    _Toast2.default,
    _extends({ closable: true, variant: 'info' }, options),
    message
  ), options.timeout, options.container);
}

function help(message) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  addToast(_react2.default.createElement(
    _Toast2.default,
    _extends({ closable: true, variant: 'help' }, options),
    message
  ), options.timeout, options.container);
}