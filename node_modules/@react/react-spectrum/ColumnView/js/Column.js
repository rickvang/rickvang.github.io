'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class;

var _autobindDecorator = require('autobind-decorator');

var _autobindDecorator2 = _interopRequireDefault(_autobindDecorator);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _collectionView = require('@react/collection-view');

var _Item = require('./Item');

var _Item2 = _interopRequireDefault(_Item);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*
 * An individual column in a ColumnView
 */
var Column = (0, _autobindDecorator2.default)(_class = function (_React$Component) {
  _inherits(Column, _React$Component);

  function Column(props) {
    _classCallCheck(this, Column);

    var _this = _possibleConstructorReturn(this, (Column.__proto__ || Object.getPrototypeOf(Column)).call(this, props));

    _this.layout = new _collectionView.ListLayout({
      rowHeight: 44
    });
    return _this;
  }

  _createClass(Column, [{
    key: 'focus',
    value: function focus() {
      try {
        var indexPath = this.collection.selectedIndexPaths.firstIndexPath;
        this.collection.scrollToItem(indexPath);
        this.collection.focusItem(indexPath);
      } catch (err) {
        // ignore errors in tests
      }
    }
  }, {
    key: 'onFocus',
    value: function onFocus(e) {
      var _this2 = this;

      if (this.props.onFocus) {
        this.props.onFocus(e);
      }

      // Ignore this focus event if it is the entire collection-view that is
      // focusing rather than an individual item.
      if (e.target === this.collection.getDOMNode()) {
        return;
      }

      // Wait until collection-view updates
      requestAnimationFrame(function () {
        // If the focused item is not selected, select it.
        var focusedIndexPath = _this2.collection && _this2.collection.focusedIndexPath;
        if (!_this2.collection.selectedIndexPaths.contains(focusedIndexPath)) {
          _this2.collection.selectItem(focusedIndexPath);
        }
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      var _props = this.props,
          dataSource = _props.dataSource,
          item = _props.item,
          allowsSelection = _props.allowsSelection,
          _props$level = _props.level,
          level = _props$level === undefined ? 0 : _props$level;

      // Find IndexPaths for the items that should be highlighted.
      // If this is the last column, nothing should be highlighted.
      // Otherwise, highlight the navigated item in that column.
      // Multi-select behavior is handled internally by the collection-view. See onHighlightChange.

      var highlightedIndexPaths = [];
      var stack = dataSource.navigationStack;

      if (level !== stack.length - 1) {
        // Find the index of the navigated child (which should be next in the stack).
        var navigatedItem = stack[level + 1];
        if (navigatedItem) {
          highlightedIndexPaths.push(new _collectionView.IndexPath(0, navigatedItem.index));
        }
      }

      var ariaLabelledby = level > 0 ? item.getItemId() : this.props['aria-labelledby'];

      return _react2.default.createElement(_collectionView.EditableCollectionView, {
        className: (0, _classnames2.default)('spectrum-MillerColumns-item spectrum-AssetList'),
        dataSource: item.children,
        layout: this.layout,
        delegate: this,
        onSelectionChanged: this.onHighlightChange,
        selectedIndexPaths: highlightedIndexPaths,
        allowsMultipleSelection: allowsSelection,
        ref: function ref(c) {
          return _this3.collection = c;
        },
        role: 'group',
        id: item.getColumnId(),
        'aria-label': this.props['aria-label'],
        'aria-labelledby': ariaLabelledby,
        onKeyDown: this.onKeyDown,
        onFocus: this.onFocus });
    }
  }, {
    key: 'onHighlightChange',
    value: function onHighlightChange() {
      if (!this.collection) {
        return;
      }

      // If there is 1 item highlighted, navigate to it.
      // If there are no items highlighted, navigate to the parent.
      // Otherwise, do nothing and let the collection-view manage the multiple highlighting behavior.
      var highlighted = Array.from(this.collection.selectedIndexPaths);
      if (highlighted.length <= 1) {
        var item = highlighted.length === 1 ? this.collection.getItem(highlighted[0]) : this.props.item;
        this.props.dataSource.navigateToItem(item.item);
      }
    }
  }, {
    key: 'onKeyDown',
    value: function onKeyDown(e) {
      switch (e.key) {
        case 'Enter':
        case ' ':
          return this.commitSelection();

        case 'ArrowLeft':
          return this.props.dataSource.navigateToPrevious();

        case 'ArrowRight':
          return this.props.dataSource.navigateToNext();

        case 'Escape':
        case 'Esc':
          e.preventDefault();
          return;
      }
    }
  }, {
    key: 'commitSelection',
    value: function commitSelection() {
      var _this4 = this;

      if (!this.props.allowsSelection) {
        return;
      }

      // Get highlighted items from the collection-view
      var highlighted = Array.from(this.collection.selectedIndexPaths).map(function (indexPath) {
        return _this4.collection.getItem(indexPath);
      });

      // Filter out branches if they cannot be selected
      if (!this.props.allowsBranchSelection) {
        highlighted = highlighted.filter(function (item) {
          return !item.hasChildren;
        });
      }

      if (highlighted.length > 0) {
        // If all of the items have the same selection status, toggle it.
        // Otherwise, if some items are selected, and some not, select them all.
        var value = !highlighted.map(function (item) {
          return _this4.props.dataSource.isSelected(item.item);
        }).reduce(function (prev, selected) {
          return prev === selected ? prev : false;
        });

        this.props.dataSource.setSelected(highlighted.map(function (h) {
          return h.item;
        }), value);
      }
    }
  }, {
    key: 'renderItemView',
    value: function renderItemView(type, item) {
      var _props2 = this.props,
          renderItem = _props2.renderItem,
          allowsSelection = _props2.allowsSelection,
          allowsBranchSelection = _props2.allowsBranchSelection,
          dataSource = _props2.dataSource,
          detailNode = _props2.detailNode,
          level = _props2.level;

      return _react2.default.createElement(_Item2.default, {
        level: level,
        column: this,
        item: item,
        renderItem: renderItem,
        allowsSelection: allowsSelection,
        allowsBranchSelection: allowsBranchSelection,
        isSelected: dataSource.isSelected(item.item),
        detailNode: detailNode,
        onSelect: this.onSelect.bind(this, item.item) });
    }
  }, {
    key: 'onSelect',
    value: function onSelect(item, selected) {
      this.props.dataSource.setSelected([item], selected);
    }
  }]);

  return Column;
}(_react2.default.Component)) || _class;

Column.propTypes = {
  /*
   * An instance of an EventEmitter. Usually a ColumnViewDataSource.
   */
  dataSource: _propTypes2.default.object,

  /*
   * Item to be rendered.
   */
  item: _propTypes2.default.any,

  /*
   * Determines if a checkbox should be rendered.
   */
  allowsSelection: _propTypes2.default.bool,

  /*
   * Determines if a checkbox should be rendered on chevron sections.
   */
  allowsBranchSelection: _propTypes2.default.bool,

  /*
   * Custom rendering function for the item contents.
   */
  renderItem: _propTypes2.default.func
};
exports.default = Column;