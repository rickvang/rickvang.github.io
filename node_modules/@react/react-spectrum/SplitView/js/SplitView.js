'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class;

var _autobindDecorator = require('autobind-decorator');

var _autobindDecorator2 = _interopRequireDefault(_autobindDecorator);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _createId = require('../../utils/createId');

var _createId2 = _interopRequireDefault(_createId);

var _focusRing = require('../../utils/focusRing');

var _focusRing2 = _interopRequireDefault(_focusRing);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

if (process.env.SCALE_MEDIUM && process.env.SCALE_LARGE) {
  require('../../spectrum-css/splitview/index.css');

  require('../../spectrum-css/splitview/index-diff.css');
} else if (process.env.SCALE_LARGE) {
  require('../../spectrum-css/splitview/index-lg.css');
} else {
  require('../../spectrum-css/splitview/index.css');
}

if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHT) require('../../spectrum-css/splitview/multiStops/light.css');
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARK) require('../../spectrum-css/splitview/multiStops/dark.css');
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHTEST) require('../../spectrum-css/splitview/multiStops/lightest.css');
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARKEST) require('../../spectrum-css/splitview/multiStops/darkest.css');


var COLLAPSE_THREASHOLD = 50;
var ORIENTATIONS = {
  horizontal: 'width',
  vertical: 'height'
};

var CURSORS = {
  horizontal: {
    default: 'ew-resize',
    min: ['e-resize', 'w-resize'],
    max: ['w-resize', 'e-resize']
  },
  vertical: {
    default: 'ns-resize',
    min: ['s-resize', 'n-resize'],
    max: ['n-resize', 's-resize']
  }
};

var SplitView = (0, _autobindDecorator2.default)(_class = (0, _focusRing2.default)(_class = function (_React$Component) {
  _inherits(SplitView, _React$Component);

  function SplitView() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, SplitView);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = SplitView.__proto__ || Object.getPrototypeOf(SplitView)).call.apply(_ref, [this].concat(args))), _this), _this.primaryId = (0, _createId2.default)(), _this.state = {
      dividerPosition: _this.props.primaryDefault,
      hovered: false,
      dragging: false
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(SplitView, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var children = _react2.default.Children.toArray(this.props.children);
      if (children.length !== 2) {
        throw new Error('SplitView must have 2 children, ' + children.length + ' found.');
      }

      var _props = this.props,
          primaryPane = _props.primaryPane,
          orientation = _props.orientation,
          resizable = _props.resizable;

      var dimension = ORIENTATIONS[orientation];
      var secondaryPane = Number(!primaryPane);
      var primary = _react2.default.createElement(
        'div',
        {
          className: 'spectrum-SplitView-pane',
          style: _defineProperty({}, dimension, this.state.dividerPosition),
          id: this.primaryId },
        children[primaryPane]
      );

      var secondary = _react2.default.createElement(
        'div',
        {
          className: 'spectrum-SplitView-pane',
          style: { flex: 1 } },
        children[secondaryPane]
      );

      return _react2.default.createElement(
        'div',
        {
          ref: function ref(r) {
            return _this2.container = r;
          },
          className: (0, _classnames2.default)('spectrum-SplitView', 'spectrum-SplitView--' + orientation, this.props.className),
          onMouseMove: resizable ? this.onMouseMove : null,
          onMouseDown: resizable ? this.onMouseDown : null,
          onMouseLeave: resizable ? this.onMouseLeave : null },
        primaryPane === 0 ? primary : secondary,
        _react2.default.createElement(
          'div',
          {
            className: (0, _classnames2.default)('spectrum-SplitView-splitter', {
              'is-draggable': resizable,
              'is-hovered': this.state.hovered,
              'is-active': this.state.dragging,
              'is-collapsed-start': this.state.dividerPosition === 0 && primaryPane === 0,
              'is-collapsed-end': this.state.dividerPosition === 0 && primaryPane === 1
            }),
            tabIndex: resizable ? 0 : null,
            role: 'separator',
            'aria-valuenow': (this.state.dividerPosition - this.state.minPos) / (this.state.maxPos - this.state.minPos) * 100 | 0,
            'aria-valuemin': 0,
            'aria-valuemax': 100,
            'aria-controls': this.primaryId,
            'aria-label': this.props['aria-label'],
            'aria-labelledby': this.props['aria-labelledby'],
            onKeyDown: this.onKeyDown },
          resizable ? _react2.default.createElement('div', { className: 'spectrum-SplitView-gripper' }) : null
        ),
        primaryPane === 1 ? primary : secondary
      );
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      window.addEventListener('resize', this.resize, false);
      this.resize();
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      window.removeEventListener('resize', this.resize, false);
    }
  }, {
    key: 'onMouseMove',
    value: function onMouseMove(e) {
      this._over = true;
      if (this.state.dragging) {
        return;
      }

      this.updateCursor(e);
    }
  }, {
    key: 'onMouseDown',
    value: function onMouseDown(e) {
      if (this.state.hovered) {
        window.addEventListener('mousemove', this.onMouseDragged, false);
        window.addEventListener('mouseup', this.onMouseUp, false);
        this.setState({ dragging: true });
        this._offset = this.getOffset();
      }
    }
  }, {
    key: 'getOffset',
    value: function getOffset() {
      var rect = this.container.getBoundingClientRect();
      return this.props.orientation === 'horizontal' ? rect.left : rect.top;
    }
  }, {
    key: 'getPosition',
    value: function getPosition(e) {
      return this.props.orientation === 'horizontal' ? e.clientX : e.clientY;
    }
  }, {
    key: 'onMouseDragged',
    value: function onMouseDragged(e) {
      if (!this.state.dragging) {
        return;
      }

      e.preventDefault();

      var _props2 = this.props,
          primaryPane = _props2.primaryPane,
          collapsible = _props2.collapsible;

      var pos = this.getPosition(e) - this._offset;
      if (primaryPane === 1) {
        pos = this._size - pos;
      }

      if (collapsible && pos < this.state.minPos - COLLAPSE_THREASHOLD) {
        pos = 0;
      }

      this.updatePosition(pos);
      this.updateCursor(e);
    }
  }, {
    key: 'onMouseUp',
    value: function onMouseUp(e) {
      if (!this.state.dragging) {
        return;
      }

      window.removeEventListener('mouseup', this.mouseUp, false);
      window.removeEventListener('mousemove', this.mouseDragged, false);

      this.setState({ dragging: false });
      this.updateCursor(e);
      if (!this._over) {
        document.body.style.cursor = null;
      }

      if (this.props.onResizeEnd) {
        this.props.onResizeEnd(this.state.dividerPosition);
      }
    }
  }, {
    key: 'onMouseLeave',
    value: function onMouseLeave() {
      this._over = false;
      this.setState({ hovered: false });
      if (!this.state.dragging) {
        document.body.style.cursor = null;
      }
    }
  }, {
    key: 'resize',
    value: function resize() {
      var _this3 = this;

      this._size = this.props.orientation === 'horizontal' ? this.container.offsetWidth : this.container.offsetHeight;

      var _props3 = this.props,
          primaryMin = _props3.primaryMin,
          primaryMax = _props3.primaryMax,
          secondaryMin = _props3.secondaryMin,
          secondaryMax = _props3.secondaryMax;

      this.setState({
        minPos: Math.max(primaryMin, this._size - secondaryMax),
        maxPos: Math.min(primaryMax, this._size - secondaryMin)
      }, function () {
        _this3.updatePosition(_this3.state.dividerPosition);
      });
    }
  }, {
    key: 'updatePosition',
    value: function updatePosition(x) {
      var isKeyboard = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      this._lastPosition = this.state.dividerPosition;

      var pos = Math.max(this.state.minPos, Math.min(this.state.maxPos, x));
      if (this.props.collapsible && x === 0) {
        pos = 0;
      }

      if (pos !== this.state.dividerPosition) {
        this.setState({ dividerPosition: pos });
        if (this.props.onResize) {
          this.props.onResize(pos);
        }

        if (isKeyboard && this.props.onResizeEnd) {
          this.props.onResizeEnd(pos);
        }
      }
    }
  }, {
    key: 'updateCursor',
    value: function updateCursor(e) {
      var over = this.state.dragging || this.dividerContainsPoint(this.getPosition(e));
      var wasOver = this.state.dragging ? false : this.state.hovered;

      if (!wasOver && over) {
        var _props4 = this.props,
            primaryPane = _props4.primaryPane,
            orientation = _props4.orientation;

        var cursors = CURSORS[orientation];
        var cursor = cursors.default;
        if (this.state.dividerPosition <= this.state.minPos) {
          cursor = cursors.min[primaryPane];
        } else if (this.state.dividerPosition >= this.state.maxPos) {
          cursor = cursors.max[primaryPane];
        }

        this.setState({ hovered: this._over });
        document.body.style.cursor = cursor;
      } else if (wasOver && !over) {
        this.setState({ hovered: false });
        document.body.style.cursor = null;
      }
    }
  }, {
    key: 'dividerContainsPoint',
    value: function dividerContainsPoint(x) {
      x -= this.getOffset();
      if (this.props.primaryPane === 1) {
        x = this._size - x;
      }

      var padding = 10;

      var d1 = this.state.dividerPosition - padding;
      var d2 = this.state.dividerPosition + padding;

      return x >= d1 && x <= d2;
    }
  }, {
    key: 'decrement',
    value: function decrement(e) {
      e.preventDefault();
      this.updatePosition(this.state.dividerPosition + (this.props.primaryPane === 0 ? -10 : 10), true);
    }
  }, {
    key: 'increment',
    value: function increment(e) {
      e.preventDefault();
      this.updatePosition(this.state.dividerPosition + (this.props.primaryPane === 0 ? 10 : -10), true);
    }
  }, {
    key: 'onKeyDown',
    value: function onKeyDown(e) {
      if (!this.props.resizable) {
        return;
      }

      var _props5 = this.props,
          orientation = _props5.orientation,
          collapsible = _props5.collapsible;


      switch (e.key) {
        case 'Left':
        case 'ArrowLeft':
          if (orientation === 'horizontal') {
            this.decrement(e);
          }
          break;
        case 'Up':
        case 'ArrowUp':
          if (orientation === 'vertical') {
            this.decrement(e);
          }
          break;
        case 'Right':
        case 'ArrowRight':
          if (orientation === 'horizontal') {
            this.increment(e);
          }
          break;
        case 'Down':
        case 'ArrowDown':
          if (orientation === 'vertical') {
            this.increment(e);
          }
          break;
        case 'Home':
          e.preventDefault();
          this.updatePosition(this.state.minPos, true);
          break;
        case 'End':
          e.preventDefault();
          this.updatePosition(this.state.maxPos, true);
          break;
        case 'Enter':
          if (collapsible) {
            e.preventDefault();
            this.updatePosition(this.state.dividerPosition === 0 ? this._lastPosition || this.state.minPos : 0, true);
          }
          break;
      }
    }
  }]);

  return SplitView;
}(_react2.default.Component)) || _class) || _class;

SplitView.propTypes = {
  /** A custom class name to apply to the split view */
  className: _propTypes2.default.string,

  /** The orientation of the split view panes - horizontal or vertical */
  orientation: _propTypes2.default.oneOf(['horizontal', 'vertical']),

  /** Whether the split view is resizable */
  resizable: _propTypes2.default.bool,

  /** Whether the primary pane of the split view is collapsible */
  collapsible: _propTypes2.default.bool,

  /** A function that should be applied when the split view is dragged */
  onResize: _propTypes2.default.func,

  /** A function that should be applied when dragging ends on the split view */
  onResizeEnd: _propTypes2.default.func,

  /** The child index of the primary pane of the split view. 0 by default, meaning either left or top depending on orientation. */
  primaryPane: _propTypes2.default.oneOf([0, 1]),

  /** The minimum size of the primary pane */
  primaryMin: _propTypes2.default.number,

  /** The maximum size of the primary pane */
  primaryMax: _propTypes2.default.number,

  /** The default size of the primary pane */
  primaryDefault: _propTypes2.default.number,

  /** The minimum size of the secondary pane */
  secondaryMin: _propTypes2.default.number,

  /** The maximum size of the secondary pane */
  secondaryMax: _propTypes2.default.number
};
SplitView.defaultProps = {
  orientation: 'horizontal',
  resizable: true,
  collapsible: false,
  primaryPane: 0,
  primaryMin: 304,
  primaryMax: Infinity,
  primaryDefault: 304,
  secondaryMin: 304,
  secondaryMax: Infinity
};
exports.default = SplitView;