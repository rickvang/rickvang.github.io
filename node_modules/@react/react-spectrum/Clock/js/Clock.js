'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class;

var _autobindDecorator = require('autobind-decorator');

var _autobindDecorator2 = _interopRequireDefault(_autobindDecorator);

var _number = require('../../utils/number');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _createId = require('../../utils/createId');

var _createId2 = _interopRequireDefault(_createId);

var _filterDOMProps = require('../../utils/filterDOMProps');

var _filterDOMProps2 = _interopRequireDefault(_filterDOMProps);

var _moment = require('../../utils/moment');

var _intl = require('../../utils/intl');

var _moment2 = require('moment');

var _moment3 = _interopRequireDefault(_moment2);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Select = require('../../Select');

var _Select2 = _interopRequireDefault(_Select);

var _Textfield = require('../../Textfield');

var _Textfield2 = _interopRequireDefault(_Textfield);

require('../style/index.css');

require('../../utils/style/index.css');

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var intlMessages = {
  'cs-CZ': _interopRequireDefault(require('./../intl/cs-CZ.json')).default,
  'da-DK': _interopRequireDefault(require('./../intl/da-DK.json')).default,
  'de-DE': _interopRequireDefault(require('./../intl/de-DE.json')).default,
  'en-US': _interopRequireDefault(require('./../intl/en-US.json')).default,
  'es-ES': _interopRequireDefault(require('./../intl/es-ES.json')).default,
  'fi-FI': _interopRequireDefault(require('./../intl/fi-FI.json')).default,
  'fr-FR': _interopRequireDefault(require('./../intl/fr-FR.json')).default,
  'it-IT': _interopRequireDefault(require('./../intl/it-IT.json')).default,
  'ja-JP': _interopRequireDefault(require('./../intl/ja-JP.json')).default,
  'ko-KR': _interopRequireDefault(require('./../intl/ko-KR.json')).default,
  'nb-NO': _interopRequireDefault(require('./../intl/nb-NO.json')).default,
  'nl-NL': _interopRequireDefault(require('./../intl/nl-NL.json')).default,
  'pl-PL': _interopRequireDefault(require('./../intl/pl-PL.json')).default,
  'pt-BR': _interopRequireDefault(require('./../intl/pt-BR.json')).default,
  'ru-RU': _interopRequireDefault(require('./../intl/ru-RU.json')).default,
  'sv-SE': _interopRequireDefault(require('./../intl/sv-SE.json')).default,
  'tr-TR': _interopRequireDefault(require('./../intl/tr-TR.json')).default,
  'zh-CN': _interopRequireDefault(require('./../intl/zh-CN.json')).default,
  'zh-TW': _interopRequireDefault(require('./../intl/zh-TW.json')).default
};


var formatMessage = (0, _intl.messageFormatter)(intlMessages);

var Clock = (0, _autobindDecorator2.default)(_class = function (_Component) {
  _inherits(Clock, _Component);

  function Clock(props) {
    _classCallCheck(this, Clock);

    var _this = _possibleConstructorReturn(this, (Clock.__proto__ || Object.getPrototypeOf(Clock)).call(this, props));

    _this.clockId = (0, _createId2.default)();

    var _this$props = _this.props,
        value = _this$props.value,
        defaultValue = _this$props.defaultValue,
        displayFormat = _this$props.displayFormat,
        valueFormat = _this$props.valueFormat;


    _moment3.default.locale((0, _intl.getLocale)());
    var val = (0, _moment.toMoment)(value || defaultValue || '', valueFormat);
    var isValid = val && val.isValid();
    var displayMeridiem = /a/i.test(displayFormat);

    _this.state = {
      value: val,
      hourText: isValid ? _this.getDisplayHour(val.hour(), displayMeridiem) : '',
      minuteText: isValid ? val.format('mm') : '',
      meridiemVal: _this.getMeridiemVal(val),
      displayMeridiem: displayMeridiem
    };
    return _this;
  }

  _createClass(Clock, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if ('value' in nextProps) {
        var val = (0, _moment.toMoment)(nextProps.value, nextProps.valueFormat);
        var isValid = val && val.isValid();

        if (!isValid) {
          this.setState({
            hourText: this.state.hourText || '',
            minuteText: this.state.minuteText || '',
            meridiemVal: this.state.meridiemVal || ''
          });
        } else {
          var hourTextVal = this.getDisplayHour(val.hour(), this.state.displayMeridiem);
          var meridiemVal = this.getMeridiemVal(val);
          if (!this.state.hourText || +this.state.hourText !== hourTextVal) {
            this.setState({ hourText: hourTextVal });
          }

          if (!this.state.minuteText || +this.state.minuteText !== val.minute()) {
            this.setState({ minuteText: val.minute() });
          }

          if (!this.state.meridiemVal || this.state.meridiemVal !== meridiemVal) {
            this.setState({ meridiemVal: meridiemVal });
          }
        }

        this.setState({
          value: val
        });
      }
    }

    /**
     * Handles change event on hour text input
     * @param {Event} e Change event
     * @private
     */

  }, {
    key: 'handleHourChange',
    value: function handleHourChange(value, e) {
      var _state = this.state,
          minuteText = _state.minuteText,
          meridiemVal = _state.meridiemVal;

      e.stopPropagation();
      var newValue = value;
      if (value.replace) {
        newValue = value.replace(/\D/g, '');
      }
      this.changeTime(newValue, minuteText, meridiemVal);
    }

    /**
     * Handles change event on minute text input
     * @param {Event} e Change event
     * @private
     */

  }, {
    key: 'handleMinuteChange',
    value: function handleMinuteChange(value, e) {
      var _state2 = this.state,
          hourText = _state2.hourText,
          meridiemVal = _state2.meridiemVal;

      e.stopPropagation();
      var newValue = value;
      if (value.replace) {
        newValue = value.replace(/\D/g, '');
      }
      this.changeTime(hourText, newValue, meridiemVal);
    }

    /**
     * Handles AM/PM Change
     * @param {Event} e Change event
     * @private
     */

  }, {
    key: 'handleMeridiemChange',
    value: function handleMeridiemChange(value, e) {
      var _state3 = this.state,
          hourText = _state3.hourText,
          minuteText = _state3.minuteText;

      this.changeTime(hourText, minuteText, value);
    }

    /**
     * Handles focus event on text input
     * @param {FocusEvent} e Focus event
     * @private
     */

  }, {
    key: 'handleFocus',
    value: function handleFocus(e) {
      this.setState({
        focused: true
      });
    }

    /**
     * Handles blur event on hour text input
     * @param {FocusEvent} e Blur event
     * @private
     */

  }, {
    key: 'handleHourBlur',
    value: function handleHourBlur(e) {
      var value = e.target.value;
      // normalize the hourText displayed in the input
      if (value.length <= 1) {
        value = '0' + value;
      }

      this.setState({
        hourText: value,
        focused: false
      });
    }

    /**
     * Handles blur event on minute text input
     * @param {FocusEvent} e Blur event
     * @private
     */

  }, {
    key: 'handleMinuteBlur',
    value: function handleMinuteBlur(e) {
      var value = e.target.value;
      // normalize the minuteText displayed in the input
      if (value.length <= 1) {
        value = '0' + value;
      }

      this.setState({
        minuteText: value,
        focused: false
      });
    }

    /**
     * Updates time based on hour and minute text values.
     * @param {String} hourText   Hour text value
     * @param {String} minuteText Minute text value
     * @param {String} meridiemVal    'am' or 'pm'
     * @private
     */

  }, {
    key: 'changeTime',
    value: function changeTime(hourText, minuteText, meridiemVal) {
      var _props = this.props,
          valueFormat = _props.valueFormat,
          onChange = _props.onChange;
      var _state4 = this.state,
          value = _state4.value,
          displayMeridiem = _state4.displayMeridiem;

      var meridiemOffset = displayMeridiem && meridiemVal === 'pm' ? 12 : 0;
      var hours = parseInt(hourText, 10);
      if (hours < 12) {
        hours += meridiemOffset;
      }
      var minutes = parseInt(minuteText, 10);

      var newTime = _moment3.default.isMoment(value) && value.clone();

      if (isNaN(hours) || isNaN(minutes)) {
        newTime = '';
      } else {
        if (!_moment3.default.isMoment(newTime)) {
          newTime = (0, _moment3.default)();
        }
        newTime.hour((0, _number.clamp)(hours, 0, 23));
        newTime.minute((0, _number.clamp)(minutes, 0, 59));
        newTime.second(0);
        newTime.millisecond(0);
      }
      this.setState({
        hourText: hourText,
        minuteText: minuteText,
        meridiemVal: meridiemVal,
        newTime: newTime
      });

      if (!('value' in this.props)) {
        this.setState({
          value: newTime
        });
      }

      var validMoment = _moment3.default.isMoment(newTime);

      if (newTime !== value) {
        onChange(validMoment ? (0, _moment.formatMoment)(newTime, valueFormat) : newTime, validMoment && newTime.toDate());
      }
    }

    /**
     * Sets focus to appropriate descendant.
     * @private
     */

  }, {
    key: 'focus',
    value: function focus() {
      if (document.activeElement !== this.minuteRef) {
        this.hourRef && this.hourRef.focus();
      }
    }

    /**
     * Returns concatentated string of the ids for elements that label the clock field inputs.
     * @param {String} labelId Field label id
     * @param {String} groupId Fieldset id
     * @return {String}   aria-labelledby string
     * @private
     */

  }, {
    key: 'getAriaLabelledbyForTextfield',
    value: function getAriaLabelledbyForTextfield(labelId, groupId) {
      var ariaLabel = this.props['aria-label'];
      var ariaLabelledby = this.props['aria-labelledby'];
      var ariaLabelledbyId = groupId;
      if (ariaLabel) {
        ariaLabelledbyId = groupId;
      }
      if (ariaLabelledby) {
        ariaLabelledbyId = ariaLabelledby;
      }
      return [ariaLabelledbyId, labelId].join(' ');
    }

    /**
     * Returns display hour for a given 24-hour value
     * @param {Number} hour Hour in range 0-23
     * @param {Boolean} displayMeridiem Output should be converted to 12-hour clock
     * @return {String} in range 1-12 (12-hour) or 0-23 (24-hour)
     * @private
     */

  }, {
    key: 'getDisplayHour',
    value: function getDisplayHour(hour, displayMeridiem) {
      var newHour = displayMeridiem ? (hour + 11) % 12 + 1 : hour;
      return newHour.toString();
    }

    /**
     * Returns localized label for AM/PM dropdown
     * @param {String} meridiem 'am' or 'pm'
     * @param {String} displayFormat from props
     * @return {String} in range 1-12 (12-hour) or 0-23 (24-hour)
     * @private
     */

  }, {
    key: 'getMeridiemLabel',
    value: function getMeridiemLabel(meridiem, displayFormat) {
      var localizedMeridiem = formatMessage(meridiem);
      var upperCase = /A/.test(displayFormat);
      return upperCase ? localizedMeridiem.toUpperCase() : localizedMeridiem;
    }

    /**
     * Returns AM/PM (meridiem) value for a given moment
     * @param {Object} moment
     * @return {String} 'am', 'pm', or '' (for invalid moment values)
     * @private
     */

  }, {
    key: 'getMeridiemVal',
    value: function getMeridiemVal(moment) {
      if (!moment || !moment.isValid()) {
        return '';
      } else {
        return moment.hour() >= 12 ? 'pm' : 'am';
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props2 = this.props,
          quiet = _props2.quiet,
          disabled = _props2.disabled,
          invalid = _props2.invalid,
          readOnly = _props2.readOnly,
          required = _props2.required,
          className = _props2.className,
          _props2$id = _props2.id,
          id = _props2$id === undefined ? this.clockId : _props2$id,
          displayFormat = _props2.displayFormat,
          otherProps = _objectWithoutProperties(_props2, ['quiet', 'disabled', 'invalid', 'readOnly', 'required', 'className', 'id', 'displayFormat']);

      var _state5 = this.state,
          hourText = _state5.hourText,
          minuteText = _state5.minuteText,
          meridiemVal = _state5.meridiemVal,
          newTime = _state5.newTime,
          value = _state5.value,
          focused = _state5.focused,
          displayMeridiem = _state5.displayMeridiem;

      var hourMax = displayMeridiem ? '12' : '23';
      var hourMin = displayMeridiem ? '1' : '0';
      var groupId = id + '-group';
      var timeLabelId = id + '-time-label';
      var ariaLabel = otherProps['aria-label'];
      var ariaLabelledby = otherProps['aria-labelledby'];
      var groupAriaLabel = null;
      var groupAriaLabelledby = null;
      var formattedMoment = (0, _moment.formatMoment)(newTime || value, displayFormat);

      if (ariaLabel) {
        groupAriaLabel = ariaLabel;
        groupAriaLabelledby = [groupId, timeLabelId].join(' ');
        delete otherProps['aria-label'];
      } else {
        groupAriaLabelledby = timeLabelId;
      }

      if (ariaLabelledby) {
        groupAriaLabelledby = [ariaLabelledby, timeLabelId].join(' ');
        delete otherProps['aria-labelledby'];
      }

      delete otherProps.valueFormat;
      delete otherProps.value;
      delete otherProps.defaultValue;

      // cant use input text with pattern to handle our validation
      // IE 11 requires that no two options in an alternation be able to start with the
      // same character (for the regex in a pattern attribute). If multiple options can
      // start with the same character (or blank), all but the first will be ignored
      // for that case.
      //
      // cant use input number by itself because IE 11 won't prevent other characters
      return _react2.default.createElement(
        'div',
        _extends({
          className: (0, _classnames2.default)('react-spectrum-Clock', className),
          'aria-disabled': disabled,
          'aria-invalid': invalid,
          role: 'group',
          id: groupId,
          'aria-label': groupAriaLabel,
          'aria-labelledby': groupAriaLabelledby
        }, (0, _filterDOMProps2.default)(otherProps)),
        _react2.default.createElement(
          'time',
          { id: timeLabelId, className: 'u-react-spectrum-screenReaderOnly', 'aria-live': focused ? 'polite' : 'off', hidden: !focused },
          formattedMoment
        ),
        _react2.default.createElement(_Textfield2.default, {
          ref: function ref(el) {
            return _this2.hourRef = el;
          },
          className: 'react-spectrum-Clock-hour',
          type: 'number',
          value: hourText,
          placeholder: 'HH',
          min: hourMin,
          max: hourMax,
          invalid: invalid,
          disabled: disabled,
          readOnly: readOnly,
          required: required,
          quiet: quiet,
          id: id,
          'aria-label': formatMessage('Hours'),
          'aria-labelledby': this.getAriaLabelledbyForTextfield(id, groupId),
          onFocus: this.handleFocus,
          onChange: this.handleHourChange,
          onBlur: this.handleHourBlur }),
        _react2.default.createElement(
          'span',
          { className: 'react-spectrum-Clock-divider' },
          ':'
        ),
        _react2.default.createElement(_Textfield2.default, {
          ref: function ref(el) {
            return _this2.minuteRef = el;
          },
          className: 'react-spectrum-Clock-minute',
          type: 'number',
          value: minuteText,
          placeholder: 'mm',
          min: '0',
          max: '59',
          invalid: invalid,
          disabled: disabled,
          readOnly: readOnly,
          required: required,
          quiet: quiet,
          id: id + '-minutes',
          'aria-label': formatMessage('Minutes'),
          'aria-labelledby': this.getAriaLabelledbyForTextfield(id + '-minutes', groupId),
          onFocus: this.handleFocus,
          onChange: this.handleMinuteChange,
          onBlur: this.handleMinuteBlur }),
        displayMeridiem && _react2.default.createElement(_Select2.default, {
          className: 'react-spectrum-Clock-meridiem',
          id: id + '-meridiem',
          'aria-label': formatMessage('AM/PM'),
          'aria-labelledby': this.getAriaLabelledbyForTextfield(id + '-meridiem', groupId),
          onChange: this.handleMeridiemChange,
          options: [{ label: this.getMeridiemLabel('am', displayFormat), value: 'am' }, { label: this.getMeridiemLabel('pm', displayFormat), value: 'pm' }],
          value: meridiemVal,
          alignRight: true,
          flexible: true })
      );
    }
  }]);

  return Clock;
}(_react.Component)) || _class;

Clock.displayName = 'Clock';
Clock.propTypes = {
  /**
   * Clock can accept a number of different value represenationas
   */
  value: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object, _propTypes2.default.number]),

  /**
   * Moment formats
   */
  valueFormat: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),

  /**
   * Moment formats
   */
  displayFormat: _propTypes2.default.string,

  /**
   * Removes borders around inputs
   */
  quiet: _propTypes2.default.bool,

  /**
   * Greys out the control and makes it so you can't interact with it
   */
  disabled: _propTypes2.default.bool,

  /**
   * Marks the input red as invalid input
   */
  invalid: _propTypes2.default.bool,

  /**
   * Makes it so the value can't be changed by the user
   */
  readOnly: _propTypes2.default.bool,

  /**
   * Mark a form input as required, also necessary for the form to be submitted
   */
  required: _propTypes2.default.bool,

  /**
   * Called when a breadcrumb is clicked with an object containing the label of the clicked breadcrumb
   * @callback Clock~onChange
   * @param {Object} event - Moment object
   */
  onChange: _propTypes2.default.func
};
Clock.defaultProps = {
  valueFormat: 'HH:mm',
  displayFormat: 'HH:mm',
  quiet: false,
  disabled: false,
  invalid: false,
  readOnly: false,
  required: false,
  onChange: function onChange() {}
};
exports.default = Clock;