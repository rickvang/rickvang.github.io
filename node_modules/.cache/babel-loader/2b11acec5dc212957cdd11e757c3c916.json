{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _class;\n\nvar _autobindDecorator = require('autobind-decorator');\n\nvar _autobindDecorator2 = _interopRequireDefault(_autobindDecorator);\n\nvar _Checkbox = require('../../Checkbox');\n\nvar _Checkbox2 = _interopRequireDefault(_Checkbox);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _createId = require('../../utils/createId');\n\nvar _createId2 = _interopRequireDefault(_createId);\n\nvar _FocusManager = require('../../utils/FocusManager');\n\nvar _FocusManager2 = _interopRequireDefault(_FocusManager);\n\nvar _focusRing = require('../../utils/focusRing');\n\nvar _focusRing2 = _interopRequireDefault(_focusRing);\n\nvar _intl = require('../../utils/intl');\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _TableCell = require('./TableCell');\n\nvar _TableCell2 = _interopRequireDefault(_TableCell);\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar intlMessages = {\n  'cs-CZ': _interopRequireDefault(require('./../intl/cs-CZ.json')).default,\n  'da-DK': _interopRequireDefault(require('./../intl/da-DK.json')).default,\n  'de-DE': _interopRequireDefault(require('./../intl/de-DE.json')).default,\n  'en-US': _interopRequireDefault(require('./../intl/en-US.json')).default,\n  'es-ES': _interopRequireDefault(require('./../intl/es-ES.json')).default,\n  'fi-FI': _interopRequireDefault(require('./../intl/fi-FI.json')).default,\n  'fr-FR': _interopRequireDefault(require('./../intl/fr-FR.json')).default,\n  'it-IT': _interopRequireDefault(require('./../intl/it-IT.json')).default,\n  'ja-JP': _interopRequireDefault(require('./../intl/ja-JP.json')).default,\n  'ko-KR': _interopRequireDefault(require('./../intl/ko-KR.json')).default,\n  'nb-NO': _interopRequireDefault(require('./../intl/nb-NO.json')).default,\n  'nl-NL': _interopRequireDefault(require('./../intl/nl-NL.json')).default,\n  'pl-PL': _interopRequireDefault(require('./../intl/pl-PL.json')).default,\n  'pt-BR': _interopRequireDefault(require('./../intl/pt-BR.json')).default,\n  'ru-RU': _interopRequireDefault(require('./../intl/ru-RU.json')).default,\n  'sv-SE': _interopRequireDefault(require('./../intl/sv-SE.json')).default,\n  'tr-TR': _interopRequireDefault(require('./../intl/tr-TR.json')).default,\n  'zh-CN': _interopRequireDefault(require('./../intl/zh-CN.json')).default,\n  'zh-TW': _interopRequireDefault(require('./../intl/zh-TW.json')).default\n};\nvar formatMessage = (0, _intl.messageFormatter)(intlMessages);\nvar FOCUSABLE_SELECTOR = '[tabIndex]:not([disabled]):not([aria-disabled])';\n\nvar TableRow = (0, _focusRing2.default)(_class = (0, _autobindDecorator2.default)(_class = function (_React$Component) {\n  _inherits(TableRow, _React$Component);\n\n  function TableRow(props) {\n    _classCallCheck(this, TableRow);\n\n    var _this = _possibleConstructorReturn(this, (TableRow.__proto__ || Object.getPrototypeOf(TableRow)).call(this, props));\n\n    _this.state = {\n      focused: false\n    };\n    _this.rowId = (0, _createId2.default)();\n    return _this;\n  }\n\n  _createClass(TableRow, [{\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      if ('focused' in nextProps) {\n        this.setState({\n          focused: nextProps.focused\n        });\n      }\n    }\n    /**\n     * Sets focus to the table row DOM element.\n     */\n\n  }, {\n    key: 'focus',\n    value: function focus() {\n      if (this.row) {\n        this.row.focus();\n      }\n    }\n  }, {\n    key: 'onCellClick',\n    value: function onCellClick(column, isDoubleClick) {\n      var rowIndex = null;\n\n      if (this.props.collectionView) {\n        var indexPath = this.props.collectionView.indexPathForComponent(this);\n        rowIndex = indexPath && indexPath.index;\n      }\n\n      if (!isDoubleClick && this.props.onCellClick) {\n        this.props.onCellClick(column, rowIndex);\n      }\n\n      if (isDoubleClick && this.props.onCellDoubleClick) {\n        this.props.onCellDoubleClick(column, rowIndex);\n      }\n    }\n    /**\n     * Handle click event on checkbox to toggle selection of row using keyboard.\n     * @param {MouseEvent} e Click event\n     */\n\n  }, {\n    key: 'onCheckboxClick',\n    value: function onCheckboxClick(e) {\n      // force selection of item in the selection view\n      var _props = this.props,\n          collectionView = _props.collectionView,\n          isHeaderRow = _props.isHeaderRow;\n\n      if (collectionView && !isHeaderRow) {\n        var indexPath = collectionView.indexPathForComponent(this);\n        collectionView.selectItem(indexPath, true, e.shiftKey, true);\n      }\n    }\n  }, {\n    key: 'onMouseDown',\n    value: function onMouseDown(event) {\n      // Stop propagation on mouse down if the target is focusable.\n      // Otherwise, collection-view will try to focus the row instead.\n      if (event.target.matches(FOCUSABLE_SELECTOR) && event.target !== this.row) {\n        event.stopPropagation();\n      }\n    }\n    /**\n     * Handle key down event on a row, to navigate between focusable descendant\n     * elements using the left or right arrow keys, or to navigate between the\n     * header row and the body using the down or up arrow keys.\n     * @param {KeyboardEvent} event A keydown event\n     */\n\n  }, {\n    key: 'onKeyDown',\n    value: function onKeyDown(event) {\n      var _props2 = this.props,\n          collectionView = _props2.collectionView,\n          isHeaderRow = _props2.isHeaderRow,\n          onSelectChange = _props2.onSelectChange;\n      var key = event.key;\n      var focusable = null;\n\n      switch (key) {\n        case 'ArrowUp':\n        case 'Up':\n          if (!isHeaderRow && collectionView) {\n            var indexPath = collectionView.indexPathForComponent(this);\n\n            if (indexPath && indexPath.section === 0 && indexPath.index === 0) {\n              focusable = collectionView.getDOMNode().previousSibling.querySelector(FOCUSABLE_SELECTOR);\n            }\n          }\n\n          break;\n\n        case 'ArrowDown':\n        case 'Down':\n          if (isHeaderRow) {\n            focusable = this.row.parentNode.nextSibling.querySelector(FOCUSABLE_SELECTOR);\n          }\n\n          break;\n\n        case 'a':\n          if ((event.metaKey || event.ctrlKey) && onSelectChange) {\n            onSelectChange(true);\n            event.preventDefault();\n            event.stopPropagation();\n          }\n\n          break;\n\n        case 'Escape':\n        case 'Esc':\n          if (onSelectChange) {\n            onSelectChange(false);\n          }\n\n          break;\n\n        case 'Enter':\n        case ' ':\n          // Stop propagation on enter and space keys if the target is focusable.\n          // Otherwise, collection-view will try to focus the row instead.\n          if (event.target.matches(FOCUSABLE_SELECTOR) && event.target !== this.row) {\n            event.stopPropagation();\n          }\n\n          break;\n      }\n\n      if (focusable) {\n        event.preventDefault();\n        event.stopPropagation();\n        focusable.focus();\n      }\n    }\n    /**\n     * Handles focus event on row, setting focused state and refreshing visible items in the collection.\n     */\n\n  }, {\n    key: 'onFocus',\n    value: function onFocus() {\n      this.setState({\n        focused: true\n      });\n    }\n    /**\n     * Handles blur event on row, setting focused state and refreshing visible items in the collection.\n     */\n\n  }, {\n    key: 'onBlur',\n    value: function onBlur() {\n      this.setState({\n        focused: false\n      });\n    }\n  }, {\n    key: 'getAriaLabelledby',\n    value: function getAriaLabelledby() {\n      var _props3 = this.props,\n          columns = _props3.columns,\n          isHeaderRow = _props3.isHeaderRow,\n          allowsSelection = _props3.allowsSelection,\n          _props3$id = _props3.id,\n          id = _props3$id === undefined ? this.rowId : _props3$id,\n          tableId = _props3.tableId;\n      var ariaLabelledby = null;\n\n      if (isHeaderRow && tableId) {\n        id = [tableId, 0].join('-');\n      }\n\n      ariaLabelledby = columns.map(function (column, i) {\n        if (allowsSelection) {\n          i += 1;\n        }\n\n        if (column.announce !== false) {\n          return [[tableId, 0, i].join('-'), [id, i].join('-')].join(' ');\n        }\n      }).join(' ');\n      return !isHeaderRow ? ariaLabelledby : null;\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _props4 = this.props,\n          columns = _props4.columns,\n          renderCell = _props4.renderCell,\n          _props4$selected = _props4.selected,\n          selected = _props4$selected === undefined ? false : _props4$selected,\n          _props4$focused = _props4.focused,\n          focused = _props4$focused === undefined ? false : _props4$focused,\n          isHeaderRow = _props4.isHeaderRow,\n          allowsSelection = _props4.allowsSelection,\n          onSelectChange = _props4.onSelectChange,\n          _props4$id = _props4.id,\n          id = _props4$id === undefined ? this.rowId : _props4$id,\n          tableId = _props4.tableId,\n          _props4$layoutInfo = _props4.layoutInfo,\n          layoutInfo = _props4$layoutInfo === undefined ? {} : _props4$layoutInfo,\n          collectionView = _props4.collectionView,\n          allowsMultipleSelection = _props4.allowsMultipleSelection,\n          otherProps = _objectWithoutProperties(_props4, ['columns', 'renderCell', 'selected', 'focused', 'isHeaderRow', 'allowsSelection', 'onSelectChange', 'id', 'tableId', 'layoutInfo', 'collectionView', 'allowsMultipleSelection']);\n\n      var index = layoutInfo.index;\n      var className = (0, _classnames2.default)('react-spectrum-TableView-row', {\n        'spectrum-Table-head': isHeaderRow,\n        'spectrum-Table-row': !isHeaderRow,\n        'is-selected': selected,\n        'is-focused': focused && this.state.focused,\n        'is-drop-target': this.props['drop-target']\n      });\n      var ariaRowIndex = null;\n      var tabIndex = null;\n      var indeterminate = null;\n\n      if (isHeaderRow && tableId) {\n        id = [tableId, 0].join('-');\n      }\n\n      if (collectionView) {\n        if (!isHeaderRow) {\n          ariaRowIndex = index;\n\n          if (ariaRowIndex !== null) {\n            ariaRowIndex += 2;\n          } // determine appropriate tabIndex for row depending on whether it is focused.\n\n\n          tabIndex = focused || !collectionView.focusedIndexPath ? 0 : -1;\n        } else {\n          indeterminate = !selected && collectionView.selectedIndexPaths.length > 0;\n        }\n      }\n\n      delete otherProps.onCellClick;\n      delete otherProps.onCellDoubleClick;\n      delete otherProps.onResize;\n      delete otherProps.reusableView;\n      delete otherProps.setSelectAll;\n      var checkboxCellClassNames = (0, _classnames2.default)('spectrum-Table-checkboxCell', 'react-spectrum-TableView-checkboxCell');\n      return _react2.default.createElement(_FocusManager2.default, {\n        itemSelector: FOCUSABLE_SELECTOR,\n        orientation: 'horizontal',\n        manageTabIndex: false,\n        includeSelf: true,\n        ignorePageUpPageDown: true\n      }, _react2.default.createElement('div', _extends({\n        className: className,\n        ref: function ref(row) {\n          return _this2.row = row;\n        },\n        id: id,\n        role: 'row',\n        tabIndex: tabIndex,\n        'aria-selected': allowsSelection ? selected : null,\n        'aria-rowindex': isHeaderRow ? 1 : ariaRowIndex,\n        'aria-labelledby': this.getAriaLabelledby(),\n        onFocus: this.onFocus,\n        onBlur: this.onBlur,\n        onKeyDown: this.onKeyDown,\n        onMouseDown: this.onMouseDown\n      }, otherProps), allowsSelection && _react2.default.createElement(_TableCell2.default, {\n        id: [id, 0].join('-'),\n        isHeaderRow: isHeaderRow,\n        className: checkboxCellClassNames,\n        'aria-colindex': '1',\n        'aria-label': isHeaderRow && allowsMultipleSelection === false ? formatMessage('Select') : null,\n        focused: focused\n      }, _react2.default.createElement(_Checkbox2.default, {\n        className: 'spectrum-Table-checkbox',\n        checked: selected,\n        indeterminate: indeterminate,\n        onChange: onSelectChange,\n        onClick: this.onCheckboxClick,\n        onMouseDown: function onMouseDown(e) {\n          return e.stopPropagation();\n        },\n        tabIndex: isHeaderRow || focused ? 0 : -1,\n        title: isHeaderRow ? formatMessage('Select All') : formatMessage('Select'),\n        style: isHeaderRow && !allowsMultipleSelection ? {\n          visibility: 'hidden'\n        } : null\n      })), columns.map(function (column, i) {\n        return _react2.default.cloneElement(renderCell(column, i, focused), {\n          key: i,\n          id: [id, allowsSelection ? i + 1 : i].join('-'),\n          'aria-colindex': allowsSelection ? i + 2 : i + 1,\n          onClick: _this2.onCellClick.bind(_this2, column, false),\n          onDoubleClick: _this2.onCellClick.bind(_this2, column, true),\n          rowFocused: focused\n        });\n      })));\n    }\n  }]);\n\n  return TableRow;\n}(_react2.default.Component)) || _class) || _class;\n\nexports.default = TableRow;","map":null,"metadata":{},"sourceType":"script"}