'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class;

var _autobindDecorator = require('autobind-decorator');

var _autobindDecorator2 = _interopRequireDefault(_autobindDecorator);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _filterDOMProps = require('../../utils/filterDOMProps');

var _filterDOMProps2 = _interopRequireDefault(_filterDOMProps);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

if (process.env.SCALE_MEDIUM && process.env.SCALE_LARGE) {
  require('../../spectrum-css/textfield/index.css');

  require('../../spectrum-css/textfield/index-diff.css');
} else if (process.env.SCALE_LARGE) {
  require('../../spectrum-css/textfield/index-lg.css');
} else {
  require('../../spectrum-css/textfield/index.css');
}

if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHT) require('../../spectrum-css/textfield/multiStops/light.css');
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARK) require('../../spectrum-css/textfield/multiStops/dark.css');
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHTEST) require('../../spectrum-css/textfield/multiStops/lightest.css');
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARKEST) require('../../spectrum-css/textfield/multiStops/darkest.css');

var Textfield = (0, _autobindDecorator2.default)(_class = function (_Component) {
  _inherits(Textfield, _Component);

  function Textfield() {
    _classCallCheck(this, Textfield);

    return _possibleConstructorReturn(this, (Textfield.__proto__ || Object.getPrototypeOf(Textfield)).apply(this, arguments));
  }

  _createClass(Textfield, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      if (this.props.autoFocus) {
        // wait a frame to make sure the textfield in the DOM and focusable
        requestAnimationFrame(function () {
          return _this2.focus();
        });
      }
    }
  }, {
    key: 'focus',
    value: function focus() {
      if (!this.props.disabled) {
        _reactDom2.default.findDOMNode(this).focus();
      }
    }
  }, {
    key: 'onChange',
    value: function onChange(e) {
      if (this.props.onChange) {
        this.props.onChange(e.target.value, e);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          className = _props.className,
          quiet = _props.quiet,
          disabled = _props.disabled,
          required = _props.required,
          invalid = _props.invalid,
          readOnly = _props.readOnly,
          multiLine = _props.multiLine,
          validationState = _props.validationState,
          otherProps = _objectWithoutProperties(_props, ['className', 'quiet', 'disabled', 'required', 'invalid', 'readOnly', 'multiLine', 'validationState']);

      var Tag = multiLine ? 'textarea' : 'input';

      var isInvalid = invalid || validationState === 'invalid';

      delete otherProps.autoFocus;
      delete otherProps.autocompleteInput;

      if (invalid) {
        console.warn('The "invalid" prop of Textfield is deprecated. Please use validationState="invalid" instead.');
      }

      return _react2.default.createElement(Tag, _extends({
        type: 'text',
        className: (0, _classnames2.default)('spectrum-Textfield', {
          'spectrum-Textfield--multiline': multiLine,
          'is-invalid': isInvalid,
          'is-valid': validationState === 'valid',
          'spectrum-Textfield--quiet': quiet
        }, className),
        disabled: disabled,
        required: required,
        readOnly: readOnly,
        'aria-invalid': isInvalid || null
      }, (0, _filterDOMProps2.default)(otherProps), {
        onChange: this.onChange }));
    }
  }]);

  return Textfield;
}(_react.Component)) || _class;

Textfield.propTypes = {
  /** Whether to automatically focus this text field */
  autoFocus: _propTypes2.default.bool,

  /** Custom CSS class to add to the text field */
  className: _propTypes2.default.string,

  /** Whether to disable the text field */
  disabled: _propTypes2.default.bool,

  /** Whether to show the warning icon and red border. DEPRECATED: use validationState instead */
  invalid: _propTypes2.default.bool,

  /** Function called when focus is taken away from the text field */
  onBlur: _propTypes2.default.func,

  /** Function called when the text field value is changed */
  onChange: _propTypes2.default.func,

  /** Function called when focus is put on the text field */
  onFocus: _propTypes2.default.func,

  /** String to show in the text field when nothing has been input */
  placeholder: _propTypes2.default.string,

  /** Whether the text field should render using a quiet variant */
  quiet: _propTypes2.default.bool,

  /** Whether the text field can only be read */
  readOnly: _propTypes2.default.bool,

  /** Whether the text field requires user input (shows warning if empty) */
  required: _propTypes2.default.bool,

  /** Show either checkmark or warning icons */
  validationState: _propTypes2.default.oneOf(['valid', 'invalid'])
};
Textfield.defaultProps = {
  autoFocus: false,
  disabled: false,
  quiet: false,
  required: false,
  invalid: false,
  readOnly: false
};
exports.default = Textfield;


Textfield.displayName = 'Textfield';