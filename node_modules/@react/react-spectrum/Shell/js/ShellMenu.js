'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _transition = require('../../utils/transition');

var _Portal = require('react-overlays/lib/Portal');

var _Portal2 = _interopRequireDefault(_Portal);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _RootCloseWrapper = require('react-overlays/lib/RootCloseWrapper');

var _RootCloseWrapper2 = _interopRequireDefault(_RootCloseWrapper);

require('../style/ShellMenu.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ShellMenu = function (_Component) {
  _inherits(ShellMenu, _Component);

  function ShellMenu(props) {
    _classCallCheck(this, ShellMenu);

    var _this = _possibleConstructorReturn(this, (ShellMenu.__proto__ || Object.getPrototypeOf(ShellMenu)).call(this, props));

    _initialiseProps.call(_this);

    var open = props.open,
        defaultOpen = props.defaultOpen;


    _this.state = {
      open: open !== undefined ? open : defaultOpen,
      visible: false
    };
    return _this;
  }

  _createClass(ShellMenu, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if ('open' in nextProps) {
        this.setState({ open: nextProps.open });
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this.menuRef) {
        this.menuRef.removeEventListener((0, _transition.getTransitionEvent)(), this.handleTransitionEnd);
      }
    }
  }, {
    key: 'bindMenuRef',
    value: function bindMenuRef(ref) {
      if (this.menuRef) {
        this.menuRef.removeEventListener((0, _transition.getTransitionEvent)(), this.handleTransitionEnd);
      }
      this.menuRef = ref;
      if (this.menuRef) {
        this.menuRef.addEventListener((0, _transition.getTransitionEvent)(), this.handleTransitionEnd);
      }
    }
  }, {
    key: 'setOpen',
    value: function setOpen(open) {
      if (!('open' in this.props)) {
        this.setState({ open: open });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          placement = _props.placement,
          animateFrom = _props.animateFrom,
          full = _props.full,
          dark = _props.dark,
          top = _props.top,
          target = _props.target,
          children = _props.children;
      var _state = this.state,
          open = _state.open,
          visible = _state.visible;

      var zIndex = void 0;
      if (open) {
        zIndex = top ? 10018 : 10015;
      } else {
        zIndex = top ? 10017 : 10010;
      }

      return _react2.default.createElement(
        'span',
        null,
        _react2.default.createElement(
          'span',
          { ref: function ref(el) {
              _this2.targetRef = el;
            } },
          _react2.default.cloneElement(target, { onClick: this.handleTargetClick })
        ),
        _react2.default.createElement(
          _Portal2.default,
          null,
          _react2.default.createElement(
            _RootCloseWrapper2.default,
            { onRootClose: this.handleMenuClose, disabled: !open },
            _react2.default.createElement(
              'div',
              {
                ref: function ref(el) {
                  _this2.bindMenuRef(el);
                },
                style: { zIndex: zIndex },
                className: (0, _classnames2.default)('coral3-Shell-menu', 'coral3-Shell-menu--placement-' + placement, 'coral3-Shell-menu--from-' + animateFrom, {
                  'coral3-Shell-menu--full': full,
                  'is-open': open,
                  'coral--dark': dark,
                  'is-visible': open || visible
                }) },
              children
            )
          )
        )
      );
    }
  }]);

  return ShellMenu;
}(_react.Component);

ShellMenu.defaultProps = {
  defaultOpen: false,
  placement: 'right', // top, right
  animateFrom: 'right', // top, right
  full: false,
  dark: false,
  top: false, // if true, appears on top of the other menus
  onOpen: function onOpen() {},
  onClose: function onClose() {},
  onVisible: function onVisible() {},
  onHidden: function onHidden() {}
};

var _initialiseProps = function _initialiseProps() {
  var _this3 = this;

  this.handleTransitionEnd = function (e) {
    if (e.propertyName !== 'transform') {
      return;
    }

    var _props2 = _this3.props,
        onVisible = _props2.onVisible,
        onHidden = _props2.onHidden;
    var open = _this3.state.open;


    if (open) {
      onVisible();
    } else {
      onHidden();
    }
    _this3.setState({ visible: open });
  };

  this.handleMenuToggle = function (e) {
    var open = _this3.state.open;


    if (open) {
      _this3.handleMenuClose(e);
    } else {
      _this3.handleMenuOpen(e);
    }
  };

  this.handleTargetClick = function (e) {
    var open = _this3.state.open;
    // If it's already open, close it.

    if (open) {
      _this3.handleMenuClose();
    } else {
      _this3.handleMenuOpen();
    }
    e.preventDefault();
  };

  this.handleMenuOpen = function () {
    var _props3 = _this3.props,
        onOpen = _props3.onOpen,
        index = _props3.index;

    _this3.setOpen(true);
    onOpen(index);
  };

  this.handleMenuClose = function () {
    var _props4 = _this3.props,
        onClose = _props4.onClose,
        index = _props4.index;


    _this3.setOpen(false);
    onClose(index);
  };
};

exports.default = ShellMenu;


ShellMenu.displayName = 'ShellMenu';