'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class;

var _autobindDecorator = require('autobind-decorator');

var _autobindDecorator2 = _interopRequireDefault(_autobindDecorator);

var _Autocomplete = require('../../Autocomplete');

var _Autocomplete2 = _interopRequireDefault(_Autocomplete);

var _Button = require('../../Button');

var _Button2 = _interopRequireDefault(_Button);

var _events = require('../../utils/events');

var _ChevronDownMedium = require('../../Icon/core/ChevronDownMedium');

var _ChevronDownMedium2 = _interopRequireDefault(_ChevronDownMedium);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _createId = require('../../utils/createId');

var _createId2 = _interopRequireDefault(_createId);

var _intl = require('../../utils/intl');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Textfield = require('../../Textfield');

var _Textfield2 = _interopRequireDefault(_Textfield);

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var intlMessages = {
  'cs-CZ': _interopRequireDefault(require('./../intl/cs-CZ.json')).default,
  'da-DK': _interopRequireDefault(require('./../intl/da-DK.json')).default,
  'de-DE': _interopRequireDefault(require('./../intl/de-DE.json')).default,
  'en-US': _interopRequireDefault(require('./../intl/en-US.json')).default,
  'es-ES': _interopRequireDefault(require('./../intl/es-ES.json')).default,
  'fi-FI': _interopRequireDefault(require('./../intl/fi-FI.json')).default,
  'fr-FR': _interopRequireDefault(require('./../intl/fr-FR.json')).default,
  'it-IT': _interopRequireDefault(require('./../intl/it-IT.json')).default,
  'ja-JP': _interopRequireDefault(require('./../intl/ja-JP.json')).default,
  'ko-KR': _interopRequireDefault(require('./../intl/ko-KR.json')).default,
  'nb-NO': _interopRequireDefault(require('./../intl/nb-NO.json')).default,
  'nl-NL': _interopRequireDefault(require('./../intl/nl-NL.json')).default,
  'pl-PL': _interopRequireDefault(require('./../intl/pl-PL.json')).default,
  'pt-BR': _interopRequireDefault(require('./../intl/pt-BR.json')).default,
  'ru-RU': _interopRequireDefault(require('./../intl/ru-RU.json')).default,
  'sv-SE': _interopRequireDefault(require('./../intl/sv-SE.json')).default,
  'tr-TR': _interopRequireDefault(require('./../intl/tr-TR.json')).default,
  'zh-CN': _interopRequireDefault(require('./../intl/zh-CN.json')).default,
  'zh-TW': _interopRequireDefault(require('./../intl/zh-TW.json')).default
};

if (process.env.SCALE_MEDIUM && process.env.SCALE_LARGE) {
  require('../../spectrum-css/inputgroup/index.css');

  require('../../spectrum-css/inputgroup/index-diff.css');
} else if (process.env.SCALE_LARGE) {
  require('../../spectrum-css/inputgroup/index-lg.css');
} else {
  require('../../spectrum-css/inputgroup/index.css');
}

if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHT) require('../../spectrum-css/inputgroup/multiStops/light.css');
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARK) require('../../spectrum-css/inputgroup/multiStops/dark.css');
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHTEST) require('../../spectrum-css/inputgroup/multiStops/lightest.css');
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARKEST) require('../../spectrum-css/inputgroup/multiStops/darkest.css');


var getLabel = function getLabel(o) {
  return typeof o === 'string' ? o : o.label;
};
var formatMessage = (0, _intl.messageFormatter)(intlMessages);

var ComboBox = (0, _autobindDecorator2.default)(_class = function (_React$Component) {
  _inherits(ComboBox, _React$Component);

  function ComboBox(props) {
    _classCallCheck(this, ComboBox);

    var _this = _possibleConstructorReturn(this, (ComboBox.__proto__ || Object.getPrototypeOf(ComboBox)).call(this, props));

    _this.state = {
      open: false,
      count: null
    };

    _this.setAutocompleteRef = function (a) {
      return _this.autocomplete = a;
    };

    _this.setTextFieldRef = function (t) {
      return _this.textfield = t;
    };

    _this.comboBoxId = (0, _createId2.default)();
    return _this;
  }

  _createClass(ComboBox, [{
    key: 'onButtonClick',
    value: function onButtonClick() {
      this.textfield.focus();
      this.autocomplete.toggleMenu();
    }
  }, {
    key: 'getCompletions',
    value: function getCompletions(text) {
      if (this.shouldFilter(text)) {
        // show options that start with the text first, then
        // show other options containing the text
        return this.props.options.filter(function (option) {
          return getLabel(option).toLowerCase().includes(text.toLowerCase());
        }).sort(function (a, b) {
          var aStartsWithText = getLabel(a).toLowerCase().startsWith(text.toLowerCase());
          var bStartsWithText = getLabel(b).toLowerCase().startsWith(text.toLowerCase());

          if (aStartsWithText && !bStartsWithText) {
            return -1;
          }

          if (!aStartsWithText && bStartsWithText) {
            return 1;
          }

          return 0;
        });
      }

      return this.props.options;
    }
  }, {
    key: 'shouldFilter',
    value: function shouldFilter(text) {
      // if any input has been made since we opened the menu, let's filter
      if (this.changeSinceOpen) {
        return true;
      }

      // if the current value isn't in the list, let's filter
      return !this.props.options.some(function (o) {
        return getLabel(o) === text;
      });
    }
  }, {
    key: 'onMenuShow',
    value: function onMenuShow() {
      this.setState({ open: true });
    }
  }, {
    key: 'onMenuHide',
    value: function onMenuHide() {
      this.changeSinceOpen = false;
      this.setState({ open: false });
    }
  }, {
    key: 'onChange',
    value: function onChange(value) {
      this.changeSinceOpen = true;
      var count = value ? this.getCompletions(value).length : null;
      this.setState({ count: count });
    }
  }, {
    key: 'getButtonLabel',
    value: function getButtonLabel() {
      var options = this.props.options;
      var count = this.state.count;

      var key = 'Show suggestions';

      if (count === null && options.length > 0) {
        count = options.length;
      }

      if (count === 0) {
        key = 'No matching results';
      } else if (count > 1) {
        key = 'Show {0} suggestions';
      } else if (count === 1) {
        key = 'Show suggestion';
      }

      return formatMessage(key, [count]);
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          _props$id = _props.id,
          id = _props$id === undefined ? this.comboBoxId : _props$id,
          className = _props.className,
          value = _props.value,
          disabled = _props.disabled,
          required = _props.required,
          invalid = _props.invalid,
          quiet = _props.quiet,
          onChange = _props.onChange,
          onSelect = _props.onSelect,
          props = _objectWithoutProperties(_props, ['id', 'className', 'value', 'disabled', 'required', 'invalid', 'quiet', 'onChange', 'onSelect']);

      return _react2.default.createElement(
        _Autocomplete2.default,
        {
          className: (0, _classnames2.default)('spectrum-InputGroup', {
            'spectrum-InputGroup--quiet': quiet
          }, className),
          ref: this.setAutocompleteRef,
          getCompletions: this.getCompletions,
          value: value,
          onChange: (0, _events.chain)(onChange, this.onChange),
          onSelect: onSelect,
          onMenuShow: this.onMenuShow,
          onMenuHide: this.onMenuHide },
        _react2.default.createElement(_Textfield2.default, _extends({
          className: (0, _classnames2.default)('spectrum-InputGroup-field')
        }, props, {
          id: id,
          ref: this.setTextFieldRef,
          disabled: disabled,
          required: required,
          invalid: invalid,
          autocompleteInput: true,
          quiet: quiet })),
        _react2.default.createElement(
          _Button2.default,
          {
            id: id + '-button',
            type: 'button',
            variant: 'field',
            onClick: this.onButtonClick,
            onMouseDown: function onMouseDown(e) {
              return e.preventDefault();
            },
            onMouseUp: function onMouseUp(e) {
              return e.preventDefault();
            },
            disabled: disabled,
            required: required,
            invalid: invalid,
            quiet: quiet,
            selected: this.state.open,
            'aria-label': this.getButtonLabel(),
            'aria-labelledby': id + ' ' + id + '-button',
            tabIndex: '-1' },
          _react2.default.createElement(_ChevronDownMedium2.default, { size: null, className: 'spectrum-InputGroup-icon' })
        )
      );
    }
  }]);

  return ComboBox;
}(_react2.default.Component)) || _class;

ComboBox.defaultProps = {
  options: [],
  disabled: false,
  required: false,
  invalid: false,
  quiet: false
};
exports.default = ComboBox;