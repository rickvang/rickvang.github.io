{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/**\n * Describes a view to be dragged or dropped.\n */\n\n\nvar DragTarget = function () {\n  /**\n   * @param {string} type the type of view being dragged or dropped\n   * @param {IndexPath} indexPath the IndexPath of the view being dragged or dropped\n   * @param {string} [dropPosition=DROP_BETWEEN] The position of the drop. Either DROP_BETWEEN or DROP_ON.\n   */\n  function DragTarget(type, indexPath) {\n    var dropPosition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DragTarget.DROP_BETWEEN;\n\n    _classCallCheck(this, DragTarget);\n    /**\n     * The type of view being dragged or dropped\n     * @type {string}\n     */\n\n\n    this.type = type;\n    /**\n     * The IndexPath of the view being dragged or dropped\n     * @type {IndexPath}\n     */\n\n    this.indexPath = indexPath;\n    /**\n     * The position of the drop. Either DROP_BETWEEN or DROP_ON. DROP_BETWEEN by default.\n     * @type {string}\n     */\n\n    this.dropPosition = dropPosition;\n  }\n  /**\n   * Returns whether this DragTarget is equal to another one\n   * @param {DragTarget} other the target to compare\n   * @return {boolean}\n   */\n\n\n  _createClass(DragTarget, [{\n    key: 'equals',\n    value: function equals(other) {\n      return other instanceof DragTarget && other.type === this.type && other.dropPosition === this.dropPosition && other.indexPath.equals(this.indexPath);\n    }\n    /**\n     * Returns a copy of this drag target.\n     * @return {DragTarget}\n     */\n\n  }, {\n    key: 'copy',\n    value: function copy() {\n      return new DragTarget(this.type, this.indexPath.copy(), this.dropPosition);\n    }\n  }]);\n\n  return DragTarget;\n}();\n\nDragTarget.DROP_BETWEEN = 'DROP_BETWEEN';\nDragTarget.DROP_ON = 'DROP_ON';\nexports.default = DragTarget;","map":null,"metadata":{},"sourceType":"script"}