'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class;

var _autobindDecorator = require('autobind-decorator');

var _autobindDecorator2 = _interopRequireDefault(_autobindDecorator);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _filterDOMProps = require('../../utils/filterDOMProps');

var _filterDOMProps2 = _interopRequireDefault(_filterDOMProps);

var _ImageCache = require('./ImageCache');

var _ImageCache2 = _interopRequireDefault(_ImageCache);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

require('../style/index.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DEFAULT_STATE = {
  src: '',
  loaded: false,
  isPlaceholder: false
};

var Image = (0, _autobindDecorator2.default)(_class = function (_React$Component) {
  _inherits(Image, _React$Component);

  function Image() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Image);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Image.__proto__ || Object.getPrototypeOf(Image)).call.apply(_ref, [this].concat(args))), _this), _this.state = DEFAULT_STATE, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Image, [{
    key: 'reset',
    value: function reset() {
      this.setState(DEFAULT_STATE);
    }
  }, {
    key: 'loadImage',
    value: function loadImage(src, placeholder) {
      var _this2 = this;

      if (!this.props.cache && !this.props.headers) {
        this.setState({
          src: src,
          loaded: false,
          isPlaceholder: false
        });

        return;
      }

      this._src = src;
      var fromCache = _ImageCache2.default.has(src);

      if (_ImageCache2.default.has(placeholder) && !fromCache) {
        this.setState({
          src: _ImageCache2.default.getCached(placeholder),
          loaded: false,
          isPlaceholder: true
        });
      }

      this._loadCallback = function (err, url) {
        // Ignore result if the image src changed while
        // loading, or the component was unmounted.
        if (_this2._src !== src || !_this2.mounted) {
          return;
        }

        // Handle loading errors
        if (err) {
          return _this2.onError(err);
        }

        // Update the state. Mark as already loaded if it was from the cache.
        _this2.setState({
          src: url,
          loaded: fromCache,
          isPlaceholder: _this2.state.isPlaceholder && !fromCache
        });
      };

      _ImageCache2.default.get(src, { headers: this.props.headers || {} }, this._loadCallback);
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.mounted = true;
      this.loadImage(this.props.src, this.props.placeholder);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      _ImageCache2.default.abort(this.props.src, this._loadCallback);
      this.mounted = false;
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(props) {
      if (props.src !== this.props.src) {
        _ImageCache2.default.abort(this.props.src, this._loadCallback);
        this.reset();
        this.loadImage(props.src, props.placeholder);
      }
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      this.onLoad();
    }
  }, {
    key: 'isImageLoaded',
    value: function isImageLoaded() {
      var image = this.imgRef;
      if (!image || !image.complete) {
        return false;
      }

      if (typeof image.naturalWidth !== 'undefined' && image.naturalWidth === 0) {
        return false;
      }

      return true;
    }
  }, {
    key: 'onLoad',
    value: function onLoad() {
      var _this3 = this;

      if (this.props.onLoad && this.isImageLoaded()) {
        requestAnimationFrame(function () {
          // Image could have been unmounted or changed between frames, so double check it is still there.
          if (_this3.isImageLoaded()) {
            _this3.props.onLoad(_this3.imgRef);
          }
        });
      }

      if (!this.state.loaded && this.isImageLoaded()) {
        this.setState({ loaded: true, isPlaceholder: false });
      }
    }
  }, {
    key: 'onError',
    value: function onError(err) {
      if (this.props.onError) {
        this.props.onError(err);
      }

      if (this.state.src) {
        this.reset();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this4 = this;

      var _props = this.props,
          alt = _props.alt,
          className = _props.className,
          decorative = _props.decorative,
          otherProps = _objectWithoutProperties(_props, ['alt', 'className', 'decorative']);

      var _state = this.state,
          loaded = _state.loaded,
          isPlaceholder = _state.isPlaceholder,
          src = _state.src;


      if (decorative) {
        alt = '';
      }

      if (alt == null) {
        console.warn('Neither the `alt` prop or `decorative` were provided to an image. ' + 'Add `alt` text for screen readers, or enable the `decorative` prop to indicate that the image ' + 'is decorative or redundant with displayed text and should not be annouced by screen readers.');
      }

      return _react2.default.createElement('img', _extends({}, (0, _filterDOMProps2.default)(otherProps), {
        className: (0, _classnames2.default)(className, 'react-spectrum-Image', {
          'is-loaded': loaded,
          'is-placeholder': isPlaceholder
        }),
        src: src,
        onLoad: this.onLoad,
        onError: this.onError,
        ref: function ref(r) {
          return _this4.imgRef = r;
        },
        alt: alt }));
    }
  }]);

  return Image;
}(_react2.default.Component)) || _class;

Image.propTypes = {
  /** The image url **/
  src: _propTypes2.default.string.isRequired,

  /** Placeholder image to display while the fullsize one is loading, if cached. */
  placeholder: _propTypes2.default.string,

  /** HTTP headers to add to the request for the asset image */
  headers: _propTypes2.default.object,

  /** Whether to use the image cache for the image */
  cache: _propTypes2.default.bool,

  /** Alternate content for screen readers */
  alt: _propTypes2.default.string,

  /** Whether the image is being used for decoration and should not be announced by screen readers */
  decorative: _propTypes2.default.bool,

  /** Load callback triggered when images load */
  onLoad: _propTypes2.default.func
};
Image.defaultProps = {
  cache: false
};
exports.default = Image;