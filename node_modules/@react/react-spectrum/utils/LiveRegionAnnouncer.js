'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LiveRegionMessage = exports.MessageBlock = exports.LiveRegion = exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

require('./style/index.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* Inspired by https://github.com/AlmeroSteyn/react-aria-live */
var liveRegionAnnouncer = null;
var node = null;
var clearAssertiveTimeoutId = null;
var clearPoliteTimeoutId = null;
var LIVEREGION_TIMEOUT_DELAY = 1000;

var LiveRegionAnnouncer = function (_Component) {
  _inherits(LiveRegionAnnouncer, _Component);

  function LiveRegionAnnouncer() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, LiveRegionAnnouncer);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = LiveRegionAnnouncer.__proto__ || Object.getPrototypeOf(LiveRegionAnnouncer)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      assertiveMessage: '',
      politeMessage: ''
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(LiveRegionAnnouncer, [{
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (node) {
        document.body.removeChild(node);
      }
      liveRegionAnnouncer = null;
      node = null;
    }
  }, {
    key: 'render',
    value: function render() {
      var _state = this.state,
          assertiveMessage = _state.assertiveMessage,
          politeMessage = _state.politeMessage;

      return _react2.default.createElement(LiveRegion, {
        assertiveMessage: assertiveMessage,
        politeMessage: politeMessage });
    }
  }], [{
    key: 'getInstance',
    value: function getInstance(callback, context) {
      if (!liveRegionAnnouncer) {
        node = document.createElement('div');
        document.body.appendChild(node);
        _reactDom2.default.render(_react2.default.createElement(LiveRegionAnnouncer, { ref: function ref(l) {
            return liveRegionAnnouncer = l;
          } }), node, callback);
      } else if (callback) {
        callback();
      }
      return liveRegionAnnouncer;
    }
  }, {
    key: 'destroyInstance',
    value: function destroyInstance(callback) {
      if (liveRegionAnnouncer) {
        liveRegionAnnouncer.setState({
          assertiveMessage: '',
          politeMessage: ''
        }, function () {
          var instanceNode = _reactDom2.default.findDOMNode(liveRegionAnnouncer);
          instanceNode && _reactDom2.default.unmountComponentAtNode(instanceNode.parentNode);
          if (callback) {
            // wait a frame for component to unmount
            setTimeout(callback, 50);
          }
        });
      }
    }
  }, {
    key: 'announceAssertive',
    value: function announceAssertive(message) {
      var timeoutDuration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : LIVEREGION_TIMEOUT_DELAY;

      if (clearAssertiveTimeoutId) {
        clearTimeout(clearAssertiveTimeoutId);
        clearAssertiveTimeoutId = null;
      }
      LiveRegionAnnouncer.getInstance(function () {
        return liveRegionAnnouncer.setState({
          assertiveMessage: message
        }, function () {
          if (message !== '') {
            clearAssertiveTimeoutId = setTimeout(function () {
              return LiveRegionAnnouncer.clearMessage('assertive');
            }, timeoutDuration);
          }
        });
      });
    }
  }, {
    key: 'announcePolite',
    value: function announcePolite(message) {
      var timeoutDuration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : LIVEREGION_TIMEOUT_DELAY;

      if (clearPoliteTimeoutId) {
        clearTimeout(clearPoliteTimeoutId);
        clearPoliteTimeoutId = null;
      }
      LiveRegionAnnouncer.getInstance(function () {
        return liveRegionAnnouncer.setState({
          politeMessage: message
        }, function () {
          if (message !== '') {
            clearPoliteTimeoutId = setTimeout(function () {
              return LiveRegionAnnouncer.clearMessage('polite');
            }, timeoutDuration);
          }
        });
      });
    }
  }, {
    key: 'clearMessage',
    value: function clearMessage(politeness) {
      LiveRegionAnnouncer.getInstance(function () {
        if (!politeness) {
          LiveRegionAnnouncer.announceAssertive('');
          LiveRegionAnnouncer.announcePolite('');
        } else {
          liveRegionAnnouncer.setState(_defineProperty({}, politeness + 'Message', ''));
        }
      });
    }
  }]);

  return LiveRegionAnnouncer;
}(_react.Component);

exports.default = LiveRegionAnnouncer;

var LiveRegion = exports.LiveRegion = function (_Component2) {
  _inherits(LiveRegion, _Component2);

  function LiveRegion() {
    var _ref2;

    var _temp2, _this2, _ret2;

    _classCallCheck(this, LiveRegion);

    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    return _ret2 = (_temp2 = (_this2 = _possibleConstructorReturn(this, (_ref2 = LiveRegion.__proto__ || Object.getPrototypeOf(LiveRegion)).call.apply(_ref2, [this].concat(args))), _this2), _this2.state = {
      assertiveMessage1: '',
      assertiveMessage2: '',
      politeMessage1: '',
      politeMessage2: ''
    }, _this2.useAlternatePolite = false, _this2.useAlternateAssertive = false, _temp2), _possibleConstructorReturn(_this2, _ret2);
  }

  _createClass(LiveRegion, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var _props = this.props,
          oldAssertiveMessage = _props.assertiveMessage,
          oldPoliteMessage = _props.politeMessage;
      var assertiveMessage = nextProps.assertiveMessage,
          politeMessage = nextProps.politeMessage;


      if (oldPoliteMessage !== politeMessage) {
        this.setState({
          politeMessage1: this.useAlternatePolite ? '' : politeMessage,
          politeMessage2: this.useAlternatePolite ? politeMessage : ''
        });
        this.useAlternatePolite = !this.useAlternatePolite;
      }

      if (oldAssertiveMessage !== assertiveMessage) {
        this.setState({
          assertiveMessage1: this.useAlternateAssertive ? '' : assertiveMessage,
          assertiveMessage2: this.useAlternateAssertive ? assertiveMessage : ''
        });
        this.useAlternateAssertive = !this.useAlternateAssertive;
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _state2 = this.state,
          assertiveMessage1 = _state2.assertiveMessage1,
          assertiveMessage2 = _state2.assertiveMessage2,
          politeMessage1 = _state2.politeMessage1,
          politeMessage2 = _state2.politeMessage2;

      return _react2.default.createElement(
        'div',
        { className: 'u-react-spectrum-screenReaderOnly' },
        _react2.default.createElement(MessageBlock, { 'aria-live': 'assertive', message: assertiveMessage1 }),
        _react2.default.createElement(MessageBlock, { 'aria-live': 'assertive', message: assertiveMessage2 }),
        _react2.default.createElement(MessageBlock, { 'aria-live': 'polite', message: politeMessage1 }),
        _react2.default.createElement(MessageBlock, { 'aria-live': 'polite', message: politeMessage2 })
      );
    }
  }]);

  return LiveRegion;
}(_react.Component);

LiveRegion.propTypes = {
  assertiveMessage: _propTypes2.default.string,
  politeMessage: _propTypes2.default.string
};
var MessageBlock = exports.MessageBlock = function MessageBlock(_ref3) {
  var message = _ref3.message,
      ariaLive = _ref3['aria-live'];
  return _react2.default.createElement(
    'div',
    {
      className: 'u-react-spectrum-screenReaderOnly',
      'aria-live': ariaLive,
      'aria-relevant': 'additions',
      'aria-atomic': 'true' },
    message || ''
  );
};

MessageBlock.propTypes = {
  message: _propTypes2.default.string,
  'aria-live': _propTypes2.default.string.isRequired
};

var LiveRegionMessage = exports.LiveRegionMessage = function (_Component3) {
  _inherits(LiveRegionMessage, _Component3);

  function LiveRegionMessage() {
    _classCallCheck(this, LiveRegionMessage);

    return _possibleConstructorReturn(this, (LiveRegionMessage.__proto__ || Object.getPrototypeOf(LiveRegionMessage)).apply(this, arguments));
  }

  _createClass(LiveRegionMessage, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.announce();
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps) {
      if (this.props.message !== prevProps.message) {
        this.announce();
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this.props.clearOnUnmount) {
        LiveRegionAnnouncer.clearMessage();
      }
    }
  }, {
    key: 'announce',
    value: function announce() {
      var _props2 = this.props,
          message = _props2.message,
          ariaLive = _props2['aria-live'];

      if (ariaLive === 'assertive') {
        LiveRegionAnnouncer.announceAssertive(message || '');
      }
      if (ariaLive === 'polite') {
        LiveRegionAnnouncer.announcePolite(message || '');
      }
    }
  }, {
    key: 'render',
    value: function render() {
      return null;
    }
  }]);

  return LiveRegionMessage;
}(_react.Component);

LiveRegionMessage.propTypes = {
  message: _propTypes2.default.string.isRequired,
  'aria-live': _propTypes2.default.string.isRequired,
  clearOnUnmount: _propTypes2.default.bool
};