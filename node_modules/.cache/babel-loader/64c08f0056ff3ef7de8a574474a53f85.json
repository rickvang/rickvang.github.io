{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _View2 = require('./View');\n\nvar _View3 = _interopRequireDefault(_View2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/**\n * {@link CollectionView} creates instances of the {@link ReusableView} class to\n * represent views currently being displayed. ReusableViews manage a DOM node, handle\n * applying {@link LayoutInfo} objects to the view, and render content\n * as needed. Subclasses must implement the {@link render} method at a\n * minimum. Other methods can be overrided to customize behavior.\n */\n\n\nvar ReusableView = function (_View) {\n  _inherits(ReusableView, _View);\n\n  function ReusableView() {\n    _classCallCheck(this, ReusableView);\n\n    var _this = _possibleConstructorReturn(this, (ReusableView.__proto__ || Object.getPrototypeOf(ReusableView)).call(this));\n\n    _this.viewType = null;\n    /**\n     * The LayoutInfo this view is currently representing.\n     * @type {LayoutInfo}\n     */\n\n    _this.layoutInfo = null;\n    /**\n     * The CollectionView currently displaying this view.\n     * @type {CollectionView}\n     */\n\n    _this.collectionView = null;\n    /**\n     * The content currently being displayed by this view, set by the collection view.\n     */\n\n    _this.content = null;\n    _this.contentChanged = false;\n\n    _this.css({\n      position: 'absolute',\n      overflow: 'hidden',\n      top: 0,\n      left: 0,\n      transition: 'all',\n      WebkitTransition: 'all',\n      WebkitTransitionDuration: 'inherit',\n      transitionDuration: 'inherit'\n    }); // set WAI-ARIA role=\"presentation\", item role should be set in the item renderer\n\n\n    _this.setAttribute('role', 'presentation');\n\n    return _this;\n  }\n  /**\n   * Applies the given LayoutInfo to the view.\n   * If overridden, subclasses must call super.\n   * @param {LayoutInfo} layoutInfo - The LayoutInfo to apply\n   */\n\n\n  _createClass(ReusableView, [{\n    key: 'applyLayoutInfo',\n    value: function applyLayoutInfo(layoutInfo) {\n      if (!layoutInfo) {\n        return;\n      }\n\n      var transform = 'translate3d(' + layoutInfo.rect.x + 'px, ' + layoutInfo.rect.y + 'px, 0)';\n\n      if (layoutInfo.transform) {\n        transform += ' ' + layoutInfo.transform;\n      }\n\n      this.css({\n        width: layoutInfo.rect.width + 'px',\n        height: layoutInfo.rect.height + 'px',\n        opacity: layoutInfo.opacity,\n        zIndex: layoutInfo.zIndex,\n        WebkitTransform: transform,\n        transform: transform\n      });\n      this.layoutInfo = layoutInfo;\n    }\n    /**\n     * Prepares the view for reuse. Called just before the view is removed from the DOM.\n     */\n\n  }, {\n    key: 'prepareForReuse',\n    value: function prepareForReuse() {\n      this.content = null;\n      this.layoutInfo = null;\n    }\n    /**\n     * Sets the content currently being displayed by the view and re-renders.\n     */\n\n  }, {\n    key: 'setContent',\n    value: function setContent(content) {\n      this.content = content;\n      this.contentChanged = true;\n      this.flushUpdates();\n    }\n  }, {\n    key: 'renderChildren',\n    value: function renderChildren(context) {\n      if (this.contentChanged) {\n        this.render(context);\n        this.contentChanged = false;\n      }\n    }\n    /**\n     * Renders the view. Must be implemented by subclasses.\n     * @abstract\n     */\n\n  }, {\n    key: 'render',\n    value: function render(context) {\n      throw new Error('Subclasses must implement render');\n    }\n    /**\n     * Applies a state to the view, such as a selected state.\n     * The default implementation applies CSS classes.\n     * @param {string} state\n     */\n\n  }, {\n    key: 'addState',\n    value: function addState(state) {\n      this.addClass(state);\n    }\n    /**\n     * Removes a state from the view, such as a selected state.\n     * The default implementation removes CSS classes.\n     * @param {string} state\n     */\n\n  }, {\n    key: 'removeState',\n    value: function removeState(state) {\n      this.removeClass(state);\n    }\n    /**\n     * Sets whether the given state is applied.\n     * @param {string} state\n     * @param {boolean} enabled\n     */\n\n  }, {\n    key: 'setState',\n    value: function setState(state, enabled) {\n      if (enabled) {\n        this.addState(state);\n      } else {\n        this.removeState(state);\n      }\n    }\n    /**\n     * Sets focus to first child element of view if it is focusable.\n     */\n\n  }, {\n    key: 'focus',\n    value: function focus() {\n      var node = this.backendView && this.getDOMNode().firstChild;\n\n      if (node && typeof node.focus === 'function') {\n        node.focus();\n      }\n    }\n  }]);\n\n  return ReusableView;\n}(_View3.default);\n\nexports.default = ReusableView;","map":null,"metadata":{},"sourceType":"script"}