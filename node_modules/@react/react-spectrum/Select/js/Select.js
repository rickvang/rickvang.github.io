'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class;

exports.SelectMenu = SelectMenu;

var _Alert = require('../../Icon/Alert');

var _Alert2 = _interopRequireDefault(_Alert);

var _autobindDecorator = require('autobind-decorator');

var _autobindDecorator2 = _interopRequireDefault(_autobindDecorator);

var _Button = require('../../Button');

var _Button2 = _interopRequireDefault(_Button);

var _ChevronDownMedium = require('../../Icon/core/ChevronDownMedium');

var _ChevronDownMedium2 = _interopRequireDefault(_ChevronDownMedium);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _createId = require('../../utils/createId');

var _createId2 = _interopRequireDefault(_createId);

var _Dropdown = require('../../Dropdown');

var _Dropdown2 = _interopRequireDefault(_Dropdown);

var _filterDOMProps = require('../../utils/filterDOMProps');

var _filterDOMProps2 = _interopRequireDefault(_filterDOMProps);

var _Popover = require('../../Popover');

var _Popover2 = _interopRequireDefault(_Popover);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _SelectList = require('../../SelectList');

var _SelectList2 = _interopRequireDefault(_SelectList);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

if (process.env.SCALE_MEDIUM && process.env.SCALE_LARGE) {
  require('../../spectrum-css/dropdown/index.css');

  require('../../spectrum-css/dropdown/index-diff.css');
} else if (process.env.SCALE_LARGE) {
  require('../../spectrum-css/dropdown/index-lg.css');
} else {
  require('../../spectrum-css/dropdown/index.css');
}

if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHT) require('../../spectrum-css/dropdown/multiStops/light.css');
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARK) require('../../spectrum-css/dropdown/multiStops/dark.css');
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHTEST) require('../../spectrum-css/dropdown/multiStops/lightest.css');
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARKEST) require('../../spectrum-css/dropdown/multiStops/darkest.css');

require('../style/index.css');

var POPOVER_MAX_WIDTH = null;

var Select = (0, _autobindDecorator2.default)(_class = function (_React$Component) {
  _inherits(Select, _React$Component);

  function Select(props) {
    _classCallCheck(this, Select);

    var _this = _possibleConstructorReturn(this, (Select.__proto__ || Object.getPrototypeOf(Select)).call(this, props));

    var value = null;
    if ('value' in props) {
      value = props.value;
    } else if ('defaultValue' in props) {
      value = props.defaultValue;
    } else if (props.multiple) {
      value = [];
    } else {
      var opt = props.options && props.options[0];
      value = opt ? opt.value : null;
    }

    _this.state = { value: value };
    _this.selectId = (0, _createId2.default)();
    return _this;
  }

  _createClass(Select, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(props) {
      if ('value' in props && props.value !== this.state.value) {
        this.setState({ value: props.value });
      }
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      if (POPOVER_MAX_WIDTH == null) {
        // Render a fake popover we can measure the styles of, place it inside ourselves
        // so it gets styles dictated by the current scale
        var dummyPopover = document.createElement('div');
        dummyPopover.className = 'spectrum-Dropdown-popover';
        document.body.appendChild(dummyPopover);
        POPOVER_MAX_WIDTH = parseInt(window.getComputedStyle(dummyPopover).maxWidth, 10);
        document.body.removeChild(dummyPopover);
      }

      window.addEventListener('resize', this.updateSize);
      this.updateSize();
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      window.removeEventListener('resize', this.updateSize);
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      this.updateSize();
    }
  }, {
    key: 'updateSize',
    value: function updateSize() {
      if (this.button) {
        var width = _reactDom2.default.findDOMNode(this.button).offsetWidth;
        if (width !== this.state.width) {
          this.setState({ width: width });
        }
      }
    }
  }, {
    key: 'onSelect',
    value: function onSelect(value) {
      if (!('value' in this.props)) {
        this.setState({ value: value });
      }

      if (this.props.onChange) {
        this.props.onChange(value);
      }
    }
  }, {
    key: 'onClose',
    value: function onClose() {
      _reactDom2.default.findDOMNode(this.button).focus();
      if (typeof this.props.onClose === 'function') {
        this.props.onClose();
      }
    }
  }, {
    key: 'onOpen',
    value: function onOpen(e) {
      this.updateSize();
      if (typeof this.props.onOpen === 'function') {
        this.props.onOpen(e);
      }
    }
  }, {
    key: 'onKeyDown',
    value: function onKeyDown(e) {
      switch (e.key) {
        case 'Enter':
        case 'ArrowDown':
        case 'Space':
          e.preventDefault();
          this.button.onClick();
          break;
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          _props$options = _props.options,
          options = _props$options === undefined ? [] : _props$options,
          quiet = _props.quiet,
          closeOnSelect = _props.closeOnSelect,
          menuClassName = _props.menuClassName,
          _props$disabled = _props.disabled,
          disabled = _props$disabled === undefined ? false : _props$disabled,
          _props$invalid = _props.invalid,
          invalid = _props$invalid === undefined ? false : _props$invalid,
          _props$multiple = _props.multiple,
          multiple = _props$multiple === undefined ? false : _props$multiple,
          _props$required = _props.required,
          required = _props$required === undefined ? false : _props$required,
          _props$flexible = _props.flexible,
          flexible = _props$flexible === undefined ? false : _props$flexible,
          _props$placeholder = _props.placeholder,
          placeholder = _props$placeholder === undefined ? 'Select an option' : _props$placeholder,
          className = _props.className,
          _props$flip = _props.flip,
          flip = _props$flip === undefined ? true : _props$flip,
          alignRight = _props.alignRight,
          labelId = _props.labelId,
          _props$id = _props.id,
          id = _props$id === undefined ? this.selectId : _props$id,
          icon = _props.icon,
          otherProps = _objectWithoutProperties(_props, ['options', 'quiet', 'closeOnSelect', 'menuClassName', 'disabled', 'invalid', 'multiple', 'required', 'flexible', 'placeholder', 'className', 'flip', 'alignRight', 'labelId', 'id', 'icon']);

      var value = this.state.value;


      var ariaLabelledby = '';
      var valueId = this.selectId + '-value';
      if (otherProps['aria-labelledby']) {
        ariaLabelledby = otherProps['aria-labelledby'] + ' ' + valueId;
        delete otherProps['aria-labelledby'];
      } else if (otherProps['aria-label']) {
        ariaLabelledby = id + ' ' + valueId;
      } else if (labelId) {
        ariaLabelledby = labelId + ' ' + valueId;
      } else {
        ariaLabelledby = valueId;
      }

      var label = placeholder;
      if (!multiple) {
        var selectedOption = options.find(function (o) {
          return o.value === value;
        });
        label = selectedOption ? selectedOption.label : placeholder;
        icon = selectedOption && selectedOption.icon;
      }

      closeOnSelect = typeof closeOnSelect === 'boolean' ? closeOnSelect : !multiple;

      // Pass ARIA props to the button, and others to the Dropdown.
      var domProps = Object.entries((0, _filterDOMProps2.default)(otherProps));
      var buttonProps = domProps.filter(function (x) {
        return (/^aria-.*$/.test(x[0])
        );
      }).reduce(function (o, i) {
        return o[i[0]] = i[1], o;
      }, {});
      var dropdownProps = domProps.filter(function (x) {
        return !/^aria-.*$/.test(x[0]);
      }).reduce(function (o, i) {
        return o[i[0]] = i[1], o;
      }, {});

      return _react2.default.createElement(
        _Dropdown2.default,
        _extends({
          className: (0, _classnames2.default)('spectrum-Dropdown', {
            'spectrum-Dropdown--quiet': quiet,
            'react-spectrum-Dropdown-fixed': quiet && !flexible,
            'react-spectrum-Dropdown-flexible': flexible,
            'is-disabled': disabled,
            'is-invalid': invalid
          }, className),
          closeOnSelect: closeOnSelect,
          onSelect: this.onSelect,
          onOpen: this.onOpen,
          onClose: this.onClose,
          alignRight: alignRight,
          flip: flip
        }, dropdownProps),
        _react2.default.createElement(
          _Button2.default,
          _extends({
            className: 'spectrum-Dropdown-trigger',
            type: 'button',
            variant: 'field',
            'aria-haspopup': 'listbox',
            quiet: quiet,
            disabled: disabled,
            invalid: invalid,
            ref: function ref(b) {
              return _this2.button = b;
            },
            onKeyDown: this.onKeyDown,
            'aria-labelledby': ariaLabelledby,
            id: id,
            icon: icon
          }, buttonProps),
          _react2.default.createElement(
            'span',
            {
              id: valueId,
              className: (0, _classnames2.default)('spectrum-Dropdown-label', { 'is-placeholder': label === placeholder }) },
            label
          ),
          invalid && _react2.default.createElement(_Alert2.default, { size: 'S' }),
          _react2.default.createElement(_ChevronDownMedium2.default, { size: null, className: 'spectrum-Dropdown-icon' })
        ),
        _react2.default.createElement(SelectMenu, {
          dropdownMenu: true,
          className: menuClassName,
          options: options,
          value: value,
          multiple: multiple,
          disabled: disabled,
          invalid: invalid,
          required: required,
          style: {
            minWidth: quiet && flexible ? null : this.state.width,
            maxWidth: this.state.width > POPOVER_MAX_WIDTH ? this.state.width : null
          },
          autoFocus: true })
      );
    }
  }]);

  return Select;
}(_react2.default.Component)) || _class;

Select.propTypes = {
  closeOnSelect: _propTypes2.default.bool,
  menuClassName: _propTypes2.default.string
};
exports.default = Select;
function SelectMenu(_ref) {
  var onClose = _ref.onClose,
      onOpen = _ref.onOpen,
      onSelect = _ref.onSelect,
      className = _ref.className,
      open = _ref.open,
      placement = _ref.placement,
      style = _ref.style,
      closeOnSelect = _ref.closeOnSelect,
      props = _objectWithoutProperties(_ref, ['onClose', 'onOpen', 'onSelect', 'className', 'open', 'placement', 'style', 'closeOnSelect']);

  return _react2.default.createElement(
    _Popover2.default,
    {
      isDialog: false,
      placement: placement,
      open: open,
      onClose: onClose,
      onOpen: onOpen,
      style: style,
      className: 'spectrum-Dropdown-popover',
      closeOnSelect: closeOnSelect },
    _react2.default.createElement(_SelectList2.default, _extends({}, props, { className: className, onChange: onSelect, onTab: function onTab(e) {
        return e.preventDefault();
      } }))
  );
}