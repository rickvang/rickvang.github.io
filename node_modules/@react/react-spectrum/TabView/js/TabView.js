'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class;

var _array = require('../../utils/array');

var _autobindDecorator = require('autobind-decorator');

var _autobindDecorator2 = _interopRequireDefault(_autobindDecorator);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _createId = require('../../utils/createId');

var _createId2 = _interopRequireDefault(_createId);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _TabList = require('../../TabList');

require('../style/index.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TabView = (0, _autobindDecorator2.default)(_class = function (_React$Component) {
  _inherits(TabView, _React$Component);

  function TabView(props) {
    _classCallCheck(this, TabView);

    var _this = _possibleConstructorReturn(this, (TabView.__proto__ || Object.getPrototypeOf(TabView)).call(this, props));

    _this.tabViewId = (0, _createId2.default)();
    _this.state = {
      selectedIndex: props.selectedIndex || 0
    };
    return _this;
  }

  _createClass(TabView, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(props) {
      // Reset selected index when children change
      var oldChildren = _react2.default.Children.toArray(this.props.children).map(function (child) {
        return child.key;
      });
      var newChildren = _react2.default.Children.toArray(props.children).map(function (child) {
        return child.key;
      });

      if (props.selectedIndex !== this.props.selectedIndex || !(0, _array.arraysEqual)(oldChildren, newChildren)) {
        this.setState({
          selectedIndex: props.selectedIndex || 0
        });
      }
    }
  }, {
    key: 'onChange',
    value: function onChange(selectedIndex) {
      if (this.props.selectedIndex == null) {
        this.setState({ selectedIndex: selectedIndex });
      }

      if (this.props.onSelect) {
        this.props.onSelect(selectedIndex);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          className = _props.className,
          _props$id = _props.id,
          id = _props$id === undefined ? this.tabViewId : _props$id,
          _props$orientation = _props.orientation,
          orientation = _props$orientation === undefined ? 'horizontal' : _props$orientation,
          props = _objectWithoutProperties(_props, ['className', 'id', 'orientation']);

      var tabId = id + '-tab';
      var tabPanelId = id + '-tabpanel';

      var children = _react2.default.Children.map(this.props.children, function (c, i) {
        return (typeof c === 'undefined' ? 'undefined' : _typeof(c)) === 'object' && c ? _react2.default.cloneElement(c, {
          'aria-controls': tabPanelId,
          id: tabId + '-' + i,
          renderChildren: false
        }) : c;
      });

      // Clone children so that they get componentWillReceiveProps when clicking on the same tab
      var selected = children[this.state.selectedIndex];
      var body = _react2.default.Children.map(selected.props.children, function (c) {
        return (typeof c === 'undefined' ? 'undefined' : _typeof(c)) === 'object' && c ? _react2.default.cloneElement(c) : c;
      });

      return _react2.default.createElement(
        'div',
        { className: (0, _classnames2.default)('react-spectrum-TabView', 'react-spectrum-TabView--' + orientation, className) },
        _react2.default.createElement(
          _TabList.TabList,
          _extends({}, props, {
            orientation: orientation,
            selectedIndex: this.state.selectedIndex,
            onChange: this.onChange }),
          children
        ),
        _react2.default.createElement(
          'div',
          { className: 'react-spectrum-TabView-body', role: 'tabpanel', id: tabPanelId, 'aria-labelledby': selected.props.id },
          body
        )
      );
    }
  }]);

  return TabView;
}(_react2.default.Component)) || _class;

TabView.propTypes = {
  /** Class to add to the tab view */
  className: _propTypes2.default.string,

  /** Id for tab view */
  id: _propTypes2.default.string,

  /** Function called when a tab is selected */
  onSelect: _propTypes2.default.func,

  /** Tab orientation */
  orientation: _propTypes2.default.oneOf(['vertical', 'horizontal']),

  /** Selected tab */
  selectedIndex: _propTypes2.default.number
};
TabView.defaultProps = {
  id: (0, _createId2.default)(),
  orientation: 'horizontal'
};
exports.default = TabView;