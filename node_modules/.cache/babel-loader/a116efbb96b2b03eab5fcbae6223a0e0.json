{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _class;\n\nvar _autobindDecorator = require('autobind-decorator');\n\nvar _autobindDecorator2 = _interopRequireDefault(_autobindDecorator);\n\nvar _Autocomplete = require('../../Autocomplete');\n\nvar _Autocomplete2 = _interopRequireDefault(_Autocomplete);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _TagList = require('../../TagList');\n\nvar _Textfield = require('../../Textfield');\n\nvar _Textfield2 = _interopRequireDefault(_Textfield);\n\nrequire('../style/index.css');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar TagField = (0, _autobindDecorator2.default)(_class = function (_React$Component) {\n  _inherits(TagField, _React$Component);\n\n  function TagField() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, TagField);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = TagField.__proto__ || Object.getPrototypeOf(TagField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n      value: '',\n      tags: _this.props.value || []\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(TagField, [{\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(props) {\n      var _this2 = this;\n\n      if (props.value && props.value !== this.state.value) {\n        var deleting = props.value.length < this.state.tags.length;\n\n        var hadFocus = this.taglist && _reactDom2.default.findDOMNode(this).contains(document.activeElement);\n\n        this.setState({\n          tags: props.value\n        }, function () {\n          return hadFocus && _this2.focus(deleting);\n        });\n      }\n    }\n  }, {\n    key: 'onTextfieldChange',\n    value: function onTextfieldChange(value) {\n      this.setState({\n        value: value\n      });\n    }\n  }, {\n    key: 'onSelect',\n    value: function onSelect(value) {\n      value = value.label || value;\n\n      if (!value || !this.props.allowDuplicates && this.state.tags.includes(value)) {\n        return;\n      }\n\n      this.setState({\n        value: ''\n      });\n      var tags = [].concat(_toConsumableArray(this.state.tags), [value]);\n      this.onChange(tags);\n    }\n  }, {\n    key: 'onRemove',\n    value: function onRemove(value) {\n      var tags = this.state.tags.filter(function (t) {\n        return t !== value;\n      });\n      this.onChange(tags);\n    }\n  }, {\n    key: 'focus',\n    value: function focus(deleting) {\n      if (this.taglist) {\n        var dom = _reactDom2.default.findDOMNode(this.taglist);\n\n        if (!dom.contains(document.activeElement)) {\n          var nodes = dom.querySelectorAll('[role=row]');\n\n          if (nodes.length && deleting) {\n            nodes[nodes.length - 1].focus();\n          } else {\n            this.textfield.focus();\n          }\n        }\n      }\n    }\n  }, {\n    key: 'onChange',\n    value: function onChange(tags) {\n      var _this3 = this;\n\n      if (this.props.value == null) {\n        var deleting = tags.length < this.state.tags.length;\n        this.setState({\n          tags: tags\n        }, function () {\n          return _this3.focus(deleting);\n        });\n      }\n\n      if (this.props.onChange) {\n        this.props.onChange(tags);\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this4 = this;\n\n      var _props = this.props,\n          getCompletions = _props.getCompletions,\n          allowCreate = _props.allowCreate,\n          disabled = _props.disabled,\n          invalid = _props.invalid,\n          quiet = _props.quiet,\n          className = _props.className,\n          props = _objectWithoutProperties(_props, ['getCompletions', 'allowCreate', 'disabled', 'invalid', 'quiet', 'className']);\n\n      var _state = this.state,\n          value = _state.value,\n          tags = _state.tags;\n      delete props.onChange;\n      return _react2.default.createElement(_Autocomplete2.default, {\n        className: (0, _classnames2.default)('react-spectrum-TagField', 'spectrum-Textfield', {\n          'spectrum-Textfield--quiet': quiet,\n          'react-spectrum-TagField--quiet': quiet,\n          'is-disabled': disabled,\n          'is-invalid': invalid\n        }, className),\n        getCompletions: getCompletions,\n        allowCreate: allowCreate,\n        onSelect: this.onSelect,\n        value: value,\n        onChange: this.onTextfieldChange\n      }, _react2.default.createElement(_TagList.TagList, {\n        ref: function ref(tl) {\n          return _this4.taglist = tl;\n        },\n        disabled: disabled,\n        onClose: this.onRemove,\n        values: tags.map(function (tag) {\n          return tag.label || tag;\n        }),\n        'aria-labelledby': this.props['aria-labelledby'],\n        'aria-label': this.props['aria-label']\n      }), _react2.default.createElement(_Textfield2.default, _extends({\n        ref: function ref(tf) {\n          return _this4.textfield = tf;\n        },\n        className: 'react-spectrum-TagField-input',\n        autocompleteInput: true,\n        disabled: disabled\n      }, props)));\n    }\n  }]);\n\n  return TagField;\n}(_react2.default.Component)) || _class;\n\nTagField.propTypes = {\n  /** Allow tag creation in tag field */\n  allowCreate: _propTypes2.default.bool,\n\n  /** Class to add to the tag field */\n  className: _propTypes2.default.string,\n\n  /** Whether the tag field is disabled */\n  disabled: _propTypes2.default.bool,\n\n  /** Function to retrieve autocomplete options */\n  getCompletions: _propTypes2.default.func,\n\n  /** Whether to disable the invalid icon and styling */\n  invalid: _propTypes2.default.bool,\n\n  /** Whether to use the quiet styling for the tag field */\n  quiet: _propTypes2.default.bool\n};\nTagField.defaultProps = {\n  allowCreate: true\n};\nexports.default = TagField;","map":null,"metadata":{},"sourceType":"script"}