{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _filterDOMProps = require('../../utils/filterDOMProps');\n\nvar _filterDOMProps2 = _interopRequireDefault(_filterDOMProps);\n\nvar _FocusManager = require('../../utils/FocusManager');\n\nvar _FocusManager2 = _interopRequireDefault(_FocusManager);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nif (process.env.SCALE_MEDIUM && process.env.SCALE_LARGE) {\n  require('../../spectrum-css/buttongroup/index.css');\n\n  require('../../spectrum-css/buttongroup/index-diff.css');\n} else if (process.env.SCALE_LARGE) {\n  require('../../spectrum-css/buttongroup/index-lg.css');\n} else {\n  require('../../spectrum-css/buttongroup/index.css');\n}\n\nvar BUTTONGROUP_ITEM_SELECTOR = '.spectrum-ButtonGroup-item:not([disabled]):not([aria-disabled])';\nvar BUTTONGROUP_SELECTED_ITEM_SELECTOR = BUTTONGROUP_ITEM_SELECTOR + '[aria-checked=true].is-selected';\nvar ALLOWED_BUTTON_VARIANTS = {\n  tool: true,\n  action: true\n};\n\nvar ButtonGroup = function (_Component) {\n  _inherits(ButtonGroup, _Component);\n\n  function ButtonGroup(props) {\n    _classCallCheck(this, ButtonGroup);\n\n    var _this = _possibleConstructorReturn(this, (ButtonGroup.__proto__ || Object.getPrototypeOf(ButtonGroup)).call(this, props));\n\n    _this.state = {\n      value: props.value\n    };\n    return _this;\n  }\n\n  _createClass(ButtonGroup, [{\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(props) {\n      if (props.value && props.value !== this.state.value) {\n        this.setState({\n          value: props.value\n        });\n      }\n    }\n  }, {\n    key: 'addSelection',\n    value: function addSelection(button) {\n      return [].concat(_toConsumableArray(this.state.value || []), [button.value]);\n    }\n  }, {\n    key: 'removeSelection',\n    value: function removeSelection(button) {\n      var value = this.state.value || [];\n      var index = value.indexOf(button.value);\n      return [].concat(_toConsumableArray(value.slice(0, index)), _toConsumableArray(value.slice(index + 1, value.length)));\n    }\n  }, {\n    key: 'handleSelect',\n    value: function handleSelect(button, e) {\n      if (!this.props.readOnly && !button.readOnly) {\n        var nextButtons = void 0;\n\n        if (this.props.multiple) {\n          if (this.isSelected(button)) {\n            nextButtons = this.removeSelection(button);\n          } else {\n            nextButtons = this.addSelection(button);\n          }\n        } else {\n          nextButtons = button.value;\n        } // Set state if in uncontrolled mode\n\n\n        if (!('value' in this.props)) {\n          this.setState({\n            value: nextButtons\n          });\n        }\n\n        if (this.props.onChange) {\n          this.props.onChange(nextButtons, e);\n        }\n      }\n\n      if (this.props.onClick) {\n        this.props.onClick(button.value, e);\n      }\n    }\n    /**\n     * @private\n     * Evaluates whether button element is selected.\n     * @param   {Object}  button Button properties object\n     * @returns {Boolean} true if button is selected\n     */\n\n  }, {\n    key: 'isSelected',\n    value: function isSelected(button) {\n      if (this.props.readOnly) {\n        return null;\n      }\n\n      return this.props.multiple ? this.state.value && this.state.value.indexOf(button.value) >= 0 : this.state.value === button.value;\n    }\n    /**\n     * @private\n     * The role to be used by buttons within the group. If the button group is readOnly,\n     * button should retain their implicit role of button. With multiple selection, buttons\n     * should have role of checkbox, and with single selection buttons should have role of radio.\n     * @returns {String} role of buttons within group, either null, radio or checkbox.\n     */\n\n  }, {\n    key: 'getChildRole',\n    value: function getChildRole() {\n      if (this.props.readOnly) {\n        return null;\n      }\n\n      return this.props.multiple ? 'checkbox' : 'radio';\n    }\n  }, {\n    key: 'getChildProps',\n    value: function getChildProps(button, index) {\n      var invalid = this.props.invalid || button.props.invalid;\n      var required = this.props.required || button.props.required;\n      var disabled = this.props.disabled || button.props.disabled;\n      var selected = this.isSelected(button.props);\n      var role = this.getChildRole();\n      var onClick = !disabled ? this.handleSelect.bind(this, button.props) : null;\n      var allowedVariant = ALLOWED_BUTTON_VARIANTS[button.props.variant];\n      return {\n        className: (0, _classnames2.default)('spectrum-ButtonGroup-item'),\n        selected: selected,\n        disabled: disabled,\n        variant: allowedVariant ? button.props.variant : 'action',\n        quiet: allowedVariant ? button.props.quiet : true,\n        onClick: onClick,\n        onKeyDown: button.props.onKeyDown,\n        role: role,\n        'aria-checked': selected,\n        'aria-invalid': invalid,\n        'aria-required': required\n      };\n    }\n  }, {\n    key: 'renderButtons',\n    value: function renderButtons() {\n      var _this2 = this;\n\n      var children = this.props.children;\n      return _react2.default.Children.map(children, function (child, index) {\n        return child ? _react2.default.cloneElement(child, _this2.getChildProps(child, index)) : null;\n      });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          _props$children = _props.children,\n          children = _props$children === undefined ? [] : _props$children,\n          className = _props.className,\n          multiple = _props.multiple,\n          disabled = _props.disabled,\n          readOnly = _props.readOnly,\n          invalid = _props.invalid,\n          required = _props.required,\n          orientation = _props.orientation,\n          otherProps = _objectWithoutProperties(_props, ['children', 'className', 'multiple', 'disabled', 'readOnly', 'invalid', 'required', 'orientation']);\n\n      delete otherProps.onChange;\n      delete otherProps.onClick;\n\n      if (!readOnly && !multiple) {\n        // With single-selection, the wrapper element should have role=radiogroup.\n        otherProps.role = 'radiogroup';\n      } else if (readOnly || children.length > 2) {\n        // With readOnly and more than one button, the wrapper element should have role=toolbar, otherwise with less than two items or multi-selection, use role=group.\n        otherProps.role = readOnly && children.length > 2 ? 'toolbar' : 'group';\n      }\n\n      return _react2.default.createElement(_FocusManager2.default, {\n        itemSelector: BUTTONGROUP_ITEM_SELECTOR,\n        selectedItemSelector: BUTTONGROUP_SELECTED_ITEM_SELECTOR,\n        orientation: otherProps.role === 'toolbar' ? orientation : 'both'\n      }, _react2.default.createElement('div', _extends({\n        'aria-invalid': invalid || null,\n        'aria-required': required || null,\n        'aria-disabled': disabled || null,\n        'aria-orientation': orientation !== 'both' && otherProps.role === 'toolbar' ? orientation : null\n      }, (0, _filterDOMProps2.default)(otherProps), {\n        className: (0, _classnames2.default)('spectrum-ButtonGroup', {\n          'spectrum-ButtonGroup--vertical': orientation === 'vertical'\n        }, className)\n      }), this.renderButtons(children)));\n    }\n  }]);\n\n  return ButtonGroup;\n}(_react.Component);\n\nButtonGroup.propTypes = {\n  /**\n   * All buttons in ButtonGroup are disabled, greyed out and cannot be interacted with.\n   */\n  disabled: _propTypes2.default.bool,\n\n  /**\n   * Will override all child buttons invalid\n   */\n  invalid: _propTypes2.default.bool,\n\n  /**\n   * Allows multi select\n   */\n  multiple: _propTypes2.default.bool,\n\n  /**\n   * Won't allow a permanent selection\n   */\n  readOnly: _propTypes2.default.bool,\n\n  /**\n   * Will override all child buttons required\n   */\n  required: _propTypes2.default.bool,\n\n  /**\n   * Called whenever a button is selected (non-readonly mode)\n   */\n  onChange: _propTypes2.default.func,\n\n  /**\n   * Called whenever a button is clicked (readonly mode)\n   */\n  onClick: _propTypes2.default.func,\n\n  /**\n   * Renders the button group as a row or a column\n   */\n  orientation: _propTypes2.default.oneOf(['horizontal', 'vertical', 'both'])\n};\nButtonGroup.defaultProps = {\n  disabled: false,\n  invalid: false,\n  multiple: false,\n  readOnly: false,\n  required: false,\n  orientation: 'both'\n};\nexports.default = ButtonGroup;","map":null,"metadata":{},"sourceType":"script"}