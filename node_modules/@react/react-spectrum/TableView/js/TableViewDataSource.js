'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _collectionView = require('@react/collection-view');

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*
 * TableViewDataSource is the super class for all data sources used by TableView.
 * @deprecated
 */
var TableViewDataSource = function (_DataSource) {
  _inherits(TableViewDataSource, _DataSource);

  function TableViewDataSource() {
    _classCallCheck(this, TableViewDataSource);

    var _this = _possibleConstructorReturn(this, (TableViewDataSource.__proto__ || Object.getPrototypeOf(TableViewDataSource)).call(this));

    console.warn('TableViewDataSource is deprecated and will be removed in the next major version of react-spectrum. Please switch to the new TableView API using ListDataSource. See http://react-spectrum.corp.adobe.com/components/TableView for details.');
    _this.columns = _this.getColumns();
    _this.sortColumn = null;
    _this.sortDir = -1;
    return _this;
  }

  _createClass(TableViewDataSource, [{
    key: 'getNumberOfSections',
    value: function getNumberOfSections() {
      return 1;
    }
  }, {
    key: 'getSectionLength',
    value: function getSectionLength(section) {
      return this.getNumberOfRows(section);
    }
  }, {
    key: 'getItem',
    value: function getItem(section, index) {
      var _this2 = this;

      return this.columns.map(function (column) {
        return _this2.getCell(column, index, section);
      });
    }

    /**
     * Returns a list of columns in the TableView
     * @return {object[]}
     * @abstract
     */

  }, {
    key: 'getColumns',
    value: function getColumns() {
      throw new Error('getColumns must be implemented by subclasses');
    }

    /**
     * Returns the number of rows in the TableView
     * @return {number}
     * @abstract
     */

  }, {
    key: 'getNumberOfRows',
    value: function getNumberOfRows(section) {
      throw new Error('getNumberOfRows must be implemented by subclasses');
    }

    /**
     * Returns the data for a cell in the TableView
     * @return {any}
     * @abstract
     */

  }, {
    key: 'getCell',
    value: function getCell(column, row, section) {
      throw new Error('getCell must be implemented by subclasses');
    }
  }, {
    key: 'getSectionHeader',
    value: function getSectionHeader(section) {
      return null;
    }
  }, {
    key: 'performSort',
    value: function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(sortDescriptor) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this.sortColumn = sortDescriptor.column;
                this.sortDir = sortDescriptor.direction;
                this.sort(this.sortColumn, this.sortDir);

              case 3:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function performSort(_x) {
        return _ref.apply(this, arguments);
      }

      return performSort;
    }()
  }, {
    key: 'performLoad',
    value: function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function performLoad() {
        return _ref2.apply(this, arguments);
      }

      return performLoad;
    }()
  }, {
    key: 'performLoadMore',
    value: function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this.loadMore();

              case 2:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function performLoadMore() {
        return _ref3.apply(this, arguments);
      }

      return performLoadMore;
    }()

    /**
     * Called by the TableView when scrolling near the bottom. You can use this
     * opportunity to load more data, e.g. for infinite scrolling.
     * @abstract
     */

  }, {
    key: 'loadMore',
    value: function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
              case 'end':
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function loadMore() {
        return _ref4.apply(this, arguments);
      }

      return loadMore;
    }()
  }, {
    key: 'sort',


    /**
     * Called by the TableView when a column header is clicked. You should sort your data
     * accordingly and call `reloadData`.
     * @param {object} column
     * @param {number} dir
     * @abstract
     */
    value: function sort(column, dir) {
      throw new Error('sort must be implemented by subclasses');
    }

    /**
     * Reloads the data in the TableView
     */

  }, {
    key: 'reloadData',
    value: function reloadData() {
      this.emit('reloadSection', 0, false);
    }
  }]);

  return TableViewDataSource;
}(_collectionView.DataSource);

exports.default = TableViewDataSource;