{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/**\n * Instances of this lightweight class are created by {@link Layout} subclasses\n * to represent each view in the {@link CollectionView}. LayoutInfo objects describe \n * various properties of a view, such as its position and size, and style information.\n * The collection view uses this information when creating actual views to display.\n */\n\n\nvar LayoutInfo = function () {\n  /**\n   * @param {string} type - A string representing the view type. Should be `'item'` for item views. \n                            Other types are used by supplementary views.\n   * @param {number} section - The section index this view is inside. Can be `null` for global views,\n                               such as global headers or footers.\n   * @param {number} index - The index of this view within the section. Can be `null` for global views \n                             or section-level views such as section headers or footers.\n   */\n  function LayoutInfo(type, section, index) {\n    _classCallCheck(this, LayoutInfo);\n    /**\n     * A string representing the view type. Should be `'item'` for item views.\n     * Other types are used by supplementary views.\n     * @type {string}\n     */\n\n\n    this.type = type;\n    /**\n     * The section index this view is inside. Can be `null` for global views,\n     * such as global headers or footers.\n     * @type {number}\n     */\n\n    this.section = section;\n    /**\n     * The index of this view within the section. Can be `null` for global views\n     * or section-level views such as section headers or footers.\n     * @type {number}\n     */\n\n    this.index = index;\n    /**\n     * The rectangle describing the size and position of this view.\n     * @type {Rect}\n     */\n\n    this.rect = null;\n    /**\n     * Whether the size is estimated. `false` by default.\n     */\n\n    this.estimatedSize = false;\n    /**\n     * The view's opacity. 1 by default.\n     */\n\n    this.opacity = 1;\n    /**\n     * A CSS transform string to apply to the view. `null` by default.\n     * @type {string}\n     */\n\n    this.transform = null;\n    /**\n     * The z-index of the view. 0 by default.\n     */\n\n    this.zIndex = 0;\n  }\n  /**\n   * Returns a copy of the LayoutInfo.\n   * @return {LayoutInfo}\n   */\n\n\n  _createClass(LayoutInfo, [{\n    key: \"copy\",\n    value: function copy() {\n      var res = new LayoutInfo(this.type, this.section, this.index);\n      res.rect = this.rect.copy();\n      res.estimatedSize = this.estimatedSize;\n      res.opacity = this.opacity;\n      res.transform = this.transform;\n      return res;\n    }\n  }]);\n\n  return LayoutInfo;\n}();\n\nexports.default = LayoutInfo;","map":null,"metadata":{},"sourceType":"script"}