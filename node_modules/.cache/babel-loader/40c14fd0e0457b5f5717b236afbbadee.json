{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/rvang/Desktop/Spectrum/testapp/node_modules/@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.keyDiff = keyDiff;\nexports.difference = difference;\nexports.concatIterators = concatIterators;\nexports.invert = invert;\nexports.compareView = compareView;\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(concatIterators);\n/**\n * Returns a Set containing the keys in Map a that are not in b.\n * @private\n */\n\n\nfunction keyDiff(a, b) {\n  var res = new Set();\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = a.keys()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var key = _step.value;\n\n      if (!b.has(key)) {\n        res.add(key);\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return res;\n}\n/**\n * Returns the key difference between two maps. Returns a set of\n * keys to add to and remove from a to make it equal to b.\n * @private\n */\n\n\nfunction difference(a, b) {\n  var toRemove = keyDiff(a, b);\n  var toAdd = keyDiff(b, a);\n  return {\n    toRemove: toRemove,\n    toAdd: toAdd\n  };\n}\n/**\n * Returns an iterator that yields the items in all of the given iterators.\n * @private\n */\n\n\nfunction concatIterators() {\n  for (var _len = arguments.length, iterators = Array(_len), _key = 0; _key < _len; _key++) {\n    iterators[_key] = arguments[_key];\n  }\n\n  var _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, iterator;\n\n  return _regeneratorRuntime.wrap(function concatIterators$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _iteratorNormalCompletion2 = true;\n          _didIteratorError2 = false;\n          _iteratorError2 = undefined;\n          _context.prev = 3;\n          _iterator2 = iterators[Symbol.iterator]();\n\n        case 5:\n          if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {\n            _context.next = 11;\n            break;\n          }\n\n          iterator = _step2.value;\n          return _context.delegateYield(iterator, \"t0\", 8);\n\n        case 8:\n          _iteratorNormalCompletion2 = true;\n          _context.next = 5;\n          break;\n\n        case 11:\n          _context.next = 17;\n          break;\n\n        case 13:\n          _context.prev = 13;\n          _context.t1 = _context[\"catch\"](3);\n          _didIteratorError2 = true;\n          _iteratorError2 = _context.t1;\n\n        case 17:\n          _context.prev = 17;\n          _context.prev = 18;\n\n          if (!_iteratorNormalCompletion2 && _iterator2.return) {\n            _iterator2.return();\n          }\n\n        case 20:\n          _context.prev = 20;\n\n          if (!_didIteratorError2) {\n            _context.next = 23;\n            break;\n          }\n\n          throw _iteratorError2;\n\n        case 23:\n          return _context.finish(20);\n\n        case 24:\n          return _context.finish(17);\n\n        case 25:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, this, [[3, 13, 17, 25], [18,, 20, 24]]);\n}\n/**\n * Inverts the keys and values of an object.\n * @private\n */\n\n\nfunction invert(object) {\n  var res = {};\n\n  for (var key in object) {\n    res[object[key]] = key;\n  }\n\n  return res;\n}\n/**\n * Array sort views based on section and item index.\n * @private\n */\n\n\nfunction compareView(a, b) {\n  return a.layoutInfo.section - b.layoutInfo.section || a.layoutInfo.index - b.layoutInfo.index;\n}","map":null,"metadata":{},"sourceType":"script"}