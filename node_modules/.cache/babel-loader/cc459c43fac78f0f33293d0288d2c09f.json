{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.interpretKeyboardEvent = interpretKeyboardEvent;\nexports.chain = chain;\nexports.focusAfterMouseEvent = focusAfterMouseEvent;\n\nfunction interpretKeyboardEvent(event) {\n  var orientation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'vertical';\n\n  switch (event.key) {\n    case 'Enter':\n    case ' ':\n      if (this.onSelectFocused) {\n        this.onSelectFocused(event);\n      }\n\n      break;\n\n    case 'Tab':\n      if (this.onTab) {\n        this.onTab(event);\n      }\n\n      break;\n\n    case 'PageUp':\n      if (this.onPageUp) {\n        this.onPageUp(event);\n      } else if (this.onFocusFirst) {\n        this.onFocusFirst(event);\n      }\n\n      break;\n\n    case 'PageDown':\n      if (this.onPageDown) {\n        this.onPageDown(event);\n      } else if (this.onFocusLast) {\n        this.onFocusLast(event);\n      }\n\n      break;\n\n    case 'Home':\n      if (this.onFocusFirst) {\n        this.onFocusFirst(event);\n      }\n\n      break;\n\n    case 'End':\n      if (this.onFocusLast) {\n        this.onFocusLast(event);\n      }\n\n      break;\n\n    case 'ArrowUp':\n    case 'Up':\n      if (event.altKey && this.onAltArrowUp) {\n        this.onAltArrowUp(event);\n      } else if (orientation !== 'horizontal' && this.onFocusPrevious) {\n        this.onFocusPrevious(event);\n      }\n\n      break;\n\n    case 'ArrowDown':\n    case 'Down':\n      if (event.altKey && this.onAltArrowDown) {\n        this.onAltArrowDown(event);\n      } else if (orientation !== 'horizontal' && this.onFocusNext) {\n        this.onFocusNext(event);\n      }\n\n      break;\n\n    case 'ArrowLeft':\n    case 'Left':\n      if (orientation !== 'vertical' && this.onFocusPrevious) {\n        this.onFocusPrevious(event);\n      }\n\n      break;\n\n    case 'ArrowRight':\n    case 'Right':\n      if (orientation !== 'vertical' && this.onFocusNext) {\n        this.onFocusNext(event);\n      }\n\n      break;\n\n    case 'Escape':\n    case 'Esc':\n      if (this.onEscape) {\n        this.onEscape(event);\n      }\n\n      break;\n\n    default: // do nothing\n\n  }\n}\n\nfunction chain() {\n  for (var _len = arguments.length, callbacks = Array(_len), _key = 0; _key < _len; _key++) {\n    callbacks[_key] = arguments[_key];\n  }\n\n  return function () {\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = callbacks[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var callback = _step.value;\n\n        if (typeof callback === 'function') {\n          callback.apply(undefined, arguments);\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  };\n}\n\nvar mouseDownPrevented = false;\n\nfunction focusAfterMouseEvent(handler, event) {\n  // If server side rendering, just call handler method.\n  if (!document) {\n    handler && handler.call(this, event);\n    return;\n  } // execute the handler\n\n\n  if (handler) {\n    handler.call(this, event);\n\n    if (event.isDefaultPrevented()) {\n      mouseDownPrevented = event.type === 'mousedown';\n      return;\n    }\n  } // make sure that the element has focus by calling this.focus();\n\n\n  if (!mouseDownPrevented && typeof this.focus === 'function') {\n    this.focus();\n  }\n\n  if (event.type === 'mouseup') {\n    mouseDownPrevented = false;\n  }\n}","map":null,"metadata":{},"sourceType":"script"}