'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class;

var _autobindDecorator = require('autobind-decorator');

var _autobindDecorator2 = _interopRequireDefault(_autobindDecorator);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _collectionView = require('@react/collection-view');

var _loadingLayout = require('./loadingLayout');

var _loadingLayout2 = _interopRequireDefault(_loadingLayout);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _Provider = require('../Provider');

var _Provider2 = _interopRequireDefault(_Provider);

var _proxyObject = require('./proxyObject');

var _proxyObject2 = _interopRequireDefault(_proxyObject);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Wait = require('../Wait');

var _Wait2 = _interopRequireDefault(_Wait);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var CollectionView = (0, _autobindDecorator2.default)(_class = function (_React$Component) {
  _inherits(CollectionView, _React$Component);

  function CollectionView(props) {
    _classCallCheck(this, CollectionView);

    var _this = _possibleConstructorReturn(this, (CollectionView.__proto__ || Object.getPrototypeOf(CollectionView)).call(this, props));

    _this.isLoading = false;
    _this.hasMore = true;
    _this.state = {
      delegate: Object.assign({}, (0, _proxyObject2.default)(_this), (0, _proxyObject2.default)(props.dataSource)),
      isDropTarget: false
    };
    return _this;
  }
  // These come from the parent Provider. Used to set the correct props
  // to the provider that wraps the drag view.


  _createClass(CollectionView, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.props.layout.component = this;
      if (this.collection) {
        this.collection.setLayout((0, _loadingLayout2.default)(this.props.layout));
      }

      this.setupDataSource(this.props.dataSource);
      this.reloadData();
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(props) {
      if (props.layout !== this.props.layout) {
        props.layout.component = this;
        if (this.collection) {
          this.collection.setLayout((0, _loadingLayout2.default)(props.layout), props.animateLayoutChanges);
        }
      }

      if (props.dataSource !== this.props.dataSource) {
        this.setState({
          delegate: Object.assign({}, (0, _proxyObject2.default)(this), (0, _proxyObject2.default)(props.dataSource))
        });

        this.teardownDataSource(this.props.dataSource);
        this.setupDataSource(props.dataSource);
        this.reloadData(props);
      } else if ('sortDescriptor' in props && !this.isEqualSortDescriptor(props.sortDescriptor, this.props.sortDescriptor)) {
        // TODO: should this actually update here or is it up to the user to call performSort themselves.
        this.updateSort(props.sortDescriptor);
      }
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      // Re-render empty views on prop update in case renderEmptyView would change.
      if (this.collection) {
        this.collection.reloadSupplementaryViewsOfType('empty-view');
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.teardownDataSource(this.props.dataSource);
    }
  }, {
    key: 'setupDataSource',
    value: function setupDataSource(dataSource) {
      dataSource.on('reloadData', this.reloadData);
    }
  }, {
    key: 'teardownDataSource',
    value: function teardownDataSource(dataSource) {
      dataSource.removeListener('reloadData', this.reloadData);
    }
  }, {
    key: 'isEqualSortDescriptor',
    value: function isEqualSortDescriptor(a, b) {
      if (!a || !b) {
        return !a === !b;
      }

      return a.column === b.column && a.direction === b.direction;
    }
  }, {
    key: 'reloadData',
    value: function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this.performLoad(function () {
                  return props.dataSource.performLoad(props.sortDescriptor);
                });

              case 2:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function reloadData() {
        return _ref.apply(this, arguments);
      }

      return reloadData;
    }()
  }, {
    key: 'updateSort',
    value: function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(sortDescriptor) {
        var _this2 = this;

        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.performLoad(function () {
                  return _this2.props.dataSource.performSort(sortDescriptor);
                });

              case 2:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function updateSort(_x2) {
        return _ref2.apply(this, arguments);
      }

      return updateSort;
    }()
  }, {
    key: 'performLoad',
    value: function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(fn) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                if (!this.isLoading) {
                  _context3.next = 2;
                  break;
                }

                return _context3.abrupt('return');

              case 2:
                _context3.prev = 2;

                this.isLoading = true;
                if (this.collection) {
                  this.collection.relayout();
                }

                _context3.next = 7;
                return fn();

              case 7:
                _context3.prev = 7;

                this.isLoading = false;
                if (this.collection) {
                  this.collection.relayout();
                }
                return _context3.finish(7);

              case 11:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this, [[2,, 7, 11]]);
      }));

      function performLoad(_x3) {
        return _ref3.apply(this, arguments);
      }

      return performLoad;
    }()
  }, {
    key: 'onScroll',
    value: function onScroll(offset) {
      var _this3 = this;

      if (this.props.onScroll) {
        this.props.onScroll(offset);
      }

      if (!this.collection) {
        return;
      }

      var scrollOffset = this.collection.contentSize.height - this.collection.size.height * 2;
      if (this.hasMore && this.collection.contentOffset.y > scrollOffset) {
        this.performLoad(_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
          var res;
          return regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  _context4.next = 2;
                  return _this3.props.dataSource.performLoadMore();

                case 2:
                  res = _context4.sent;

                  if (typeof res === 'boolean') {
                    _this3.hasMore = res;
                  }

                case 4:
                case 'end':
                  return _context4.stop();
              }
            }
          }, _callee4, _this3);
        })));
      }
    }
  }, {
    key: 'dropTargetUpdated',
    value: function dropTargetUpdated(target) {
      // Highlight the entire collection view if the drop position is between, but the default
      // drop position from props is "on". This means the drop was over a non-target item.
      // Also do this if the drop position is "between" and the collection view is empty.
      var isDropTarget = target && target.type === 'item' && target.indexPath.section === 0 && target.indexPath.index === 0 && target.dropPosition === _collectionView.DragTarget.DROP_BETWEEN && (this.props.dropPosition === 'on' || this.collection.getSectionLength(0) === 0);

      if (isDropTarget && !this.state.isDropTarget) {
        this.setState({ isDropTarget: true });
      } else if (this.state.isDropTarget) {
        this.setState({ isDropTarget: false });
      }
    }
  }, {
    key: 'renderItemView',
    value: function renderItemView(type, data) {
      return this.props.renderItemView(type, data);
    }
  }, {
    key: 'renderDragView',
    value: function renderDragView(target) {
      var dragView = void 0;
      var style = {
        background: 'transparent'
      };

      // Use custom drag renderer if provided,
      // otherwise just get the existing item view.
      if (this.props.renderDragView) {
        dragView = this.props.renderDragView(target, this.collection.selectedIndexPaths);
      } else {
        // Get the item wrapper view from collection-view. The first child is the actual item component.
        var view = this.collection.getItemView(target.indexPath);
        dragView = [].concat(_toConsumableArray(view.children))[0];

        style.width = view.layoutInfo.rect.width;
        style.height = view.layoutInfo.rect.height;
      }

      // Wrap in a spectrum provider so spectrum components are themed correctly.
      return _react2.default.createElement(
        _Provider2.default,
        _extends({}, this.context, { style: style }),
        dragView
      );
    }
  }, {
    key: 'renderSupplementaryView',
    value: function renderSupplementaryView(type) {
      if (type === 'loading-indicator') {
        return _react2.default.createElement(_Wait2.default, { centered: true, size: 'M' });
      }

      if (type === 'empty-view' && this.props.renderEmptyView) {
        return this.props.renderEmptyView();
      }

      if (this.props.renderSupplementaryView) {
        return this.props.renderSupplementaryView(type);
      }

      return _react2.default.createElement('div', null);
    }
  }, {
    key: 'render',
    value: function render() {
      var _this4 = this;

      var _props = this.props,
          className = _props.className,
          otherProps = _objectWithoutProperties(_props, ['className']);

      delete otherProps.layout;

      return _react2.default.createElement(_collectionView.EditableCollectionView, _extends({}, otherProps, {
        ref: function ref(c) {
          return _this4.collection = c;
        },
        className: (0, _classnames2.default)(className, {
          'is-drop-target': this.state.isDropTarget
        }),
        delegate: this.state.delegate,
        onScroll: this.onScroll }));
    }
  }]);

  return CollectionView;
}(_react2.default.Component)) || _class;

CollectionView.contextTypes = {
  theme: _propTypes2.default.string,
  scale: _propTypes2.default.string,
  locale: _propTypes2.default.string
};
exports.default = CollectionView;