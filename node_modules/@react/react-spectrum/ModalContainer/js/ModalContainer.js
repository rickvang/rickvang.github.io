'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.modalManager = exports.Modal = exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _class;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _autobindDecorator = require('autobind-decorator');

var _autobindDecorator2 = _interopRequireDefault(_autobindDecorator);

var _Modal = require('react-overlays/lib/Modal');

var _Modal2 = _interopRequireDefault(_Modal);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _closest = require('dom-helpers/query/closest');

var _closest2 = _interopRequireDefault(_closest);

var _filterDOMProps = require('../../utils/filterDOMProps');

var _filterDOMProps2 = _interopRequireDefault(_filterDOMProps);

var _ModalManager = require('./ModalManager');

var _ModalManager2 = _interopRequireDefault(_ModalManager);

var _OpenTransition = require('../../utils/OpenTransition');

var _OpenTransition2 = _interopRequireDefault(_OpenTransition);

var _PortalContainer = require('../../PortalContainer');

var _PortalContainer2 = _interopRequireDefault(_PortalContainer);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

if (process.env.SCALE_MEDIUM && process.env.SCALE_LARGE) {
  require('../../spectrum-css/underlay/index.css');

  require('../../spectrum-css/underlay/index-diff.css');
} else if (process.env.SCALE_LARGE) {
  require('../../spectrum-css/underlay/index-lg.css');
} else {
  require('../../spectrum-css/underlay/index.css');
}

if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHT) require('../../spectrum-css/underlay/multiStops/light.css');
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARK) require('../../spectrum-css/underlay/multiStops/dark.css');
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHTEST) require('../../spectrum-css/underlay/multiStops/lightest.css');
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARKEST) require('../../spectrum-css/underlay/multiStops/darkest.css');


var MANAGER_SINGLETON = new _ModalManager2.default({ handleContainerOverflow: false });
var MODAL_KEY = 1;

var ModalContainer = function () {
  function ModalContainer() {
    _classCallCheck(this, ModalContainer);
  }

  _createClass(ModalContainer, null, [{
    key: 'show',
    value: function show(content, context, container) {
      var key = MODAL_KEY++;

      // If container is not specified, look for the provider of context
      if (!container && context) {
        container = function container() {
          return (0, _closest2.default)(_reactDom2.default.findDOMNode(context), '.react-spectrum-provider');
        };
      } else if (!container) {
        container = function container() {
          return document.querySelector('.react-spectrum-provider') || document.body;
        };
      }

      var modal = _react2.default.createElement(
        Modal,
        {
          container: container,
          key: key,
          onHide: this.hide.bind(this, key),
          onClose: content.props.onClose },
        content
      );

      _PortalContainer2.default.add(modal, context);
      return key;
    }
  }, {
    key: 'hide',
    value: function hide(key) {
      _PortalContainer2.default.remove({ key: key });
    }
  }]);

  return ModalContainer;
}();

exports.default = ModalContainer;

var Modal = exports.Modal = (0, _autobindDecorator2.default)(_class = function (_React$Component) {
  _inherits(Modal, _React$Component);

  function Modal() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Modal);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Modal.__proto__ || Object.getPrototypeOf(Modal)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      show: true
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Modal, [{
    key: 'onClose',
    value: function onClose() {
      this.setState({ show: false });
      if (this.props.onClose) {
        this.props.onClose();
      }
    }
  }, {
    key: 'onEntering',
    value: function onEntering() {
      // Make sure that autoFocus actually moves focus to the Modal.
      if (this.baseModal.lastFocus === document.activeElement) {
        this.baseModal.autoFocus();
      }
    }
  }, {
    key: 'backdropMode',
    value: function backdropMode() {
      // I am sorry for this atrocity. I needed a way to detect when not to have a backdrop.
      var fullscreenTakeover = this.props.children.props.mode === 'fullscreenTakeover';

      /*
       * backdropClickable (bc)
       *     bc | !bc
       *     ---|------
       *      t |static
       * if fullscreenTakeover, then always false
       */
      var backdropClickable = this.props.children.props.backdropClickable;

      var backdrop = 'static';
      if (backdropClickable) {
        backdrop = true;
      }
      if (fullscreenTakeover) {
        backdrop = false;
      }
      return backdrop;
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var backdrop = this.backdropMode();
      var role = this.props.children.props.role;


      var hasDialogRole = role && role.indexOf('dialog') !== -1;

      // The z-index here should match the one in Overlay
      return _react2.default.createElement(
        _Modal2.default,
        {
          container: this.props.container,
          style: { zIndex: 100000, position: 'relative' },
          show: this.state.show,
          ref: function ref(baseModal) {
            return _this2.baseModal = baseModal;
          },
          onEntering: this.onEntering,
          onExited: this.props.onHide,
          onHide: this.onClose,
          backdrop: backdrop,
          manager: MANAGER_SINGLETON,
          renderBackdrop: function renderBackdrop(props) {
            return _react2.default.createElement(Underlay, props);
          },
          transition: _OpenTransition2.default,
          backdropTransition: _OpenTransition2.default,
          role: hasDialogRole ? 'presentation' : 'dialog',
          'aria-modal': null },
        (0, _react.cloneElement)(this.props.children, {
          onClose: this.onClose
        })
      );
    }
  }]);

  return Modal;
}(_react2.default.Component)) || _class;

var Underlay = function (_React$Component2) {
  _inherits(Underlay, _React$Component2);

  function Underlay() {
    _classCallCheck(this, Underlay);

    return _possibleConstructorReturn(this, (Underlay.__proto__ || Object.getPrototypeOf(Underlay)).apply(this, arguments));
  }

  _createClass(Underlay, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          open = _props.open,
          props = _objectWithoutProperties(_props, ['open']);

      return _react2.default.createElement('div', _extends({}, (0, _filterDOMProps2.default)(props), { className: (0, _classnames2.default)('spectrum-Underlay', { 'is-open': open }) }));
    }
  }]);

  return Underlay;
}(_react2.default.Component);

exports.modalManager = MANAGER_SINGLETON;