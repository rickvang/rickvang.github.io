'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var children = {};

/*
 * A global portal that lives in the document body which can be used to add
 * overlays like modals outside the normal React component tree.
 */

var PortalContainer = function () {
  function PortalContainer() {
    _classCallCheck(this, PortalContainer);
  }

  _createClass(PortalContainer, null, [{
    key: 'add',

    /**
     * Renders the child
     * @param child component to be render
     * @param context Parent with the context
     */
    value: function add(child, context) {
      var node = children[child.key] || document.createElement('div');
      if (!context) {
        _reactDom2.default.render(child, node);
      } else {
        _reactDom2.default.unstable_renderSubtreeIntoContainer(context, child, node);
      }
      children[child.key] = node;
    }

    /**
     * Remove child from the dom
     * @param child
     */

  }, {
    key: 'remove',
    value: function remove(child) {
      _reactDom2.default.unmountComponentAtNode(children[child.key]);
      delete children[child.key];
    }
  }]);

  return PortalContainer;
}();

exports.default = PortalContainer;