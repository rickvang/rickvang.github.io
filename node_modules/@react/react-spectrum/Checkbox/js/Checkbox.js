'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _CheckmarkSmall = require('../../Icon/core/CheckmarkSmall');

var _CheckmarkSmall2 = _interopRequireDefault(_CheckmarkSmall);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _DashSmall = require('../../Icon/core/DashSmall');

var _DashSmall2 = _interopRequireDefault(_DashSmall);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _SwitchBase = require('../../Switch/js/SwitchBase');

var _SwitchBase2 = _interopRequireDefault(_SwitchBase);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

if (process.env.SCALE_MEDIUM && process.env.SCALE_LARGE) {
  require('../../spectrum-css/checkbox/index.css');

  require('../../spectrum-css/checkbox/index-diff.css');
} else if (process.env.SCALE_LARGE) {
  require('../../spectrum-css/checkbox/index-lg.css');
} else {
  require('../../spectrum-css/checkbox/index.css');
}

if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHT) require('../../spectrum-css/checkbox/multiStops/light.css');
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARK) require('../../spectrum-css/checkbox/multiStops/dark.css');
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHTEST) require('../../spectrum-css/checkbox/multiStops/lightest.css');
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARKEST) require('../../spectrum-css/checkbox/multiStops/darkest.css');

var Checkbox = function (_Component) {
  _inherits(Checkbox, _Component);

  function Checkbox() {
    _classCallCheck(this, Checkbox);

    return _possibleConstructorReturn(this, (Checkbox.__proto__ || Object.getPrototypeOf(Checkbox)).apply(this, arguments));
  }

  _createClass(Checkbox, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.setIndeterminate();
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      this.setIndeterminate();
    }

    // There is no way to set indeterminate through markup such that it will be picked up by a CSS
    // indeterminate pseudo-selector. It can only be done via javascript.

  }, {
    key: 'setIndeterminate',
    value: function setIndeterminate() {
      var indeterminate = this.props.indeterminate;

      var input = this.inputRef && this.inputRef.getInput();
      if (indeterminate != null && input) {
        input.indeterminate = indeterminate;
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          indeterminate = _props.indeterminate,
          quiet = _props.quiet,
          className = _props.className,
          otherProps = _objectWithoutProperties(_props, ['indeterminate', 'quiet', 'className']);

      // override the aria-checked prop of SwitchBase only if it is indeterminate.


      if (indeterminate) {
        otherProps['aria-checked'] = 'mixed';
      }

      var markIcon = indeterminate ? _react2.default.createElement(_DashSmall2.default, { size: null, className: 'spectrum-Checkbox-partialCheckmark' }) : _react2.default.createElement(_CheckmarkSmall2.default, { size: null, className: 'spectrum-Checkbox-checkmark' });

      return _react2.default.createElement(_SwitchBase2.default, _extends({
        ref: function ref(el) {
          return _this2.inputRef = el;
        },
        inputType: 'checkbox',
        className: (0, _classnames2.default)('spectrum-Checkbox', {
          'is-indeterminate': indeterminate,
          'spectrum-Checkbox--quiet': quiet
        }, className),
        inputClassName: 'spectrum-Checkbox-input',
        markClassName: 'spectrum-Checkbox-box',
        markIcon: markIcon,
        labelClassName: 'spectrum-Checkbox-label'
      }, otherProps));
    }
  }]);

  return Checkbox;
}(_react.Component);

Checkbox.propTypes = {
  /**
   * Label for the checkbox
   */
  label: _propTypes2.default.string,

  /**
   * Whether to render the label for the checkbox
   */
  renderLabel: _propTypes2.default.bool,

  /**
   * defaultChecked is undefined by default so we can respect
   * the value that is passed in without erroneously putting
   * both checked and defaultChecked on the input
   */
  defaultChecked: _propTypes2.default.bool,

  /**
   * if the checkbox can't be interacted with, and also greys it out
   */
  disabled: _propTypes2.default.bool,

  /**
   * Uses standard HTML required to make a form invalid, also get a highlight if not filled in
   */
  required: _propTypes2.default.bool,

  /**
   * If the value is invalid
   */
  invalid: _propTypes2.default.bool,

  /**
   * Makes it so the checkbox can't be interacted with
   */
  readOnly: _propTypes2.default.bool,

  /**
   * Callback for when the checkbox value changes
   */
  onChange: _propTypes2.default.func,

  /**
   * Uses a dash instead of a check to indicate an in between or "unknown" state
   */
  indeterminate: _propTypes2.default.bool,

  /**
  * Whether the checkbox is a quiet variation
  */
  quiet: _propTypes2.default.bool

};
Checkbox.defaultProps = {
  renderLabel: true,
  defaultChecked: undefined,
  disabled: false,
  required: false,
  invalid: false,
  readOnly: false,
  onChange: function onChange() {},
  indeterminate: false,
  quiet: false
};
exports.default = Checkbox;


Checkbox.displayName = 'Checkbox';