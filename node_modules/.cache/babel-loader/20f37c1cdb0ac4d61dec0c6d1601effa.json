{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _class;\n\nvar _autobindDecorator = require('autobind-decorator');\n\nvar _autobindDecorator2 = _interopRequireDefault(_autobindDecorator);\n\nvar _createId = require('../../utils/createId');\n\nvar _createId2 = _interopRequireDefault(_createId);\n\nvar _ModalContainer = require('../../ModalContainer/js/ModalContainer.js');\n\nvar _Overlay = require('./Overlay');\n\nvar _Overlay2 = _interopRequireDefault(_Overlay);\n\nvar _ownerDocument = require('react-overlays/lib/utils/ownerDocument');\n\nvar _ownerDocument2 = _interopRequireDefault(_ownerDocument);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar triggerType = _propTypes2.default.oneOf(['click', 'hover', 'focus']);\n/**\n * Check if value one is inside or equal to the of value\n *\n * @param {string} one\n * @param {string|array} of\n * @returns {boolean}\n */\n\n\nfunction isOneOf(one, of) {\n  if (Array.isArray(of)) {\n    return of.indexOf(one) >= 0;\n  }\n\n  return one === of;\n}\n/**\n * Find all of the scrollable parents of a DOM node\n */\n\n\nfunction getScrollParents(node) {\n  var nodes = [];\n\n  while (node.parentNode) {\n    var style = window.getComputedStyle(node); // Look for scrollable nodes, both real and fake.\n\n    if (/auto|scroll/.test(style.overflow + style.overflowY) || node.hasAttribute('data-scrollable')) {\n      nodes.push(node);\n    }\n\n    node = node.parentNode;\n  }\n\n  return nodes;\n}\n/*\n * Class based on React-bootstrap\n * https://github.com/react-bootstrap/react-bootstrap/blob/master/src/OverlayTrigger.js\n */\n\n\nvar OverlayTrigger = (0, _autobindDecorator2.default)(_class = function (_Component) {\n  _inherits(OverlayTrigger, _Component);\n\n  function OverlayTrigger(props, context) {\n    _classCallCheck(this, OverlayTrigger);\n\n    var _this = _possibleConstructorReturn(this, (OverlayTrigger.__proto__ || Object.getPrototypeOf(OverlayTrigger)).call(this, props, context));\n\n    _this.overlayId = (0, _createId2.default)();\n    _this._mountNode = null;\n    _this.state = {\n      show: props.show === undefined ? props.defaultShow : props.show\n    };\n    return _this;\n  }\n\n  _createClass(OverlayTrigger, [{\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      if (nextProps.show !== this.props.show) {\n        nextProps.show ? this.handleDelayedShow() : this.handleDelayedHide();\n      }\n    }\n  }, {\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this._mountNode = document.createElement('div');\n      this.renderOverlay();\n      this._scrollParents = getScrollParents(_reactDom2.default.findDOMNode(this));\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this._scrollParents[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var node = _step.value;\n          node.addEventListener('scroll', this.hide, false);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps) {\n      var isDisabled = prevProps.disabled;\n      var shouldDisable = this.props.disabled;\n\n      if (!isDisabled && shouldDisable) {\n        this.hide();\n      }\n\n      this.renderOverlay();\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      _ModalContainer.modalManager.removeFromModal(this._overlay);\n\n      _reactDom2.default.unmountComponentAtNode(this._mountNode);\n\n      this._mountNode = null;\n      clearTimeout(this._hoverShowDelay);\n      clearTimeout(this._hoverHideDelay);\n\n      if (this._scrollParents) {\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n\n        try {\n          for (var _iterator2 = this._scrollParents[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var node = _step2.value;\n            node.removeEventListener('scroll', this.hide, false);\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2.return) {\n              _iterator2.return();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n\n        this._scrollParents = null;\n      }\n    }\n  }, {\n    key: 'handleToggle',\n    value: function handleToggle(e) {\n      if (this.state.show) {\n        this.hide(e);\n      } else {\n        this.show(e);\n      }\n    }\n  }, {\n    key: 'handleDelayedShow',\n    value: function handleDelayedShow(e) {\n      var _this2 = this;\n\n      if (this._hoverHideDelay != null) {\n        clearTimeout(this._hoverHideDelay);\n        this._hoverHideDelay = null;\n        return;\n      }\n\n      if (this.state.show || this._hoverShowDelay != null) {\n        return;\n      }\n\n      var delay = this.props.delayShow != null ? this.props.delayShow : this.props.delay;\n\n      if (!delay) {\n        this.show(e);\n        return;\n      }\n\n      this._hoverShowDelay = setTimeout(function () {\n        _this2._hoverShowDelay = null;\n\n        _this2.show(e);\n      }, delay);\n    }\n  }, {\n    key: 'handleDelayedHide',\n    value: function handleDelayedHide(e) {\n      var _this3 = this;\n\n      if (this._hoverShowDelay != null) {\n        clearTimeout(this._hoverShowDelay);\n        this._hoverShowDelay = null;\n        return;\n      }\n\n      if (!this.state.show || this._hoverHideDelay != null) {\n        return;\n      }\n\n      var delay = (!this.props.delayHide || this.props.delayHide === OverlayTrigger.defaultProps.delayHide) && this.props.delay != null ? this.props.delay : this.props.delayHide;\n\n      if (!delay) {\n        this.hide(e);\n        return;\n      }\n\n      this._hoverHideDelay = setTimeout(function () {\n        _this3._hoverHideDelay = null;\n\n        _this3.hide(e);\n      }, delay);\n    } // Simple implementation of mouseEnter and mouseLeave.\n    // React's built version is broken: https://github.com/facebook/react/issues/4251\n    // for cases when the trigger is disabled and mouseOut/Over can cause flicker\n    // moving from one child element to another.\n\n  }, {\n    key: 'handleMouseOverOut',\n    value: function handleMouseOverOut(handler, e) {\n      var target = e.currentTarget;\n      var related = e.relatedTarget || e.nativeEvent.toElement;\n\n      if (!related || related !== target && !target.contains(related)) {\n        handler(e);\n      }\n    }\n  }, {\n    key: 'show',\n    value: function show(e) {\n      if (!this.state.show && !this.props.disabled) {\n        this.setState({\n          show: true\n        });\n\n        if (this.props.onShow) {\n          this.props.onShow(e);\n        }\n      }\n    }\n  }, {\n    key: 'hide',\n    value: function hide(e) {\n      if (this.state.show) {\n        this.setState({\n          show: false\n        });\n\n        if (this.props.onHide) {\n          this.props.onHide(e);\n        }\n      }\n    }\n  }, {\n    key: 'makeOverlay',\n    value: function makeOverlay(overlay, props) {\n      var _props$target = this.props.target,\n          target = _props$target === undefined ? this : _props$target;\n\n      var _props$rootClose = props.rootClose,\n          rootClose = _props$rootClose === undefined ? true : _props$rootClose,\n          overlayProps = _objectWithoutProperties(props, ['rootClose']);\n\n      delete overlayProps.crossOffset;\n      delete overlayProps.defaultShow;\n      delete overlayProps.flip;\n      delete overlayProps.boundariesElement;\n      delete overlayProps.shouldUpdatePosition;\n\n      if (!overlay.props.id) {\n        overlayProps.id = this.overlayId;\n      }\n\n      if (!props.id) {\n        props.id = overlay.props.id || overlayProps.id;\n      }\n\n      return _react2.default.createElement(_Overlay2.default, _extends({}, props, {\n        show: this.state.show,\n        onHide: this.hide,\n        target: target,\n        rootClose: rootClose\n      }), (0, _react.cloneElement)(overlay, overlayProps));\n    }\n  }, {\n    key: 'renderOverlay',\n    value: function renderOverlay() {\n      // Only add overlay to modalManager when it is shown.\n      if (this._overlay.props.show) {\n        _ModalContainer.modalManager.addToModal(this._overlay);\n      }\n\n      _reactDom2.default.unstable_renderSubtreeIntoContainer(this, this._overlay, this._mountNode);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          trigger = _props.trigger,\n          show = _props.show,\n          _props$selected = _props.selected,\n          selected = _props$selected === undefined ? this.state.show : _props$selected,\n          props = _objectWithoutProperties(_props, ['trigger', 'show', 'selected']);\n\n      delete props.delay;\n      delete props.delayShow;\n      delete props.delayHide;\n      delete props.defaultShow;\n      delete props.onShow;\n      delete props.onHide;\n\n      var _React$Children$toArr = _react2.default.Children.toArray(this.props.children),\n          _React$Children$toArr2 = _slicedToArray(_React$Children$toArr, 2),\n          triggerChild = _React$Children$toArr2[0],\n          overlayChild = _React$Children$toArr2[1];\n\n      var triggerProps = {};\n      delete props.children; // When Tooltip is shown,\n\n      if (this.state.show && overlayChild.type && overlayChild.props.role === 'tooltip') {\n        // Tooltip element id should match trigger element's aria-describedby value,\n        if (!props.id) {\n          props.id = overlayChild.props.id || this.overlayId;\n        } // Tooltip should add aria-describedby attribute to trigger element.\n\n\n        triggerProps['aria-describedby'] = props.id;\n      } // Attach trigger events in case on un-controlled overlay\n\n\n      if (show === undefined) {\n        if (isOneOf('click', trigger)) {\n          triggerProps.onClick = this.handleToggle;\n        }\n\n        if (isOneOf('hover', trigger)) {\n          triggerProps.onMouseOver = this.handleMouseOverOut.bind(this, this.handleDelayedShow);\n          triggerProps.onMouseOut = this.handleMouseOverOut.bind(this, this.handleDelayedHide);\n          props.onMouseOver = this.handleMouseOverOut.bind(this, this.handleDelayedShow);\n          props.onMouseOut = this.handleMouseOverOut.bind(this, this.handleDelayedHide);\n        }\n\n        if (isOneOf('focus', trigger)) {\n          triggerProps.onFocus = this.handleDelayedShow;\n          triggerProps.onBlur = this.handleDelayedHide;\n          props.onFocus = this.handleDelayedShow;\n          props.onBlur = this.handleDelayedHide;\n        }\n      }\n\n      triggerProps.selected = selected; // Remove previous overlay from modalManager\n\n      if (this._overlay) {\n        _ModalContainer.modalManager.removeFromModal(this._overlay);\n      }\n\n      this._overlay = this.makeOverlay(overlayChild, props);\n      return (0, _react.cloneElement)(triggerChild, triggerProps);\n    }\n  }]);\n\n  return OverlayTrigger;\n}(_react.Component)) || _class;\n\nOverlayTrigger.propTypes = _extends({}, _Overlay2.default.propTypes, {\n  /**\n  * Specify which action or actions trigger Overlay visibility\n  */\n  trigger: _propTypes2.default.oneOfType([triggerType, _propTypes2.default.arrayOf(triggerType)]),\n\n  /**\n   * A millisecond delay amount to show and hide the Overlay once triggered\n   */\n  delay: _propTypes2.default.number,\n\n  /**\n   * A millisecond delay amount before showing the Overlay once triggered.\n   */\n  delayShow: _propTypes2.default.number,\n\n  /**\n   * A millisecond delay amount before hiding the Overlay once triggered.\n   */\n  delayHide: _propTypes2.default.number,\n\n  /**\n   * The initial visibility state of the Overlay. For more nuanced visibility\n   * control, consider using the Overlay component directly.\n   */\n  defaultShow: _propTypes2.default.bool,\n\n  /**\n   * Callback when the overlay trigger is blurred.\n   */\n  onBlur: _propTypes2.default.func,\n\n  /**\n   * Callback when the overlay trigger is clicked.\n   */\n  onClick: _propTypes2.default.func,\n\n  /**\n   * Callback when the overlay trigger receives focus.\n   */\n  onFocus: _propTypes2.default.func,\n\n  /**\n   * Callback when the mouse leaves the overlay trigger.\n   */\n  onMouseOut: _propTypes2.default.func,\n\n  /**\n   * Callback when the mouse is over the overlay trigger.\n   */\n  onMouseOver: _propTypes2.default.func,\n\n  /**\n   * Callback when the overlay show is invoked, determined by the 'trigger' prop.\n   */\n  onShow: _propTypes2.default.func,\n\n  /**\n   * Callback when the overlay is hidden.\n   */\n  onHide: _propTypes2.default.func,\n\n  /**\n   * Will cause the overlay to show in a controlled state.\n   */\n  show: _propTypes2.default.bool,\n\n  /**\n   * Overlay will be shifted by specified units in the placement's axis direction.\n   */\n  offset: _propTypes2.default.number,\n\n  /**\n   * Overlay will be shifted by specified units in the placement's cross-axis direction.\n   */\n  crossOffset: _propTypes2.default.number,\n\n  /**\n   * Whether overlay should be allowed to flip if it hits the boundary\n   */\n  flip: _propTypes2.default.bool,\n\n  /**\n   * Grey's out the trigger and removes interaction.\n   */\n  disabled: _propTypes2.default.bool,\n\n  /**\n   * By default, the body of the owning document. The overlay will do a hit test to see if it\n   * extends outside the boundaries and move it to a new position if it collides.\n   */\n  boundariesElement: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string])\n});\nOverlayTrigger.defaultProps = {\n  defaultShow: false,\n  trigger: ['hover', 'focus'],\n  placement: 'left',\n  offset: 0,\n  crossOffset: 0,\n  flip: true,\n  disabled: false,\n  boundariesElement: function boundariesElement() {\n    return (0, _ownerDocument2.default)(undefined).body;\n  },\n  delayHide: 100\n};\nexports.default = OverlayTrigger;","map":null,"metadata":{},"sourceType":"script"}