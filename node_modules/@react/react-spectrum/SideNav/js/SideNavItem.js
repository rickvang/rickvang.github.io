'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class;

var _autobindDecorator = require('autobind-decorator');

var _autobindDecorator2 = _interopRequireDefault(_autobindDecorator);

var _events = require('../../utils/events');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _createId = require('../../utils/createId');

var _createId2 = _interopRequireDefault(_createId);

var _filterDOMProps = require('../../utils/filterDOMProps');

var _filterDOMProps2 = _interopRequireDefault(_filterDOMProps);

var _focusRing = require('../../utils/focusRing');

var _focusRing2 = _interopRequireDefault(_focusRing);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _SideNav = require('./SideNav');

var _SideNav2 = _interopRequireDefault(_SideNav);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var NOOP = function NOOP() {};
var FOCUSABLE_SIDENAV_ITEMLINK_SELECTOR = '.spectrum-SideNav-itemLink[tabIndex]';

/**
 * An item in a sidenav
 */

var SideNavItem = (0, _autobindDecorator2.default)(_class = (0, _focusRing2.default)(_class = function (_Component) {
  _inherits(SideNavItem, _Component);

  function SideNavItem(props) {
    _classCallCheck(this, SideNavItem);

    var _this = _possibleConstructorReturn(this, (SideNavItem.__proto__ || Object.getPrototypeOf(SideNavItem)).call(this, props));

    _this.state = {
      expanded: _this.props.defaultExpanded || _this.props.expanded,
      focused: false
    };

    _this.setSideNavItemRef = function (s) {
      return _this.sideNavItemRef = s;
    };

    _this.id = (0, _createId2.default)();
    return _this;
  }

  _createClass(SideNavItem, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var expanded = nextProps.expanded;

      if (expanded !== this.props.expanded) {
        this.setState(function (prevState) {
          return _extends({}, prevState, { expanded: expanded });
        });
      }
    }
  }, {
    key: 'handleClick',
    value: function handleClick(e) {
      this.props.onClick(e);
      this.onSelectFocused(e);
    }
  }, {
    key: 'onSelectFocused',
    value: function onSelectFocused(e) {
      var _props = this.props,
          onSelect = _props.onSelect,
          value = _props.value,
          expanded = _props.expanded,
          href = _props.href;

      var isKeyDown = e.type === 'keydown';
      if (!href || isKeyDown) {
        // When there is no href or if triggered from a keyboard event,
        // preventDefault and stopPropagation.
        e.preventDefault();
        e.stopPropagation();
        // If Enter of Space key pressed, trigger click event on event target
        if (isKeyDown && (e.key === 'Enter' || e.key === ' ')) {
          e.target.click();
          return;
        }
      }
      if (expanded === undefined) {
        this.setState(function (prevState) {
          return _extends({}, prevState, { expanded: !prevState.expanded });
        });
      }
      onSelect(value, e);
    }

    /**
     * Keyboard event handler to interperet ArrowLeft/ArrowRight to collapse/expand section in multiLevel variant.
     * @param {KeyboardEvent} e Keyboard event
     */

  }, {
    key: 'onKeyDown',
    value: function onKeyDown(e) {
      var expanded = this.state.expanded;

      var isExpandableTreeItem = this.props.role === 'treeitem' && this.hasNestedNav;
      switch (e.key) {
        case 'ArrowLeft':
        case 'Left':
          if (isExpandableTreeItem) {
            if (expanded) {
              this.onSelectFocused(e);
              this.focus();
            }
          }
          break;
        case 'ArrowRight':
        case 'Right':
          if (isExpandableTreeItem) {
            if (!expanded) {
              this.onSelectFocused(e);
            } else if (this.sideNavItemRef) {
              var links = Array.from(_reactDom2.default.findDOMNode(this).querySelectorAll(FOCUSABLE_SIDENAV_ITEMLINK_SELECTOR));
              if (links.indexOf(e.target) === 0) {
                links[1].focus();
              }
            }
          }
          break;
      }
    }
  }, {
    key: 'onFocus',
    value: function onFocus() {
      this.setState({ focused: true });
    }
  }, {
    key: 'onBlur',
    value: function onBlur() {
      this.setState({ focused: false });
    }
  }, {
    key: 'focus',
    value: function focus() {
      if (this.sideNavItemRef) {
        var link = _reactDom2.default.findDOMNode(this.sideNavItemRef).querySelector(FOCUSABLE_SIDENAV_ITEMLINK_SELECTOR);
        link.focus();
      }
    }
  }, {
    key: 'getDescendantId',
    value: function getDescendantId(postfix) {
      var _props$id = this.props.id,
          id = _props$id === undefined ? this.id : _props$id;

      return postfix ? id + '-' + postfix : id;
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          header = _props2.header,
          hidden = _props2.hidden,
          href = _props2.href,
          className = _props2.className,
          children = _props2.children,
          disabled = _props2.disabled,
          role = _props2.role,
          _props2$id = _props2.id,
          id = _props2$id === undefined ? this.id : _props2$id,
          value = _props2.value,
          _isSelected = _props2._isSelected,
          _nestedNavValue = _props2._nestedNavValue,
          manageTabIndex = _props2.manageTabIndex,
          onSelect = _props2.onSelect,
          _props2$target = _props2.target,
          target = _props2$target === undefined ? '_self' : _props2$target,
          ariaLevel = _props2.ariaLevel,
          otherProps = _objectWithoutProperties(_props2, ['header', 'hidden', 'href', 'className', 'children', 'disabled', 'role', 'id', 'value', '_isSelected', '_nestedNavValue', 'manageTabIndex', 'onSelect', 'target', 'ariaLevel']);

      var _state = this.state,
          expanded = _state.expanded,
          focused = _state.focused;
      var _props3 = this.props,
          label = _props3.label,
          _props3$tabIndex = _props3.tabIndex,
          tabIndex = _props3$tabIndex === undefined ? 0 : _props3$tabIndex;


      if (!label && !header) {
        label = children;
      }

      var isTreeItem = role === 'treeitem';
      var isCurrent = !!_nestedNavValue && value === _nestedNavValue;

      if (isTreeItem || manageTabIndex) {
        tabIndex = isCurrent ? tabIndex : -1;
      }

      delete otherProps.label;

      var ariaCurrent = otherProps['aria-current'];
      delete otherProps['aria-current'];

      return _react2.default.createElement(
        'li',
        _extends({
          className: (0, _classnames2.default)('spectrum-SideNav-item', {
            'is-selected': _isSelected,
            'is-disabled': disabled,
            'is-focused': focused
          }, className),
          onKeyDown: disabled ? undefined : (0, _events.chain)(this.onKeyDown, _events.interpretKeyboardEvent.bind(this)),
          role: isTreeItem ? 'none' : undefined,
          ref: this.setSideNavItemRef
        }, (0, _filterDOMProps2.default)(otherProps)),
        label && _react2.default.createElement(
          'a',
          {
            href: disabled ? undefined : href,
            onClick: disabled ? undefined : this.handleClick,
            onFocus: disabled ? undefined : this.onFocus,
            onBlur: disabled ? undefined : this.onBlur,
            tabIndex: disabled ? undefined : tabIndex,
            className: (0, _classnames2.default)('spectrum-SideNav-itemLink', {
              'is-selected': _isSelected,
              'is-disabled': disabled,
              'is-focused': focused,
              'is-hidden': hidden
            }),
            id: id,
            role: (disabled || !href) && !isTreeItem ? 'link' : role,
            'aria-disabled': disabled || undefined,
            'aria-expanded': this.hasNestedNav && isTreeItem ? expanded : undefined,
            'aria-owns': this.hasNestedNav && isTreeItem && expanded ? this.getDescendantId('child-list') : undefined,
            'aria-selected': isTreeItem ? focused : undefined,
            'aria-current': _isSelected ? ariaCurrent : undefined,
            'aria-level': ariaLevel,
            target: target },
          label
        ),
        header && _react2.default.createElement(
          'h2',
          { className: 'spectrum-SideNav-heading', id: this.getDescendantId('header') },
          header
        ),
        this.hasNestedNav && _react2.default.createElement(
          _SideNav2.default,
          {
            role: 'none',
            variant: isTreeItem ? 'multiLevel' : undefined,
            id: this.getDescendantId('child'),
            'aria-labelledby': header ? this.getDescendantId('header') : id,
            ariaLevel: ariaLevel + 1,
            hidden: isTreeItem ? !expanded : undefined,
            value: _nestedNavValue,
            onSelect: onSelect },
          children
        )
      );
    }
  }, {
    key: 'hasNestedNav',
    get: function get() {
      var children = this.props.children;

      return children && typeof children !== 'string';
    }
  }]);

  return SideNavItem;
}(_react.Component)) || _class) || _class;

SideNavItem.propTypes = {
  /**
   * Custom className of sidenav to apply
   */
  className: _propTypes2.default.string,

  /**
   * Whether the item is disabled
   */
  disabled: _propTypes2.default.bool,

  /**
   * The label to display in the item
   */
  label: _propTypes2.default.string,

  /**
   * The value of item
   */
  value: _propTypes2.default.string,

  /**
   * The href of item
   */
  href: _propTypes2.default.string,

  /**
   * The target type for item link
   */
  target: _propTypes2.default.string,

  /**
   * Whether item should represent the current page within a set of pages or current location within an environment or context when selected.
   * See <a href="https://www.w3.org/TR/wai-aria-1.1/#aria-current" class="spectrum-Link">WAI-ARIA 1.1 definition of `aria-current (state)`</a> 
   * attribute.
   */
  'aria-current': _propTypes2.default.oneOf(['page', 'location']),

  /**
   * Whether the item is expanded in case of multi-level sidenav item
   */
  expanded: _propTypes2.default.bool,

  /**
   * Whether the item is expanded at initialization in case of multi-level sidenav item
   */
  defaultExpanded: _propTypes2.default.bool,

  /**
   * A click handler for the item
   */
  onClick: _propTypes2.default.func,

  /**
   * A select handler for the item
   */
  onSelect: _propTypes2.default.func
};
SideNavItem.defaultProps = {
  'aria-current': 'page',
  disabled: false,
  target: '_self',
  onSelect: NOOP,
  onClick: NOOP
};
exports.default = SideNavItem;