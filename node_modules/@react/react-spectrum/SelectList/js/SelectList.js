'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _List = require('../../List');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var SelectList = function (_Component) {
  _inherits(SelectList, _Component);

  function SelectList(props) {
    _classCallCheck(this, SelectList);

    var _this = _possibleConstructorReturn(this, (SelectList.__proto__ || Object.getPrototypeOf(SelectList)).call(this, props));

    _this.renderListOfOptions = function (options) {
      return options.map(function (option, index) {
        return _react2.default.createElement(
          _List.ListItem,
          {
            key: index,
            icon: option.icon,
            selected: _this.isSelected(option),
            disabled: _this.props.disabled || option.disabled,
            onSelect: _this.handleSelect.bind(_this, option),
            onTab: _this.props.onTab },
          option.label
        );
      });
    };

    _this.state = {
      value: props.value
    };
    return _this;
  }

  _createClass(SelectList, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(props) {
      if (props.value && props.value !== this.state.value) {
        this.setState({
          value: props.value
        });
      }
    }
  }, {
    key: 'addSelection',
    value: function addSelection(option) {
      return [].concat(_toConsumableArray(this.state.value || []), [option.value]);
    }
  }, {
    key: 'removeSelection',
    value: function removeSelection(option) {
      var value = this.state.value || [];
      var index = value.indexOf(option.value);
      return [].concat(_toConsumableArray(value.slice(0, index)), _toConsumableArray(value.slice(index + 1, value.length)));
    }
  }, {
    key: 'handleSelect',
    value: function handleSelect(option) {
      var nextOptions = void 0;
      if (this.props.multiple) {
        if (this.isSelected(option)) {
          nextOptions = this.removeSelection(option);
        } else {
          nextOptions = this.addSelection(option);
        }
      } else {
        nextOptions = option.value;
      }

      // Set state if in uncontrolled mode
      if (!('value' in this.props)) {
        this.setState({ value: nextOptions });
      }

      if (this.props.onChange) {
        this.props.onChange(nextOptions);
      }
    }
  }, {
    key: 'isSelected',
    value: function isSelected(option) {
      return this.props.multiple ? this.state.value && this.state.value.indexOf(option.value) >= 0 : this.state.value === option.value;
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          _props$options = _props.options,
          options = _props$options === undefined ? [] : _props$options,
          _props$multiple = _props.multiple,
          multiple = _props$multiple === undefined ? false : _props$multiple,
          _props$disabled = _props.disabled,
          disabled = _props$disabled === undefined ? false : _props$disabled,
          _props$invalid = _props.invalid,
          invalid = _props$invalid === undefined ? false : _props$invalid,
          _props$required = _props.required,
          required = _props$required === undefined ? false : _props$required,
          className = _props.className,
          otherProps = _objectWithoutProperties(_props, ['options', 'multiple', 'disabled', 'invalid', 'required', 'className']);

      delete otherProps.onTab;

      return _react2.default.createElement(
        _List.List,
        _extends({
          className: className,
          'aria-multiselectable': multiple,
          'aria-disabled': disabled,
          'aria-invalid': invalid,
          'aria-required': required,
          selectable: true
        }, otherProps),
        this.renderListOfOptions(options)
      );
    }
  }]);

  return SelectList;
}(_react.Component);

SelectList.propTypes = {
  /** Whether the SelectList is disabled */
  disabled: _propTypes2.default.bool,

  /** Whether to show the invalid icon and styling */
  invalid: _propTypes2.default.bool,

  label: _propTypes2.default.string,

  /** Whether multiple options are able to be selected */
  multiple: _propTypes2.default.bool,

  /** Function called when the selected options are changed */
  onChange: _propTypes2.default.func,

  /** Array of strings of options in list */
  options: _propTypes2.default.arrayOf(_propTypes2.default.object),

  /** Whether an input is required */
  required: _propTypes2.default.bool,

  /** Array of pre-selected values*/
  value: _propTypes2.default.oneOfType([_propTypes2.default.arrayOf(_propTypes2.default.string), _propTypes2.default.string])
};
SelectList.defaultProps = {
  options: [],
  multiple: false,
  disabled: false,
  invalid: false,
  required: false
};
exports.default = SelectList;