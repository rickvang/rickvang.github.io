'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class;

var _autobindDecorator = require('autobind-decorator');

var _autobindDecorator2 = _interopRequireDefault(_autobindDecorator);

var _Button = require('../../Button');

var _Button2 = _interopRequireDefault(_Button);

var _Calendar = require('../../Calendar');

var _Calendar2 = _interopRequireDefault(_Calendar);

var _Calendar3 = require('../../Icon/Calendar');

var _Calendar4 = _interopRequireDefault(_Calendar3);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _Clock = require('../../Clock');

var _Clock2 = _interopRequireDefault(_Clock);

var _Clock3 = require('../../Icon/Clock');

var _Clock4 = _interopRequireDefault(_Clock3);

var _createId = require('../../utils/createId');

var _createId2 = _interopRequireDefault(_createId);

var _InputGroup = require('../../InputGroup');

var _InputGroup2 = _interopRequireDefault(_InputGroup);

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _OverlayTrigger = require('../../OverlayTrigger');

var _OverlayTrigger2 = _interopRequireDefault(_OverlayTrigger);

var _Popover = require('../../Popover');

var _Popover2 = _interopRequireDefault(_Popover);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Textfield = require('../../Textfield');

var _Textfield2 = _interopRequireDefault(_Textfield);

var _moment3 = require('../../utils/moment');

require('../style/index.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DEFAULT_DATE_VAL_FORMAT = 'YYYY-MM-DD';
var DEFAULT_TIME_VAL_FORMAT = 'HH:mm';
var DEFAULT_DATE_TIME_VAL_FORMAT = DEFAULT_DATE_VAL_FORMAT + ' ' + DEFAULT_TIME_VAL_FORMAT;

var Datepicker = (0, _autobindDecorator2.default)(_class = function (_Component) {
  _inherits(Datepicker, _Component);

  function Datepicker(props) {
    _classCallCheck(this, Datepicker);

    var _this = _possibleConstructorReturn(this, (Datepicker.__proto__ || Object.getPrototypeOf(Datepicker)).call(this, props));

    var value = props.value,
        defaultValue = props.defaultValue,
        displayFormat = props.displayFormat,
        valueFormat = props.valueFormat;


    var newValueFormat = valueFormat || _this.getDefaultValueFormat(props);
    var newDisplayFormat = displayFormat || _this.getDefaultValueFormat(props);
    var val = (0, _moment3.toMoment)(value || defaultValue || '', newValueFormat);
    _this.state = {
      value: val,
      valueText: _this.formatValueToInputText(val, newDisplayFormat),
      valueFormat: newValueFormat,
      displayFormat: newDisplayFormat,
      open: false,
      focused: false
    };
    return _this;
  }

  _createClass(Datepicker, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var valueFormatChanged = this.props.valueFormat !== nextProps.valueFormat;
      var displayFormatChanged = this.props.displayFormat !== nextProps.displayFormat;

      var valueFormat = valueFormatChanged ? nextProps.valueFormat : this.state.valueFormat;
      var displayFormat = displayFormatChanged ? nextProps.displayFormat : this.state.displayFormat;

      this.setState({
        valueFormat: valueFormat,
        displayFormat: displayFormat
      });

      if ('value' in nextProps) {
        var val = (0, _moment3.toMoment)(nextProps.value, valueFormat);
        this.setState({
          value: val,
          valueText: this.formatValueToInputText(val, displayFormat)
        });
      }
    }
  }, {
    key: 'getDefaultValueFormat',
    value: function getDefaultValueFormat(props) {
      var type = props.type;


      switch (type) {
        case 'time':
          return DEFAULT_TIME_VAL_FORMAT;
        case 'datetime':
          return DEFAULT_DATE_TIME_VAL_FORMAT;
        case 'date':
          return DEFAULT_DATE_VAL_FORMAT;
        default:
          throw new Error(type + ' is not a valid type. Must be \'date\', \'datetime\', or \'time\'');
      }
    }
  }, {
    key: 'setValue',
    value: function setValue(valueText, value) {
      var onChange = this.props.onChange;


      if (!('value' in this.props)) {
        this.setState({
          valueText: valueText,
          value: value
        });
      }

      onChange(valueText, value);
    }
  }, {
    key: 'formatValueToInputText',
    value: function formatValueToInputText(momentDate) {
      var displayFormat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state.displayFormat;

      if (momentDate && momentDate.isValid()) {
        return momentDate.format(displayFormat);
      }
      return '';
    }
  }, {
    key: 'handleCalendarChange',
    value: function handleCalendarChange(date) {
      if (date.isValid()) {
        this.setValue(this.formatValueToInputText(date), date);
      }
      this.setState({ open: false });
    }
  }, {
    key: 'handleClockChange',
    value: function handleClockChange(valueText, valueDate) {
      var date = (0, _moment2.default)(valueDate);
      if (date.isValid()) {
        this.setValue(valueText, date);
      }
    }
  }, {
    key: 'handleTextChange',
    value: function handleTextChange(value, e) {
      e.stopPropagation();
      // Don't call this.props.onChange. We'll notify that a change happened when the text field is
      // blurred instead. This is done to avoid casting the text into a date object and then have it
      // fed back into the Datepicker. In some cases, if the user is between editing and the change
      // determines an invalid date was typed, the text may suddenly be changed out from under the
      // user, making it very difficult to change the text in the date. Instead just update the
      // internal state of the textfield. This means we don't get a truly controlled textfield, but
      // given the date conversion problems, we don't have any other viable option.
      this.setState({
        valueText: value
      });
    }
  }, {
    key: 'onFocus',
    value: function onFocus(e) {
      this.setState({ focused: true });
      if (this.props.onFocus) {
        this.props.onFocus(e);
      }
    }
  }, {
    key: 'handleTextBlur',
    value: function handleTextBlur(e) {
      var displayFormat = this.state.displayFormat;

      var text = e.target.value;
      var date = (0, _moment2.default)(text, displayFormat, true);
      if (!date || !date.isValid() || date._f !== displayFormat) {
        date = null;
      }
      this.setValue(text, date);
      this.setState({ focused: false });

      if (this.props.onBlur) {
        this.props.onBlur(e);
      }
    }
  }, {
    key: 'renderCalendar',
    value: function renderCalendar(props) {
      return _react2.default.createElement(_Calendar2.default, _extends({
        className: 'spectrum-Calendar--padded'
      }, props, {
        autoFocus: true,
        onChange: this.handleCalendarChange }));
    }
  }, {
    key: 'renderClock',
    value: function renderClock(props) {
      return _react2.default.createElement(
        'div',
        { className: 'react-spectrum-Datepicker-clockContainer' },
        _react2.default.createElement(_Clock2.default, _extends({}, props, {
          onChange: this.handleClockChange,
          displayFormat: this.state.displayFormat }))
      );
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          id = _props.id,
          type = _props.type,
          headerFormat = _props.headerFormat,
          max = _props.max,
          min = _props.min,
          startDay = _props.startDay,
          placeholder = _props.placeholder,
          quiet = _props.quiet,
          disabled = _props.disabled,
          invalid = _props.invalid,
          readOnly = _props.readOnly,
          required = _props.required,
          className = _props.className,
          placement = _props.placement,
          otherProps = _objectWithoutProperties(_props, ['id', 'type', 'headerFormat', 'max', 'min', 'startDay', 'placeholder', 'quiet', 'disabled', 'invalid', 'readOnly', 'required', 'className', 'placement']);

      var _state = this.state,
          valueText = _state.valueText,
          value = _state.value,
          valueFormat = _state.valueFormat,
          focused = _state.focused;


      var calendarProps = {
        id: id,
        headerFormat: headerFormat,
        max: max,
        min: min,
        startDay: startDay,
        disabled: disabled,
        invalid: invalid,
        readOnly: readOnly,
        required: required,
        value: value,
        valueFormat: valueFormat
      };

      var clockProps = {
        value: value,
        valueFormat: valueFormat,
        disabled: disabled,
        invalid: invalid,
        readOnly: readOnly,
        required: required
      };

      // We are using state for these.
      delete otherProps.value;
      delete otherProps.defaultValue;

      return _react2.default.createElement(
        _InputGroup2.default,
        {
          quiet: quiet,
          disabled: disabled,
          invalid: invalid,
          focused: focused,
          'aria-readonly': readOnly,
          'aria-required': required,
          'aria-owns': id,
          'aria-haspopup': true,
          className: (0, _classnames2.default)('spectrum-Datepicker', className) },
        _react2.default.createElement(_Textfield2.default, _extends({
          className: 'spectrum-InputGroup-field',
          'aria-invalid': invalid,
          placeholder: placeholder,
          value: valueText,
          quiet: quiet,
          readOnly: readOnly,
          disabled: disabled,
          invalid: invalid
        }, otherProps, {
          onChange: this.handleTextChange,
          onFocus: this.onFocus,
          onBlur: this.handleTextBlur })),
        _react2.default.createElement(
          _OverlayTrigger2.default,
          { trigger: 'click', placement: placement },
          _react2.default.createElement(_Button2.default, {
            variant: 'field',
            quiet: quiet,
            type: 'button',
            icon: type === 'time' ? _react2.default.createElement(_Clock4.default, null) : _react2.default.createElement(_Calendar4.default, null),
            invalid: invalid,
            disabled: readOnly || disabled }),
          _react2.default.createElement(
            _Popover2.default,
            { isDialog: false, open: true },
            _react2.default.createElement(
              'div',
              null,
              type !== 'time' && this.renderCalendar(calendarProps),
              type !== 'date' && this.renderClock(clockProps)
            )
          )
        )
      );
    }
  }]);

  return Datepicker;
}(_react.Component)) || _class;

Datepicker.propTypes = {
  id: _propTypes2.default.string,
  type: _propTypes2.default.oneOf(['date', 'datetime', 'time']),
  headerFormat: _propTypes2.default.string,
  max: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object, _propTypes2.default.number]),
  min: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object, _propTypes2.default.number]),
  value: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object, _propTypes2.default.number]),
  valueFormat: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),
  displayFormat: _propTypes2.default.string,
  startDay: _propTypes2.default.oneOf([0, 1, 2, 3, 4, 5, 6]),
  placeholder: _propTypes2.default.string,
  quiet: _propTypes2.default.bool,
  disabled: _propTypes2.default.bool,
  readOnly: _propTypes2.default.bool,
  required: _propTypes2.default.bool,
  invalid: _propTypes2.default.bool,
  onChange: _propTypes2.default.func,
  placement: _propTypes2.default.string
};
Datepicker.defaultProps = {
  id: (0, _createId2.default)(),
  type: 'date', // date, datetime, time
  headerFormat: 'MMMM YYYY',
  max: null,
  min: null,
  startDay: 0,
  quiet: false,
  disabled: false,
  invalid: false,
  readOnly: false,
  required: false,
  placeholder: 'Choose a date',
  onChange: function onChange() {},
  placement: 'right'
};
exports.default = Datepicker;