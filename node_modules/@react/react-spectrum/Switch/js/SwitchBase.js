'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class;

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _filterDOMProps = require('../../utils/filterDOMProps');

var _filterDOMProps2 = _interopRequireDefault(_filterDOMProps);

var _events = require('../../utils/events');

var _focusRing = require('../../utils/focusRing');

var _focusRing2 = _interopRequireDefault(_focusRing);

var _string = require('../../utils/string');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var SwitchBase = (0, _focusRing2.default)(_class = function (_Component) {
  _inherits(SwitchBase, _Component);

  function SwitchBase(props) {
    _classCallCheck(this, SwitchBase);

    var _this = _possibleConstructorReturn(this, (SwitchBase.__proto__ || Object.getPrototypeOf(SwitchBase)).call(this, props));

    _initialiseProps.call(_this);

    var checked = props.checked,
        defaultChecked = props.defaultChecked;


    _this.state = {
      checked: checked !== undefined ? checked : defaultChecked || false
    };
    return _this;
  }

  _createClass(SwitchBase, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if ('checked' in nextProps) {
        this.setState({
          checked: nextProps.checked
        });
      }
    }
  }, {
    key: 'focus',
    value: function focus() {
      if (this.inputRef && !this.disabled) {
        this.inputRef.focus();
      }
    }
  }, {
    key: 'setChecked',
    value: function setChecked(checked) {
      if (!('checked' in this.props)) {
        this.setState({
          checked: checked
        });
      }
    }
  }, {
    key: 'getInput',
    value: function getInput() {
      return this.inputRef;
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          label = _props.label,
          value = _props.value,
          name = _props.name,
          disabled = _props.disabled,
          required = _props.required,
          invalid = _props.invalid,
          readOnly = _props.readOnly,
          className = _props.className,
          style = _props.style,
          children = _props.children,
          inputType = _props.inputType,
          renderLabel = _props.renderLabel,
          inputClassName = _props.inputClassName,
          markClassName = _props.markClassName,
          markIcon = _props.markIcon,
          labelClassName = _props.labelClassName,
          onMouseDown = _props.onMouseDown,
          onMouseUp = _props.onMouseUp,
          otherProps = _objectWithoutProperties(_props, ['label', 'value', 'name', 'disabled', 'required', 'invalid', 'readOnly', 'className', 'style', 'children', 'inputType', 'renderLabel', 'inputClassName', 'markClassName', 'markIcon', 'labelClassName', 'onMouseDown', 'onMouseUp']);

      var checked = this.state.checked;

      var shouldRenderLabel = renderLabel && (label || children);
      var Element = shouldRenderLabel ? 'label' : 'div';

      // Don't let native browser change events bubble up to the root div.
      // Otherwise we double dispatch.
      delete otherProps.onChange;

      // Add aria-label that concatenates label and children
      // when renderLabel is false and no other aria-label is provided.
      var ariaLabel = null;
      if (otherProps['aria-label']) {
        ariaLabel = otherProps['aria-label'];
        delete otherProps['aria-label'];
      } else if (!renderLabel && (label || children)) {
        var labels = [];
        if (label) {
          labels.push(label);
        }
        if (children) {
          var str = (0, _string.getTextFromReact)(children);
          if (str !== label) {
            labels.push(str);
          }
        }
        ariaLabel = labels.join(' ');
      }

      return _react2.default.createElement(
        Element,
        {
          className: (0, _classnames2.default)(className, { 'is-invalid': invalid, 'is-disabled': disabled }),
          style: style },
        _react2.default.createElement('input', _extends({
          ref: function ref(el) {
            return _this2.inputRef = el;
          },
          type: inputType,
          className: inputClassName,
          checked: checked,
          disabled: disabled,
          name: name,
          value: value,
          required: required ? true : null,
          readOnly: readOnly,
          onChange: this.handleChange,
          onMouseDown: _events.focusAfterMouseEvent.bind(this, onMouseDown),
          onMouseUp: _events.focusAfterMouseEvent.bind(this, onMouseUp),
          'aria-invalid': invalid || null,
          'aria-checked': checked,
          'aria-label': ariaLabel
        }, (0, _filterDOMProps2.default)(otherProps))),
        _react2.default.createElement(
          'span',
          { className: markClassName },
          markIcon
        ),
        shouldRenderLabel && _react2.default.createElement(
          'span',
          { className: labelClassName },
          label,
          /* When both label and children are present,
           include a space character so that the text
           doesn't get smushed together. */
          label && children && ' ',
          children
        )
      );
    }
  }]);

  return SwitchBase;
}(_react.Component)) || _class;

SwitchBase.defaultProps = {
  renderLabel: true,
  // defaultChecked is undefined by default so we can repect
  // the value that is passed in without erroneously putting
  // both checked and defaultChecked on the input
  defaultChecked: undefined,
  disabled: false,
  required: false,
  invalid: false,
  readOnly: false,
  onChange: function onChange() {}
};

var _initialiseProps = function _initialiseProps() {
  var _this3 = this;

  this.handleChange = function (e) {
    var onChange = _this3.props.onChange;
    var checked = e.target.checked;


    _this3.setChecked(checked);
    onChange(checked, e);
  };
};

exports.default = SwitchBase;


SwitchBase.displayName = 'SwitchBase';