'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _collectionView = require('@react/collection-view');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TableViewLayout = function (_ListLayout) {
  _inherits(TableViewLayout, _ListLayout);

  function TableViewLayout() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, TableViewLayout);

    var _this = _possibleConstructorReturn(this, (TableViewLayout.__proto__ || Object.getPrototypeOf(TableViewLayout)).call(this, options));

    _this.insertionIndicator = null;
    return _this;
  }

  _createClass(TableViewLayout, [{
    key: 'getLayoutInfo',
    value: function getLayoutInfo(type, section, index) {

      if (type === 'insertion-indicator') {
        return this.insertionIndicator;
      }

      return _get(TableViewLayout.prototype.__proto__ || Object.getPrototypeOf(TableViewLayout.prototype), 'getLayoutInfo', this).call(this, type, section, index);
    }
  }, {
    key: 'getVisibleLayoutInfos',
    value: function getVisibleLayoutInfos(rect) {
      var layoutInfos = _get(TableViewLayout.prototype.__proto__ || Object.getPrototypeOf(TableViewLayout.prototype), 'getVisibleLayoutInfos', this).call(this, rect);

      if (this.insertionIndicator) {
        layoutInfos.push(this.insertionIndicator);
      }

      return layoutInfos;
    }
  }, {
    key: 'validate',
    value: function validate() {
      _get(TableViewLayout.prototype.__proto__ || Object.getPrototypeOf(TableViewLayout.prototype), 'validate', this).call(this);

      var count = this.collectionView.getSectionLength(0);
      this.contentHeight = count * this.rowHeight - 1;

      // Show the drop insertion indicator if the default drop position of the table view is "between",
      // the target's drop position is also "between", and the table is not empty.
      var dropTarget = this.collectionView._dropTarget;
      var showInsertionIndicator = dropTarget && this.component.props.dropPosition === 'between' && dropTarget.dropPosition === _collectionView.DragTarget.DROP_BETWEEN && count > 0;

      if (showInsertionIndicator) {
        var l = new _collectionView.LayoutInfo('insertion-indicator');
        l.rect = new _collectionView.Rect(0, Math.max(0, Math.min(this.contentHeight - 3, dropTarget.indexPath.index * this.rowHeight - 1)), this.collectionView.size.width, 2);
        l.zIndex = 10;
        this.insertionIndicator = l;
      } else {
        this.insertionIndicator = null;
      }
    }
  }, {
    key: 'getDropTarget',
    value: function getDropTarget(point) {
      var dropPosition = this.component.props.dropPosition === 'on' ? _collectionView.DragTarget.DROP_ON : _collectionView.DragTarget.DROP_BETWEEN;

      // If we are dropping between rows, the target should move to the
      // next item halfway through a row.
      if (dropPosition === _collectionView.DragTarget.DROP_BETWEEN) {
        point = point.copy();
        point.y += this.rowHeight / 2;
      }

      var indexPath = this.collectionView.indexPathAtPoint(point);
      if (indexPath) {
        return new _collectionView.DragTarget('item', indexPath, dropPosition);
      } else {
        var index = dropPosition === _collectionView.DragTarget.DROP_ON ? 0 : this.collectionView.getSectionLength(0);
        return new _collectionView.DragTarget('item', new _collectionView.IndexPath(0, index), _collectionView.DragTarget.DROP_BETWEEN);
      }
    }
  }]);

  return TableViewLayout;
}(_collectionView.ListLayout);

exports.default = TableViewLayout;