'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = Toast;

var _AlertMedium = require('../../Icon/core/AlertMedium');

var _AlertMedium2 = _interopRequireDefault(_AlertMedium);

var _Button = require('../../Button');

var _Button2 = _interopRequireDefault(_Button);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _CrossMedium = require('../../Icon/core/CrossMedium');

var _CrossMedium2 = _interopRequireDefault(_CrossMedium);

var _filterDOMProps = require('../../utils/filterDOMProps');

var _filterDOMProps2 = _interopRequireDefault(_filterDOMProps);

var _InfoMedium = require('../../Icon/core/InfoMedium');

var _InfoMedium2 = _interopRequireDefault(_InfoMedium);

var _intl = require('../../utils/intl');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _SuccessMedium = require('../../Icon/core/SuccessMedium');

var _SuccessMedium2 = _interopRequireDefault(_SuccessMedium);

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var intlMessages = {
  'cs-CZ': _interopRequireDefault(require('./../intl/cs-CZ.json')).default,
  'da-DK': _interopRequireDefault(require('./../intl/da-DK.json')).default,
  'de-DE': _interopRequireDefault(require('./../intl/de-DE.json')).default,
  'en-US': _interopRequireDefault(require('./../intl/en-US.json')).default,
  'es-ES': _interopRequireDefault(require('./../intl/es-ES.json')).default,
  'fi-FI': _interopRequireDefault(require('./../intl/fi-FI.json')).default,
  'fr-FR': _interopRequireDefault(require('./../intl/fr-FR.json')).default,
  'it-IT': _interopRequireDefault(require('./../intl/it-IT.json')).default,
  'ja-JP': _interopRequireDefault(require('./../intl/ja-JP.json')).default,
  'ko-KR': _interopRequireDefault(require('./../intl/ko-KR.json')).default,
  'nb-NO': _interopRequireDefault(require('./../intl/nb-NO.json')).default,
  'nl-NL': _interopRequireDefault(require('./../intl/nl-NL.json')).default,
  'pl-PL': _interopRequireDefault(require('./../intl/pl-PL.json')).default,
  'pt-BR': _interopRequireDefault(require('./../intl/pt-BR.json')).default,
  'ru-RU': _interopRequireDefault(require('./../intl/ru-RU.json')).default,
  'sv-SE': _interopRequireDefault(require('./../intl/sv-SE.json')).default,
  'tr-TR': _interopRequireDefault(require('./../intl/tr-TR.json')).default,
  'zh-CN': _interopRequireDefault(require('./../intl/zh-CN.json')).default,
  'zh-TW': _interopRequireDefault(require('./../intl/zh-TW.json')).default
};

if (process.env.SCALE_MEDIUM && process.env.SCALE_LARGE) {
  require('../../spectrum-css/toast/index.css');

  require('../../spectrum-css/toast/index-diff.css');
} else if (process.env.SCALE_LARGE) {
  require('../../spectrum-css/toast/index-lg.css');
} else {
  require('../../spectrum-css/toast/index.css');
}

if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHT) require('../../spectrum-css/toast/multiStops/light.css');
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARK) require('../../spectrum-css/toast/multiStops/dark.css');
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHTEST) require('../../spectrum-css/toast/multiStops/lightest.css');
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARKEST) require('../../spectrum-css/toast/multiStops/darkest.css');


var formatMessage = (0, _intl.messageFormatter)(intlMessages);

var ICONS = {
  error: _AlertMedium2.default,
  warning: _AlertMedium2.default,
  info: _InfoMedium2.default,
  success: _SuccessMedium2.default
};

var DEFAULT_ROLE = 'alert';

function Toast(_ref) {
  var variant = _ref.variant,
      children = _ref.children,
      closable = _ref.closable,
      onClose = _ref.onClose,
      onAction = _ref.onAction,
      className = _ref.className,
      timeout = _ref.timeout,
      actionLabel = _ref.actionLabel,
      otherProps = _objectWithoutProperties(_ref, ['variant', 'children', 'closable', 'onClose', 'onAction', 'className', 'timeout', 'actionLabel']);

  var Icon = ICONS[variant];
  var role = otherProps.role || DEFAULT_ROLE;
  var showToastButtons = actionLabel || closable;

  return _react2.default.createElement(
    'div',
    _extends({
      role: role,
      className: (0, _classnames2.default)('spectrum-Toast', _defineProperty({}, 'spectrum-Toast--' + variant, variant), className)
    }, (0, _filterDOMProps2.default)(otherProps)),
    Icon && _react2.default.createElement(Icon, { size: null, className: 'spectrum-Toast-typeIcon', alt: formatMessage(variant) }),
    _react2.default.createElement(
      'div',
      { className: 'spectrum-Toast-body' },
      _react2.default.createElement(
        'div',
        { className: 'spectrum-Toast-content' },
        children
      ),
      actionLabel && _react2.default.createElement(_Button2.default, { label: actionLabel, quiet: true, variant: 'overBackground', onClick: onAction })
    ),
    showToastButtons && _react2.default.createElement(
      'div',
      { className: 'spectrum-Toast-buttons' },
      closable && _react2.default.createElement(
        'button',
        { 'aria-label': formatMessage('close'), className: 'spectrum-ClearButton spectrum-ClearButton--medium spectrum-ClearButton--overBackground', onClick: onClose },
        _react2.default.createElement(_CrossMedium2.default, { size: null })
      )
    )
  );
}

Toast.propTypes = {
  /** Variant of toast to use */
  variant: _propTypes2.default.oneOf(['error', 'warning', 'info', 'success']),

  /** Whether to show close button on toast*/
  closable: _propTypes2.default.bool,

  /** Custom CSS class to add to the text field */
  className: _propTypes2.default.string,

  /** Label for action button */
  actionLabel: _propTypes2.default.string,

  /** Function called when toast is closed */
  onClose: _propTypes2.default.func,

  /** Function called when action button is clicked */
  onAction: _propTypes2.default.func
};