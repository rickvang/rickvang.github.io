{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/rvang/Desktop/Spectrum/testapp/node_modules/@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _collectionView = require('@react/collection-view');\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var gen = fn.apply(this, arguments);\n    return new Promise(function (resolve, reject) {\n      function step(key, arg) {\n        try {\n          var info = gen[key](arg);\n          var value = info.value;\n        } catch (error) {\n          reject(error);\n          return;\n        }\n\n        if (info.done) {\n          resolve(value);\n        } else {\n          return Promise.resolve(value).then(function (value) {\n            step(\"next\", value);\n          }, function (err) {\n            step(\"throw\", err);\n          });\n        }\n      }\n\n      return step(\"next\");\n    });\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/*\n * TableViewDataSource is the super class for all data sources used by TableView.\n * @deprecated\n */\n\n\nvar TableViewDataSource = function (_DataSource) {\n  _inherits(TableViewDataSource, _DataSource);\n\n  function TableViewDataSource() {\n    _classCallCheck(this, TableViewDataSource);\n\n    var _this = _possibleConstructorReturn(this, (TableViewDataSource.__proto__ || Object.getPrototypeOf(TableViewDataSource)).call(this));\n\n    console.warn('TableViewDataSource is deprecated and will be removed in the next major version of react-spectrum. Please switch to the new TableView API using ListDataSource. See http://react-spectrum.corp.adobe.com/components/TableView for details.');\n    _this.columns = _this.getColumns();\n    _this.sortColumn = null;\n    _this.sortDir = -1;\n    return _this;\n  }\n\n  _createClass(TableViewDataSource, [{\n    key: 'getNumberOfSections',\n    value: function getNumberOfSections() {\n      return 1;\n    }\n  }, {\n    key: 'getSectionLength',\n    value: function getSectionLength(section) {\n      return this.getNumberOfRows(section);\n    }\n  }, {\n    key: 'getItem',\n    value: function getItem(section, index) {\n      var _this2 = this;\n\n      return this.columns.map(function (column) {\n        return _this2.getCell(column, index, section);\n      });\n    }\n    /**\n     * Returns a list of columns in the TableView\n     * @return {object[]}\n     * @abstract\n     */\n\n  }, {\n    key: 'getColumns',\n    value: function getColumns() {\n      throw new Error('getColumns must be implemented by subclasses');\n    }\n    /**\n     * Returns the number of rows in the TableView\n     * @return {number}\n     * @abstract\n     */\n\n  }, {\n    key: 'getNumberOfRows',\n    value: function getNumberOfRows(section) {\n      throw new Error('getNumberOfRows must be implemented by subclasses');\n    }\n    /**\n     * Returns the data for a cell in the TableView\n     * @return {any}\n     * @abstract\n     */\n\n  }, {\n    key: 'getCell',\n    value: function getCell(column, row, section) {\n      throw new Error('getCell must be implemented by subclasses');\n    }\n  }, {\n    key: 'getSectionHeader',\n    value: function getSectionHeader(section) {\n      return null;\n    }\n  }, {\n    key: 'performSort',\n    value: function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(sortDescriptor) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.sortColumn = sortDescriptor.column;\n                this.sortDir = sortDescriptor.direction;\n                this.sort(this.sortColumn, this.sortDir);\n\n              case 3:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function performSort(_x) {\n        return _ref.apply(this, arguments);\n      }\n\n      return performSort;\n    }()\n  }, {\n    key: 'performLoad',\n    value: function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n              case 'end':\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function performLoad() {\n        return _ref2.apply(this, arguments);\n      }\n\n      return performLoad;\n    }()\n  }, {\n    key: 'performLoadMore',\n    value: function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.loadMore();\n\n              case 2:\n              case 'end':\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function performLoadMore() {\n        return _ref3.apply(this, arguments);\n      }\n\n      return performLoadMore;\n    }()\n    /**\n     * Called by the TableView when scrolling near the bottom. You can use this\n     * opportunity to load more data, e.g. for infinite scrolling.\n     * @abstract\n     */\n\n  }, {\n    key: 'loadMore',\n    value: function () {\n      var _ref4 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4() {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n              case 'end':\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function loadMore() {\n        return _ref4.apply(this, arguments);\n      }\n\n      return loadMore;\n    }()\n  }, {\n    key: 'sort',\n\n    /**\n     * Called by the TableView when a column header is clicked. You should sort your data\n     * accordingly and call `reloadData`.\n     * @param {object} column\n     * @param {number} dir\n     * @abstract\n     */\n    value: function sort(column, dir) {\n      throw new Error('sort must be implemented by subclasses');\n    }\n    /**\n     * Reloads the data in the TableView\n     */\n\n  }, {\n    key: 'reloadData',\n    value: function reloadData() {\n      this.emit('reloadSection', 0, false);\n    }\n  }]);\n\n  return TableViewDataSource;\n}(_collectionView.DataSource);\n\nexports.default = TableViewDataSource;","map":null,"metadata":{},"sourceType":"script"}