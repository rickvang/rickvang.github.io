{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/**\n * This class represents a numeric range between\n * a starting and ending value, inclusive.\n */\n\n\nvar Range = function () {\n  /**\n   * Creates a new Range\n   * @param {number} start the starting index of the range\n   * @param {number} end the ending index of the range, inclusive\n   */\n  function Range(start, end) {\n    _classCallCheck(this, Range);\n    /**\n     * The starting index of the range\n     * @type {number}\n     */\n\n\n    this.start = start;\n    /**\n     * The ending index of the range, inclusive\n     * @type {number}\n     */\n\n    this.end = end;\n\n    if (end < start) {\n      throw new Error('Invalid range: ' + start + '...' + end);\n    }\n  }\n  /**\n   * The length of the range\n   * @type {number}\n   */\n\n\n  _createClass(Range, [{\n    key: 'equals',\n\n    /**\n     * Returns whether this range is equal to the given range\n     * @param {Range} other the range to compare\n     * @return {boolean}\n     */\n    value: function equals(other) {\n      return other.start === this.start && other.end === this.end;\n    }\n    /**\n     * Returns a copy of the range\n     * @return {Range}\n     */\n\n  }, {\n    key: 'copy',\n    value: function copy() {\n      return new Range(this.start, this.end);\n    }\n    /**\n     * Returns whether the given value is in the range\n     * @param {number} index the index to check\n     * @return {boolean}\n     */\n\n  }, {\n    key: 'contains',\n    value: function contains(index) {\n      return index >= this.start && index <= this.end;\n    }\n  }, {\n    key: 'length',\n    get: function get() {\n      return this.end - this.start + 1;\n    }\n  }]);\n\n  return Range;\n}();\n\nexports.default = Range;","map":null,"metadata":{},"sourceType":"script"}