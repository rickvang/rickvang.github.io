{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EditableCollectionView = exports.CollectionView = undefined;\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _src = require('../src');\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _ReactBackend = require('./ReactBackend');\n\nvar _ReactBackend2 = _interopRequireDefault(_ReactBackend);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _ReactReusableView = require('./ReactReusableView');\n\nvar _ReactReusableView2 = _interopRequireDefault(_ReactReusableView);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar CollectionView = exports.CollectionView = createReactComponent(_src.CollectionView);\nvar EditableCollectionView = exports.EditableCollectionView = createReactComponent(_src.EditableCollectionView);\n\nfunction createReactComponent(Super) {\n  var Collection = function (_Super) {\n    _inherits(Collection, _Super);\n\n    function Collection(props) {\n      _classCallCheck(this, Collection);\n\n      var _this = _possibleConstructorReturn(this, (Collection.__proto__ || Object.getPrototypeOf(Collection)).call(this, props));\n\n      _react2.default.Component.call(_this, props);\n\n      _this.reactEvents = {};\n      _this.backend = _ReactBackend2.default;\n      _this.updateSize = _this.updateSize.bind(_this);\n\n      if (props.className) {\n        _this.addClass(props.className);\n      }\n\n      return _this;\n    }\n\n    _createClass(Collection, [{\n      key: 'createView',\n      value: function createView(type, section, index) {\n        return new _ReactReusableView2.default(type);\n      }\n    }, {\n      key: '_getDragViewFromDelegate',\n      value: function _getDragViewFromDelegate(target, indexPaths) {\n        if (this.delegate.renderDragView) {\n          var view = new _src.ReusableView();\n          var element = this.delegate.renderDragView(target, indexPaths);\n          view.replaceChildren(element);\n          return view;\n        }\n      }\n      /**\n       * Returns the IndexPath that the given React component represents.\n       * Returns null if the view is not currently visible.\n       * @param {ReactComponent} component\n       * @return {IndexPath}\n       */\n\n    }, {\n      key: 'indexPathForComponent',\n      value: function indexPathForComponent(component) {\n        return this.indexPathForView(component.props.reusableView);\n      }\n      /**\n       * Returns the visible React component for the given section and index.\n       * You can also pass an IndexPath as the only argument instead.\n       * Returns null if the view is not currently visible.\n       * @param {number|IndexPath} section\n       * @param {number} index\n       * @return {ReactComponent}\n       */\n\n    }, {\n      key: 'componentForItem',\n      value: function componentForItem(section, index) {\n        var view = this.getItemView(section, index);\n        return view && view.component;\n      }\n    }, {\n      key: 'componentDidMount',\n      value: function componentDidMount() {\n        this.updateSize(this.props);\n        this.updateEvents(this.props);\n\n        if (!this.props.width || !this.props.height) {\n          window.addEventListener('resize', this.updateSize, false);\n        }\n      }\n    }, {\n      key: 'shouldComponentUpdate',\n      value: function shouldComponentUpdate(props) {\n        // This component should never re-render. All prop\n        // changes are handled by componentWillReceiveProps.\n        return false;\n      }\n      /**\n       * Updates the size of the collection view.\n       * By default, it will fill the containing dom node.\n       * @param {object} props\n       */\n\n    }, {\n      key: 'updateSize',\n      value: function updateSize() {\n        var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        var dom = _reactDom2.default.findDOMNode(this);\n\n        this.size = new _src.Size(props.width || dom.offsetWidth, props.height || dom.offsetHeight);\n      }\n    }, {\n      key: 'componentWillReceiveProps',\n      value: function componentWillReceiveProps(props) {\n        this.updateSize(props); // Update CSS class name\n\n        if (props.className !== this.props.className) {\n          if (this.props.className) {\n            this.removeClass(this.props.className);\n          }\n\n          this.addClass(props.className);\n        } // Update CollectionView properties\n\n\n        for (var key in props) {\n          if (this[key] !== undefined && props[key] !== undefined && props[key] !== this[key]) {\n            this[key] = props[key];\n          }\n        } // Update events\n\n\n        this.updateEvents(props);\n      }\n    }, {\n      key: 'eventName',\n      value: function eventName(key) {\n        return key.replace(/^on([A-Z])/, function (m, letter) {\n          return letter.toLowerCase();\n        });\n      }\n    }, {\n      key: 'updateEvents',\n      value: function updateEvents(props) {\n        // Remove events that are no longer on the props\n        for (var key in this.reactEvents) {\n          if (!props[key]) {\n            var event = this.eventName(key);\n            this.removeListener(event, this.reactEvents[key]);\n            delete this.reactEvents[key];\n          }\n        } // Replace/add events from the new props\n\n\n        for (var _key in props) {\n          if (/^on[A-Z]/.test(_key) && this.reactEvents[_key] !== props[_key]) {\n            var _event = this.eventName(_key); // Remove old event if any\n\n\n            if (this.reactEvents[_key]) {\n              this.removeListener(_event, this.reactEvents[_key]);\n              delete this.reactEvents[_key];\n            } // Add new event, if it exists\n\n\n            if (props[_key]) {\n              this.on(_event, props[_key]);\n              this.reactEvents[_key] = props[_key];\n            }\n          }\n        }\n      }\n    }, {\n      key: 'componentWillUnmount',\n      value: function componentWillUnmount() {\n        if (this._teardownEvents) {\n          this._teardownEvents();\n\n          window.removeEventListener('resize', this.updateSize, false);\n        }\n      }\n    }]);\n\n    return Collection;\n  }(Super); // Make it into a React component by extending the prototype\n\n\n  Collection.displayName = Super.name;\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = Object.getOwnPropertyNames(_react2.default.Component.prototype)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var key = _step.value;\n      Object.defineProperty(Collection.prototype, key, Object.getOwnPropertyDescriptor(_react2.default.Component.prototype, key));\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return Collection;\n}","map":null,"metadata":{},"sourceType":"script"}