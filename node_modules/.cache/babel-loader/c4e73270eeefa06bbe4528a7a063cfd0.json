{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isUrl = isUrl;\nexports.normalize = normalize;\nexports.removeDiacritics = removeDiacritics;\nexports.getTextFromReact = getTextFromReact;\n\nfunction isUrl(string) {\n  return string && !!string.match(/\\/|:|\\./g);\n}\n\nfunction normalize() {\n  var string = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var normalizationForm = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'NFC';\n\n  if ('normalize' in String.prototype) {\n    string = string.normalize(normalizationForm);\n  }\n\n  return string;\n}\n\nfunction removeDiacritics() {\n  var string = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var normalizationForm = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'NFD';\n  return normalize(string, normalizationForm.replace('C', 'D')).replace(/[\\u0300-\\u036f]/g, '');\n}\n/** adapted from https://github.com/rwu823/react-addons-text-content */\n\n\nfunction getTextFromReact(reactChild) {\n  var result = '';\n\n  var addChildTextToResult = function addChildTextToResult(child) {\n    if (typeof child === 'string' || typeof child === 'number') {\n      result = result + ' ' + child;\n    } else if (Array.isArray(child)) {\n      child.forEach(function (c) {\n        return addChildTextToResult(c);\n      });\n    } else if (child && child.props) {\n      var children = child.props.children;\n\n      if (Array.isArray(children)) {\n        children.forEach(function (c) {\n          return addChildTextToResult(c);\n        });\n      } else {\n        addChildTextToResult(children);\n      }\n    }\n  };\n\n  addChildTextToResult(reactChild); // clean up adjacent whitespace in result\n\n  var adjacentWhitespaceRegex = /(\\s)(?:\\s+)/g;\n  return result.trim().replace(adjacentWhitespaceRegex, '$1');\n}","map":null,"metadata":{},"sourceType":"script"}