'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _collectionView = require('@react/collection-view');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BaseLayout = function (_Layout) {
  _inherits(BaseLayout, _Layout);

  function BaseLayout() {
    _classCallCheck(this, BaseLayout);

    return _possibleConstructorReturn(this, (BaseLayout.__proto__ || Object.getPrototypeOf(BaseLayout)).apply(this, arguments));
  }

  _createClass(BaseLayout, [{
    key: 'shouldShowDropSpacing',
    value: function shouldShowDropSpacing() {
      var dropTarget = this.collectionView._dropTarget;
      var dragTarget = this.collectionView._dragTarget;

      // If items are being reordered, don't show the drop spacing if the drop target is right next to the drag target.
      // When dropped, the item will not move since the target is the same as the source.
      if (dropTarget && dragTarget && dragTarget.indexPath.section === dropTarget.indexPath.section && (dragTarget.indexPath.index === dropTarget.indexPath.index || dragTarget.indexPath.index + 1 === dropTarget.indexPath.index)) {
        return false;
      }

      // Only show the drop spacing if dropping between two items.
      // If the default drop position is not "between", then we could be dropping on the entire grid instead of an item.
      return dropTarget && dropTarget.dropPosition === _collectionView.DragTarget.DROP_BETWEEN && this.component.props.dropPosition === 'between';
    }
  }, {
    key: 'getInitialLayoutInfo',
    value: function getInitialLayoutInfo(type, section, index) {
      var initial = _get(BaseLayout.prototype.__proto__ || Object.getPrototypeOf(BaseLayout.prototype), 'getInitialLayoutInfo', this).call(this, type, section, index);

      initial.opacity = 0;
      initial.transform = 'scale3d(0.8, 0.8, 0.8)';

      return initial;
    }
  }, {
    key: 'getFinalLayoutInfo',
    value: function getFinalLayoutInfo(type, section, index) {
      var final = _get(BaseLayout.prototype.__proto__ || Object.getPrototypeOf(BaseLayout.prototype), 'getFinalLayoutInfo', this).call(this, type, section, index);

      final.opacity = 0;
      final.transform = 'scale3d(0.8, 0.8, 0.8)';

      return final;
    }
  }, {
    key: '_findClosestLayoutInfo',
    value: function _findClosestLayoutInfo(target, rect) {
      var layoutInfos = this.getVisibleLayoutInfos(rect);
      var best = null;
      var bestDistance = Infinity;

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = layoutInfos[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var cur = _step.value;

          if (cur.type === 'item') {
            var dist = Math.pow(target.x - cur.rect.x, 2) + Math.pow(target.y - cur.rect.y, 2);
            if (dist < bestDistance) {
              best = cur;
              bestDistance = dist;
            }
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return best;
    }
  }, {
    key: '_findClosest',
    value: function _findClosest(target, rect) {
      var best = this._findClosestLayoutInfo(target, rect);
      if (best) {
        return new _collectionView.IndexPath(best.section, best.index);
      }

      return null;
    }
  }]);

  return BaseLayout;
}(_collectionView.Layout);

exports.default = BaseLayout;