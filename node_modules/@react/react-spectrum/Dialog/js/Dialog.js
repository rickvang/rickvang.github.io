'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class;

var _autobindDecorator = require('autobind-decorator');

var _autobindDecorator2 = _interopRequireDefault(_autobindDecorator);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _DialogButtons = require('./DialogButtons');

var _DialogButtons2 = _interopRequireDefault(_DialogButtons);

var _DialogHeader = require('./DialogHeader');

var _DialogHeader2 = _interopRequireDefault(_DialogHeader);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

if (process.env.SCALE_MEDIUM && process.env.SCALE_LARGE) {
  require('../../spectrum-css/dialog/index.css');

  require('../../spectrum-css/dialog/index-diff.css');
} else if (process.env.SCALE_LARGE) {
  require('../../spectrum-css/dialog/index-lg.css');
} else {
  require('../../spectrum-css/dialog/index.css');
}

if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHT) require('../../spectrum-css/dialog/multiStops/light.css');
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARK) require('../../spectrum-css/dialog/multiStops/dark.css');
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHTEST) require('../../spectrum-css/dialog/multiStops/lightest.css');
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARKEST) require('../../spectrum-css/dialog/multiStops/darkest.css');

var Dialog = (0, _autobindDecorator2.default)(_class = function (_Component) {
  _inherits(Dialog, _Component);

  function Dialog() {
    _classCallCheck(this, Dialog);

    return _possibleConstructorReturn(this, (Dialog.__proto__ || Object.getPrototypeOf(Dialog)).apply(this, arguments));
  }

  _createClass(Dialog, [{
    key: '_onAction',


    /*
     * Calls the props.onConfirm() or props.onCancel() asynchronously if present,
     * then props.onClose() on any response except false
     */
    value: function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(action) {
        var shouldClose,
            _len,
            args,
            _key,
            _args = arguments;

        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                shouldClose = true;

                if (!action) {
                  _context.next = 6;
                  break;
                }

                for (_len = _args.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = _args[_key];
                }

                _context.next = 5;
                return action.apply(undefined, args);

              case 5:
                shouldClose = _context.sent;

              case 6:
                if (shouldClose !== false) {
                  this.props.onClose();
                }

              case 7:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function _onAction(_x) {
        return _ref.apply(this, arguments);
      }

      return _onAction;
    }()
  }, {
    key: 'onConfirm',
    value: function onConfirm() {
      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      this._onAction.apply(this, [this.props.onConfirm].concat(args));
    }
  }, {
    key: 'onCancel',
    value: function onCancel() {
      this._onAction(this.props.onCancel);
    }
  }, {
    key: 'onKeyDown',
    value: function onKeyDown(e) {
      var _props = this.props,
          confirmDisabled = _props.confirmDisabled,
          keyboardConfirm = _props.keyboardConfirm,
          onKeyDown = _props.onKeyDown;

      if (onKeyDown) {
        onKeyDown(e);
      }
      switch (e.key) {
        case 'Enter':
          if (!confirmDisabled && keyboardConfirm) {
            this.onConfirm();
          }
          break;
        case 'Esc':
        case 'Escape':
          this.onCancel();
          break;
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _classNames;

      var _props2 = this.props,
          children = _props2.children,
          _props2$className = _props2.className,
          className = _props2$className === undefined ? '' : _props2$className,
          cancelLabel = _props2.cancelLabel,
          confirmLabel = _props2.confirmLabel,
          secondaryLabel = _props2.secondaryLabel,
          open = _props2.open,
          title = _props2.title,
          variant = _props2.variant,
          mode = _props2.mode,
          role = _props2.role,
          otherProps = _objectWithoutProperties(_props2, ['children', 'className', 'cancelLabel', 'confirmLabel', 'secondaryLabel', 'open', 'title', 'variant', 'mode', 'role']);

      var fullscreen = mode === 'fullscreen' || mode === 'fullscreenTakeover';
      var derivedVariant = variant || (cancelLabel && confirmLabel ? 'confirmation' : 'information');

      delete otherProps.modalContent;
      delete otherProps.tabIndex;

      return _react2.default.createElement(
        'div',
        {
          className: (0, _classnames2.default)('spectrum-Dialog', (_classNames = {}, _defineProperty(_classNames, 'spectrum-Dialog--' + mode, mode), _defineProperty(_classNames, 'spectrum-Dialog--error', variant === 'error'), _defineProperty(_classNames, 'is-open', open), _classNames), className),
          role: role,
          tabIndex: -1,
          onKeyDown: this.onKeyDown },
        title && _react2.default.createElement(_DialogHeader2.default, _extends({
          variant: derivedVariant,
          title: title,
          fullscreen: fullscreen,
          confirmLabel: confirmLabel,
          secondaryLabel: secondaryLabel,
          cancelLabel: cancelLabel
        }, otherProps, {
          onConfirm: this.onConfirm,
          onCancel: this.onCancel })),
        title ? _react2.default.createElement(
          'div',
          { className: 'spectrum-Dialog-content' },
          children
        ) : children,
        !fullscreen && confirmLabel && _react2.default.createElement(_DialogButtons2.default, _extends({}, this.props, {
          variant: derivedVariant,
          className: 'spectrum-Dialog-footer',
          onConfirm: this.onConfirm,
          onCancel: this.onCancel }))
      );
    }
  }]);

  return Dialog;
}(_react.Component)) || _class;

Dialog.propTypes = {
  backdropClickable: _propTypes2.default.bool,
  cancelLabel: _propTypes2.default.string,
  className: _propTypes2.default.string,
  confirmDisabled: _propTypes2.default.bool,
  confirmLabel: _propTypes2.default.string,
  secondaryLabel: _propTypes2.default.string,
  onClose: _propTypes2.default.func,
  onCancel: _propTypes2.default.func,
  onConfirm: _propTypes2.default.func,
  open: _propTypes2.default.bool,
  title: _propTypes2.default.node,
  variant: _propTypes2.default.oneOf(['confirmation', 'information', 'destructive', 'error']),
  mode: _propTypes2.default.oneOf(['alert', 'fullscreen', 'fullscreenTakeover']),
  role: _propTypes2.default.oneOf(['dialog', 'alertdialog']),
  autoFocusButton: _propTypes2.default.oneOf(['cancel', 'confirm', 'secondary', null]),
  keyboardConfirm: _propTypes2.default.bool
};
Dialog.defaultProps = {
  backdropClickable: false,
  confirmDisabled: false,
  keyboardConfirm: false,
  open: true,
  role: 'dialog',
  autoFocusButton: null,
  onClose: function onClose() {}
};
exports.default = Dialog;