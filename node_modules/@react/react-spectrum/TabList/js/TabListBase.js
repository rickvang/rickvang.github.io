'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _desc, _value, _class2;

var _autobindDecorator = require('autobind-decorator');

var _autobindDecorator2 = _interopRequireDefault(_autobindDecorator);

var _FocusManager = require('../../utils/FocusManager');

var _FocusManager2 = _interopRequireDefault(_FocusManager);

var _focusRing = require('../../utils/focusRing');

var _focusRing2 = _interopRequireDefault(_focusRing);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object['ke' + 'ys'](descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object['define' + 'Property'](target, property, desc);
    desc = null;
  }

  return desc;
}

var TAB_ITEM_SELECTOR = '[role=tab]:not([aria-disabled])';
var TAB_ITEM_SELECTED_SELECTOR = TAB_ITEM_SELECTOR + '[aria-selected=true]';

/**
 * selectedIndex: The index of the StepList that should be selected. When selectedIndex is
 * specified, the component is in a controlled state and a Step can only be selected by changing the
 * selectedIndex prop value. By default, the first Step will be selected.
 *
 * defaultSelectedIndex: The same as selectedIndex except that the component is in an uncontrolled
 * state.
 *
 * onChange: A function that will be called when an Step is selected or deselected.
 * It will be passed the updated selected index.
 *
 * childMappingFunction: allows you to map additional properties for each tab child
 * @private
 */

var TabListBase = (0, _focusRing2.default)(_class = (_class2 = function (_Component) {
  _inherits(TabListBase, _Component);

  function TabListBase() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, TabListBase);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = TabListBase.__proto__ || Object.getPrototypeOf(TabListBase)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      selectedIndex: TabListBase.getDefaultSelectedIndex(_this.props)
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(TabListBase, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if ('selectedIndex' in nextProps) {
        this.setState({
          selectedIndex: nextProps.selectedIndex
        });
      }
    }
  }, {
    key: 'onClickItem',
    value: function onClickItem(selectedIndex, e) {
      this.setSelectedIndex(selectedIndex, e);
    }
  }, {
    key: 'onFocus',
    value: function onFocus(selectedIndex, e) {
      if (this.props.keyboardActivation === 'automatic' && !this.isMouseDown) {
        this.setSelectedIndex(selectedIndex, e);
      }
    }
  }, {
    key: 'onMouseDown',
    value: function onMouseDown(e) {
      this.isMouseDown = true;
      window.addEventListener('mouseup', this.onMouseUp);

      // ensure Tab receives keyboard focus in Safari
      e.currentTarget.focus();
    }
  }, {
    key: 'onMouseUp',
    value: function onMouseUp(e) {
      this.isMouseDown = false;
      window.removeEventListener('mouseup', this.onMouseUp);
    }
  }, {
    key: 'setSelectedIndex',
    value: function setSelectedIndex(selectedIndex, e) {
      var lastSelectedIndex = this.state.selectedIndex;

      // If selectedIndex is defined on props then this is a controlled component and we shouldn't
      // change our own state.
      if (!('selectedIndex' in this.props)) {
        this.setState({
          selectedIndex: selectedIndex
        });
      }

      if (lastSelectedIndex !== selectedIndex) {
        this.props.onChange(selectedIndex);
      }
    }
  }, {
    key: 'getChildProps',
    value: function getChildProps(child, index) {
      var selectedIndex = this.state.selectedIndex;
      var selected = +selectedIndex === index;

      return _extends({}, this.getMappedChildProps(child, index), {
        selected: selected,
        tabIndex: selected ? 0 : -1,
        onClick: this.getChildOnClick(child, index),
        onFocus: this.getChildOnFocus(child, index),
        onMouseDown: this.getChildOnMouseDown(child)
      });
    }
  }, {
    key: 'getMappedChildProps',
    value: function getMappedChildProps(child, index) {
      var childMappingFunction = this.props.childMappingFunction;

      if (!childMappingFunction) {
        return {};
      }
      return childMappingFunction(this, child, index);
    }
  }, {
    key: 'getChildOnClick',
    value: function getChildOnClick(child, index) {
      if (this.props.disabled) {
        return null;
      }
      var tabListOnClick = this.onClickItem.bind(this, index);
      return function (e) {
        if (child.props.onClick) {
          child.props.onClick(index);
        }
        tabListOnClick(e);
      };
    }
  }, {
    key: 'getChildOnFocus',
    value: function getChildOnFocus(child, index) {
      var _this2 = this;

      if (this.props.disabled) {
        return null;
      }
      return function (e) {
        if (child.props.onFocus) {
          child.props.onFocus(index);
        }
        _this2.onFocus(index, e);
      };
    }
  }, {
    key: 'getChildOnMouseDown',
    value: function getChildOnMouseDown(child, index) {
      var _this3 = this;

      if (this.props.disabled) {
        return null;
      }
      return function (e) {
        if (child.props.onMouseDown) {
          child.props.onMouseDown(e);
        }
        _this3.onMouseDown(e);
      };
    }
  }, {
    key: 'getItems',
    value: function getItems() {
      var _this4 = this;

      var children = this.props.children;

      return _react2.default.Children.toArray(children).map(function (child, index) {
        return child ? _react2.default.cloneElement(child, _this4.getChildProps(child, index)) : null;
      });
    }
  }, {
    key: 'cleanProps',
    value: function cleanProps() {
      var otherProps = _objectWithoutProperties(this.props, []);

      delete otherProps.defaultSelectedIndex;
      delete otherProps.selectedIndex;

      // We don't need/want to add onChange to the div because we call it manually when we hear that
      // a tab has been clicked. If we were to add the handler to the div, it would be
      // called every time any input inside a tab is changed.
      delete otherProps.onChange;
      delete otherProps.disabled;
      delete otherProps.childMappingFunction;
      delete otherProps.keyboardActivation;

      // div element should have aria-orientation rather than orientation
      otherProps['aria-orientation'] = otherProps.orientation;
      delete otherProps.orientation;

      return otherProps;
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        _FocusManager2.default,
        { itemSelector: TAB_ITEM_SELECTOR, selectedItemSelector: TAB_ITEM_SELECTED_SELECTOR, orientation: this.props.orientation === 'vertical' ? 'both' : 'horizontal' },
        _react2.default.createElement(
          'div',
          _extends({}, this.cleanProps(), {
            role: 'tablist' }),
          this.getItems()
        )
      );
    }
  }], [{
    key: 'getDefaultSelectedIndex',
    value: function getDefaultSelectedIndex(props) {
      if (props.selectedIndex != null) {
        return props.selectedIndex;
      }

      if (props.defaultSelectedIndex != null) {
        return props.defaultSelectedIndex;
      }

      var firstSelected = _react2.default.Children.toArray(props.children).findIndex(function (c) {
        return c && c.props.selected;
      });
      if (firstSelected !== -1) {
        return firstSelected;
      }

      return 0;
    }
  }]);

  return TabListBase;
}(_react.Component), (_applyDecoratedDescriptor(_class2.prototype, 'onMouseUp', [_autobindDecorator2.default], Object.getOwnPropertyDescriptor(_class2.prototype, 'onMouseUp'), _class2.prototype)), _class2)) || _class;

exports.default = TabListBase;


TabListBase.propTypes = {
  defaultSelectedIndex: _propTypes2.default.number,
  disabled: _propTypes2.default.bool,
  orientation: _propTypes2.default.oneOf(['horizontal', 'vertical']),
  keyboardActivation: _propTypes2.default.oneOf(['automatic', 'manual']),
  onChange: function onChange() {}
};

TabListBase.defaultProps = {
  defaultSelectedIndex: 0,
  disabled: false,
  orientation: 'horizontal',
  keyboardActivation: 'automatic',
  onChange: function onChange() {}
};

TabListBase.displayName = 'TabListBase';