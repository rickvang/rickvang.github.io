'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class;

var _autobindDecorator = require('autobind-decorator');

var _autobindDecorator2 = _interopRequireDefault(_autobindDecorator);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _CollectionView = require('../../utils/CollectionView');

var _CollectionView2 = _interopRequireDefault(_CollectionView);

var _createId = require('../../utils/createId');

var _createId2 = _interopRequireDefault(_createId);

var _collectionView = require('@react/collection-view');

var _ListDataSource = require('../../ListDataSource');

var _ListDataSource2 = _interopRequireDefault(_ListDataSource);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _TableCell = require('./TableCell');

var _TableCell2 = _interopRequireDefault(_TableCell);

var _TableRow = require('./TableRow');

var _TableRow2 = _interopRequireDefault(_TableRow);

var _TableViewDataSource = require('./TableViewDataSource');

var _TableViewDataSource2 = _interopRequireDefault(_TableViewDataSource);

var _TableViewLayout = require('./TableViewLayout');

var _TableViewLayout2 = _interopRequireDefault(_TableViewLayout);

require('../style/index.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

if (process.env.SCALE_MEDIUM && process.env.SCALE_LARGE) {
  require('../../spectrum-css/table/index.css');

  require('../../spectrum-css/table/index-diff.css');
} else if (process.env.SCALE_LARGE) {
  require('../../spectrum-css/table/index-lg.css');
} else {
  require('../../spectrum-css/table/index.css');
}

if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHT) require('../../spectrum-css/table/multiStops/light.css');
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARK) require('../../spectrum-css/table/multiStops/dark.css');
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHTEST) require('../../spectrum-css/table/multiStops/lightest.css');
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARKEST) require('../../spectrum-css/table/multiStops/darkest.css');


var columnShape = _propTypes2.default.shape({
  title: _propTypes2.default.string.isRequired,
  sortable: _propTypes2.default.bool,
  width: _propTypes2.default.number,
  minWidth: _propTypes2.default.number,
  maxWidth: _propTypes2.default.number,
  // resizable: PropTypes.bool,
  divider: _propTypes2.default.bool,
  align: _propTypes2.default.oneOf(['left', 'center', 'right'])
});

var sortDescriptorShape = _propTypes2.default.shape({
  column: columnShape.isRequired,
  direction: _propTypes2.default.oneOf([-1, 1]).isRequired
});

var TableView = (0, _autobindDecorator2.default)(_class = function (_Component) {
  _inherits(TableView, _Component);

  function TableView(props) {
    _classCallCheck(this, TableView);

    var _this = _possibleConstructorReturn(this, (TableView.__proto__ || Object.getPrototypeOf(TableView)).call(this, props));

    _this.tableViewId = (0, _createId2.default)();
    var rowHeight = Math.max(48, Math.min(72, props.rowHeight));
    _this.layout = new _TableViewLayout2.default({ rowHeight: rowHeight });
    _this.state = {
      columns: _this.props.columns || _this.props.defaultColumns || _this.props.dataSource.getColumns(),
      sortDescriptor: _this.props.sortDescriptor || _this.props.defaultSortDescriptor || _this.props.dataSource.sortColumn && { // backward compatibility
        column: _this.props.dataSource.sortColumn,
        direction: _this.props.dataSource.sortDirection
      }
    };
    return _this;
  }

  _createClass(TableView, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(props) {
      if (props.columns && props.columns !== this.props.columns) {
        this.setState({
          columns: this.props.columns
        });
      }

      if (props.sortDescriptor && props.sortDescriptor !== this.props.sortDescriptor) {
        this.setState({ sortDescriptor: props.sortDescriptor });
      }
    }
  }, {
    key: 'setSelectAll',
    value: function setSelectAll(select) {
      if (select) {
        this.collection.selectAll();
      } else {
        this.collection.clearSelection();
      }
    }
  }, {
    key: 'renderHeader',
    value: function renderHeader() {
      var _props = this.props,
          _props$id = _props.id,
          id = _props$id === undefined ? this.tableViewId : _props$id,
          allowsMultipleSelection = _props.allowsMultipleSelection,
          allowsSelection = _props.allowsSelection;


      var numRows = this.getRowCount();
      var allItemsSelected = this.collection && this.collection.selectedIndexPaths.length === numRows && numRows > 0;

      return _react2.default.createElement(
        'div',
        { role: 'rowgroup' },
        _react2.default.createElement(_TableRow2.default, {
          tableId: id,
          isHeaderRow: true,
          columns: this.state.columns,
          renderCell: this.renderColumnHeader,
          allowsMultipleSelection: allowsSelection && allowsMultipleSelection,
          allowsSelection: allowsSelection,
          selected: allItemsSelected,
          onSelectChange: this.setSelectAll,
          onCellClick: this.sortByColumn,
          collectionView: this.collection })
      );
    }
  }, {
    key: 'renderItemView',
    value: function renderItemView(type, data) {
      var _props2 = this.props,
          _props2$id = _props2.id,
          id = _props2$id === undefined ? this.tableViewId : _props2$id,
          allowsMultipleSelection = _props2.allowsMultipleSelection,
          allowsSelection = _props2.allowsSelection,
          onCellClick = _props2.onCellClick,
          onCellDoubleClick = _props2.onCellDoubleClick;

      return _react2.default.createElement(_TableRow2.default, {
        tableId: id,
        columns: this.state.columns,
        renderCell: this.renderCell.bind(this, data),
        allowsMultipleSelection: allowsSelection && allowsMultipleSelection,
        allowsSelection: allowsSelection,
        onCellClick: onCellClick,
        onCellDoubleClick: onCellDoubleClick,
        collectionView: this.collection });
    }
  }, {
    key: 'renderColumnHeader',
    value: function renderColumnHeader(column, columnIndex, rowFocused) {
      var _props3 = this.props,
          allowsSelection = _props3.allowsSelection,
          allowsMultipleSelection = _props3.allowsMultipleSelection,
          renderColumnHeader = _props3.renderColumnHeader;

      return _react2.default.createElement(
        _TableCell2.default,
        {
          isHeaderRow: true,
          column: column,
          sortDir: this.state.sortDescriptor && this.state.sortDescriptor.column === column ? this.state.sortDescriptor.direction : null,
          allowsMultipleSelection: allowsSelection && allowsMultipleSelection,
          rowFocused: rowFocused },
        renderColumnHeader ? renderColumnHeader(column) : column.title
      );
    }
  }, {
    key: 'renderCell',
    value: function renderCell(data, column, columnIndex, rowFocused) {
      // For backwards compatibility with TableViewDataSource, support
      // getting per-cell data instead of per-row data.
      if (this.props.dataSource instanceof _TableViewDataSource2.default) {
        data = data[columnIndex];
      }

      return _react2.default.createElement(
        _TableCell2.default,
        { column: column, 'aria-colindex': columnIndex, rowFocused: rowFocused },
        this.props.renderCell(column, data, rowFocused)
      );
    }
  }, {
    key: 'renderSupplementaryView',
    value: function renderSupplementaryView(type) {
      if (type === 'insertion-indicator') {
        return _react2.default.createElement('div', { className: 'react-spectrum-TableView-insertionIndicator' });
      }

      return _react2.default.createElement('div', null);
    }
  }, {
    key: 'sortByColumn',
    value: function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(column) {
        var dir, sortDescriptor;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (column.sortable) {
                  dir = TableView.SORT_ASCENDING;

                  if (this.state.sortDescriptor && this.state.sortDescriptor.column === column) {
                    dir = -this.state.sortDescriptor.direction;
                  }

                  sortDescriptor = {
                    column: column,
                    direction: dir
                  };


                  if (this.props.onSortChange) {
                    this.props.onSortChange(sortDescriptor);
                  }

                  if (!('sortDescriptor' in this.props)) {
                    this.setState({ sortDescriptor: sortDescriptor });
                  }
                }

              case 1:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function sortByColumn(_x) {
        return _ref.apply(this, arguments);
      }

      return sortByColumn;
    }()
  }, {
    key: 'onSelectionChange',
    value: function onSelectionChange(selectedIndexPaths) {
      // Force update to properly set the state of the Select All checkbox
      this.forceUpdate();

      if (this.props.onSelectionChange) {
        this.props.onSelectionChange(selectedIndexPaths);
      }
    }
  }, {
    key: 'getRowCount',
    value: function getRowCount() {
      var dataSource = this.props.dataSource;
      var count = 0;
      var numSections = dataSource.getNumberOfSections();
      for (var section = 0; section < numSections; section++) {
        count += dataSource.getSectionLength(section);
      }

      return count;
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props4 = this.props,
          allowsMultipleSelection = _props4.allowsMultipleSelection,
          allowsSelection = _props4.allowsSelection,
          className = _props4.className,
          dataSource = _props4.dataSource,
          _props4$id = _props4.id,
          id = _props4$id === undefined ? this.tableViewId : _props4$id,
          quiet = _props4.quiet,
          otherProps = _objectWithoutProperties(_props4, ['allowsMultipleSelection', 'allowsSelection', 'className', 'dataSource', 'id', 'quiet']);

      var tableClasses = (0, _classnames2.default)(className, 'react-spectrum-TableView', 'spectrum-Table', {
        'spectrum-Table--quiet': quiet
      });
      var rowCount = this.getRowCount(0) + 1;
      var colCount = this.state.columns.length;
      if (allowsSelection) {
        colCount += 1;
      }
      return _react2.default.createElement(
        'div',
        {
          id: id,
          className: tableClasses,
          role: 'grid',
          'aria-rowcount': rowCount,
          'aria-colcount': colCount,
          'aria-label': otherProps['aria-label'],
          'aria-labelledby': otherProps['aria-labelledby'],
          'aria-describedby': otherProps['aria-describedby'],
          'aria-multiselectable': allowsSelection && allowsMultipleSelection || null },
        this.renderHeader(),
        _react2.default.createElement(_CollectionView2.default, _extends({}, this.props, {
          ref: function ref(c) {
            return _this2.collection = c ? c.collection : null;
          },
          role: 'rowgroup',
          className: 'spectrum-Table-body react-spectrum-TableView-body',
          layout: this.layout,
          dataSource: dataSource,
          renderItemView: this.renderItemView,
          renderSupplementaryView: this.renderSupplementaryView,
          canSelectItems: allowsSelection,
          allowsMultipleSelection: allowsMultipleSelection,
          sortDescriptor: this.state.sortDescriptor,
          selectionMode: 'toggle',
          keyboardMode: 'focus',
          onSelectionChanged: this.onSelectionChange }))
      );
    }
  }]);

  return TableView;
}(_react.Component)) || _class;

TableView.propTypes = {
  /** The columns to display in the table view (controlled). */
  columns: _propTypes2.default.arrayOf(columnShape),

  /** The initial columns to display in the table view (uncontrolled). */
  defaultColumns: _propTypes2.default.arrayOf(columnShape),

  /** The datasource for the table view. Should be a subclass of `ListDataSource`. */
  dataSource: _propTypes2.default.instanceOf(_ListDataSource2.default).isRequired,

  /** A function which renders a cell. Passed a column object and cell data. */
  renderCell: _propTypes2.default.func.isRequired,

  /** An optional function which overrides the rendering for a column header. Passed the column object. */
  renderColumnHeader: _propTypes2.default.func,

  /** An optional function which is called to render the contents of the table body when there are no rows. */
  renderEmptyView: _propTypes2.default.func,

  /** Whether to allow the user to select items */
  allowsSelection: _propTypes2.default.bool,

  /** Whether to allow multiple selection of items */
  allowsMultipleSelection: _propTypes2.default.bool,

  /** A function that is called when the selection changes. Passed an IndexPathSet object. */
  onSelectionChange: _propTypes2.default.func,

  /** Sets the selected rows. Should be an IndexPathSet object or an array of IndexPaths. */
  selectedIndexPaths: _propTypes2.default.oneOfType([_propTypes2.default.arrayOf(_propTypes2.default.instanceOf(_collectionView.IndexPath)), _propTypes2.default.instanceOf(_collectionView.IndexPathSet)]),

  /** The sort column and direction (controlled). */
  sortDescriptor: sortDescriptorShape,

  /** The initial sort column and direction (uncontrolled). */
  defaultSortDescriptor: sortDescriptorShape,

  /** A function that is called when the sort descriptor changes. */
  onSortChange: _propTypes2.default.func,

  /** A function that is called when a cell is clicked. Passed a column object and row index. */
  onCellClick: _propTypes2.default.func,

  /* A function that is called when a cell is double clicked. Passed a column object and row index. */
  onCellDoubleClick: _propTypes2.default.func,

  /** Whether to use the spectrum quiet variant. */
  quiet: _propTypes2.default.bool,

  /** The height each row should be in the table. It has a maximum of 72 */
  rowHeight: _propTypes2.default.number,

  /** Whether the user can drag rows from the table. */
  canDragItems: _propTypes2.default.bool,

  /** A function which renders the view to display under the cursor during drag and drop. */
  renderDragView: _propTypes2.default.func,

  /**
   * Whether the TableView accepts drops.
   * If `true`, the table accepts all types of drops. Alternatively,
   * it can be set to an array of accepted drop types.
   */
  acceptsDrops: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.arrayOf(_propTypes2.default.string)]),

  /**
   * Whether drops should appear on top of rows, or between them. If you want to customize this
   * or mix the modes, you can override `getDropTarget` on the data source.
   */
  dropPosition: _propTypes2.default.oneOf(['on', 'between'])
};
TableView.defaultProps = {
  allowsSelection: true,
  allowsMultipleSelection: true,
  canDragItems: false,
  acceptsDrops: false,
  dropPosition: 'between'
};
TableView.SORT_ASCENDING = 1;
TableView.SORT_DESCENDING = -1;
exports.default = TableView;