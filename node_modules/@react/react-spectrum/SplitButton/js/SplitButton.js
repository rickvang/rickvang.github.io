'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class;

var _autobindDecorator = require('autobind-decorator');

var _autobindDecorator2 = _interopRequireDefault(_autobindDecorator);

var _Button = require('../../Button');

var _Button2 = _interopRequireDefault(_Button);

var _ChevronDownMedium = require('../../Icon/core/ChevronDownMedium');

var _ChevronDownMedium2 = _interopRequireDefault(_ChevronDownMedium);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _createId = require('../../utils/createId');

var _createId2 = _interopRequireDefault(_createId);

var _Dropdown = require('../../Dropdown');

var _Dropdown2 = _interopRequireDefault(_Dropdown);

var _filterDOMProps = require('../../utils/filterDOMProps');

var _filterDOMProps2 = _interopRequireDefault(_filterDOMProps);

var _Menu = require('../../Menu');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

if (process.env.SCALE_MEDIUM && process.env.SCALE_LARGE) {
  require('../../spectrum-css/splitbutton/index.css');

  require('../../spectrum-css/splitbutton/index-diff.css');
} else if (process.env.SCALE_LARGE) {
  require('../../spectrum-css/splitbutton/index-lg.css');
} else {
  require('../../spectrum-css/splitbutton/index.css');
}

var SplitButton = (0, _autobindDecorator2.default)(_class = function (_React$Component) {
  _inherits(SplitButton, _React$Component);

  function SplitButton(props) {
    _classCallCheck(this, SplitButton);

    var _this = _possibleConstructorReturn(this, (SplitButton.__proto__ || Object.getPrototypeOf(SplitButton)).call(this, props));

    _this.buttonId = (0, _createId2.default)();
    return _this;
  }

  _createClass(SplitButton, [{
    key: 'onKeyDown',
    value: function onKeyDown(e) {
      if (e.key === 'ArrowDown' || e.key === 'Down') {
        if (e.altKey || e.target === _reactDom2.default.findDOMNode(this.dropdownRef.triggerRef)) {
          e.preventDefault();
          this.dropdownRef.overlayTrigger.show(e);
        }
      }
      if (this.props.onKeyDown) {
        this.props.onKeyDown(e);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          children = _props.children,
          className = _props.className,
          _props$id = _props.id,
          id = _props$id === undefined ? this.buttonId : _props$id,
          onSelect = _props.onSelect,
          onOpen = _props.onOpen,
          onClose = _props.onClose,
          variant = _props.variant,
          disabled = _props.disabled,
          otherProps = _objectWithoutProperties(_props, ['children', 'className', 'id', 'onSelect', 'onOpen', 'onClose', 'variant', 'disabled']);

      return _react2.default.createElement(
        _Dropdown2.default,
        { ref: function ref(d) {
            return _this2.dropdownRef = d;
          }, className: (0, _classnames2.default)('spectrum-SplitButton', className), alignRight: true, onSelect: onSelect, onOpen: onOpen, onClose: onClose, onKeyDown: this.onKeyDown, role: 'group', 'aria-labelledby': id },
        _react2.default.createElement(_Button2.default, _extends({
          variant: variant
        }, (0, _filterDOMProps2.default)(otherProps), {
          disabled: disabled,
          className: 'spectrum-SplitButton-action',
          id: id })),
        _react2.default.createElement(
          _Button2.default,
          {
            variant: variant,
            className: 'spectrum-SplitButton-trigger',
            'aria-labelledby': id,
            disabled: disabled,
            dropdownTrigger: true },
          _react2.default.createElement(_ChevronDownMedium2.default, { size: null, className: 'spectrum-SplitButton-icon' })
        ),
        _react2.default.createElement(
          _Menu.Menu,
          { 'aria-labelledby': id },
          children
        )
      );
    }
  }]);

  return SplitButton;
}(_react2.default.Component)) || _class;

exports.default = SplitButton;


SplitButton.propTypes = {
  /** Class to add to the SplitButton */
  className: _propTypes2.default.string,

  /** Function to trigger once button is selected */
  onSelect: _propTypes2.default.func,

  /** SplitButton variant */
  variant: _propTypes2.default.oneOf(['primary', 'secondary', 'cta'])
};