{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/**\n * An IndexPath stores a path to an item in a two level nested array.\n */\n\n\nvar IndexPath = function () {\n  /**\n   * Creates a new IndexPath\n   * @param {number} section an index in the outer array\n   * @param {number} index an index in the inner array\n   */\n  function IndexPath(section, index) {\n    _classCallCheck(this, IndexPath);\n    /**\n     * An index in the outer array\n     * @type {number}\n     */\n\n\n    this.section = section;\n    /**\n     * An index in the inner array\n     * @type {number}\n     */\n\n    this.index = index;\n  }\n  /**\n   * Returns whether another IndexPath is equal to this one\n   * @param {IndexPath} other the IndexPath to compare\n   * @return {boolean}\n   */\n\n\n  _createClass(IndexPath, [{\n    key: \"equals\",\n    value: function equals(other) {\n      if (other === this) {\n        return true;\n      }\n\n      if (!(other instanceof IndexPath)) {\n        return false;\n      }\n\n      return other.section === this.section && other.index === this.index;\n    }\n    /**\n     * Returns whether this IndexPath is greater than another one\n     * @param {IndexPath} other the IndexPath to compare\n     * @return {boolean}\n     */\n\n  }, {\n    key: \"isGreaterThan\",\n    value: function isGreaterThan(other) {\n      return this.section > other.section || this.section === other.section && this.index > other.index;\n    }\n    /**\n     * Returns whether this IndexPath is less than another one\n     * @param {IndexPath} other the IndexPath to compare\n     * @return {boolean}\n     */\n\n  }, {\n    key: \"isLessThan\",\n    value: function isLessThan(other) {\n      return this.section < other.section || this.section === other.section && this.index < other.index;\n    }\n    /**\n     * Returns this IndexPath, or the provided one, whichever is smaller\n     * @param {IndexPath} other the IndexPath to compare\n     * @return {IndexPath} the smaller IndexPath\n     */\n\n  }, {\n    key: \"min\",\n    value: function min(other) {\n      if (this.isLessThan(other)) {\n        return this;\n      }\n\n      return other;\n    }\n    /**\n     * Returns this IndexPath, or the provided one, whichever is larger\n     * @param {IndexPath} other the IndexPath to compare\n     * @return {IndexPath} the larger IndexPath\n     */\n\n  }, {\n    key: \"max\",\n    value: function max(other) {\n      if (this.isGreaterThan(other)) {\n        return this;\n      }\n\n      return other;\n    }\n    /**\n     * Returns a copy of this IndexPath\n     * @return {IndexPath}\n     */\n\n  }, {\n    key: \"copy\",\n    value: function copy() {\n      return new IndexPath(this.section, this.index);\n    }\n  }]);\n\n  return IndexPath;\n}();\n\nexports.default = IndexPath;","map":null,"metadata":{},"sourceType":"script"}