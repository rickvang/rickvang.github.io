'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = Progress;

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _createId = require('../../utils/createId');

var _createId2 = _interopRequireDefault(_createId);

var _filterDOMProps = require('../../utils/filterDOMProps');

var _filterDOMProps2 = _interopRequireDefault(_filterDOMProps);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

if (process.env.SCALE_MEDIUM && process.env.SCALE_LARGE) {
  require('../../spectrum-css/barloader/index.css');

  require('../../spectrum-css/barloader/index-diff.css');
} else if (process.env.SCALE_LARGE) {
  require('../../spectrum-css/barloader/index-lg.css');
} else {
  require('../../spectrum-css/barloader/index.css');
}

if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHT) require('../../spectrum-css/barloader/multiStops/light.css');
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARK) require('../../spectrum-css/barloader/multiStops/dark.css');
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHTEST) require('../../spectrum-css/barloader/multiStops/lightest.css');
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARKEST) require('../../spectrum-css/barloader/multiStops/darkest.css');


var SIZES = {
  S: 'small',
  M: 'medium'
};

function Progress(_ref) {
  var _ref$value = _ref.value,
      value = _ref$value === undefined ? 0 : _ref$value,
      _ref$size = _ref.size,
      size = _ref$size === undefined ? 'M' : _ref$size,
      _ref$showPercent = _ref.showPercent,
      showPercent = _ref$showPercent === undefined ? false : _ref$showPercent,
      _ref$labelPosition = _ref.labelPosition,
      labelPosition = _ref$labelPosition === undefined ? 'left' : _ref$labelPosition,
      label = _ref.label,
      className = _ref.className,
      _ref$id = _ref.id,
      id = _ref$id === undefined ? (0, _createId2.default)() : _ref$id,
      otherProps = _objectWithoutProperties(_ref, ['value', 'size', 'showPercent', 'labelPosition', 'label', 'className', 'id']);

  var sizeClassPart = SIZES[size];
  value = Math.min(Math.max(+value, 0), 100);

  var labelId = void 0;

  var ariaLabelledby = [];

  if (otherProps['aria-labelledby']) {
    ariaLabelledby.push(otherProps['aria-labelledby']);
    delete otherProps['aria-labelledby'];
  }

  if (label) {
    labelId = (0, _createId2.default)() + '-label';
    ariaLabelledby.push(labelId);
  }

  if (otherProps['aria-label']) {
    ariaLabelledby.length > 0 && ariaLabelledby.push(id);
  }

  ariaLabelledby = ariaLabelledby.length ? ariaLabelledby.join(' ') : null;

  return _react2.default.createElement(
    'div',
    _extends({
      className: (0, _classnames2.default)('spectrum-BarLoader', 'spectrum-BarLoader--' + sizeClassPart, {
        'spectrum-BarLoader--sideLabel': labelPosition === 'left'
      }, className),
      role: 'progressbar',
      'aria-valuemin': 0,
      'aria-valuemax': 100,
      'aria-valuenow': value,
      'aria-labelledby': ariaLabelledby,
      id: id
    }, (0, _filterDOMProps2.default)(otherProps)),
    label && _react2.default.createElement(
      'div',
      { className: 'spectrum-BarLoader-label', id: labelId },
      label
    ),
    showPercent && _react2.default.createElement(
      'div',
      { className: 'spectrum-BarLoader-percentage' },
      value + '%'
    ),
    _react2.default.createElement(
      'div',
      { className: 'spectrum-BarLoader-track' },
      _react2.default.createElement('div', {
        className: 'spectrum-BarLoader-fill',
        style: { width: value + '%' } })
    )
  );
}

Progress.displayName = 'Progress';