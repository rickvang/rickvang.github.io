'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class;

var _autobindDecorator = require('autobind-decorator');

var _autobindDecorator2 = _interopRequireDefault(_autobindDecorator);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _TabListBase = require('./TabListBase');

var _TabListBase2 = _interopRequireDefault(_TabListBase);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

if (process.env.SCALE_MEDIUM && process.env.SCALE_LARGE) {
  require('../../spectrum-css/tabs/index.css');

  require('../../spectrum-css/tabs/index-diff.css');
} else if (process.env.SCALE_LARGE) {
  require('../../spectrum-css/tabs/index-lg.css');
} else {
  require('../../spectrum-css/tabs/index.css');
}

if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHT) require('../../spectrum-css/tabs/multiStops/light.css');
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARK) require('../../spectrum-css/tabs/multiStops/dark.css');
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHTEST) require('../../spectrum-css/tabs/multiStops/lightest.css');
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARKEST) require('../../spectrum-css/tabs/multiStops/darkest.css');


// For backward compatibility
var VARIANTS = {
  'panel': '',
  'anchored': '',
  'page': 'compact'
};

/**
 * A TabList displays a list of tabs
 */

var TabList = (0, _autobindDecorator2.default)(_class = function (_React$Component) {
  _inherits(TabList, _React$Component);

  function TabList() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, TabList);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = TabList.__proto__ || Object.getPrototypeOf(TabList)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      selectedIndex: _TabListBase2.default.getDefaultSelectedIndex(_this.props),
      tabArray: []
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(TabList, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if ('selectedIndex' in nextProps) {
        this.setState({
          selectedIndex: nextProps.selectedIndex
        });
      }
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.updateTabs();
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps) {
      if (prevProps.children !== this.props.children) {
        this.updateTabs();
      }
    }
  }, {
    key: 'updateTabs',
    value: function updateTabs() {
      // Measure the tabs so we can position the line below correctly
      var tabArray = _reactDom2.default.findDOMNode(this).querySelectorAll('.spectrum-Tabs-item');
      this.setState({ tabArray: tabArray });
    }
  }, {
    key: 'onChange',
    value: function onChange(selectedIndex) {
      var lastSelectedIndex = this.state.selectedIndex;

      // If selectedIndex is defined on props then this is a controlled component and we shouldn't
      // change our own state.
      if (!('selectedIndex' in this.props)) {
        this.setState({
          selectedIndex: selectedIndex
        });
      }
      if (lastSelectedIndex !== selectedIndex && this.props.onChange) {
        this.props.onChange(selectedIndex);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          className = _props.className,
          _props$orientation = _props.orientation,
          orientation = _props$orientation === undefined ? 'horizontal' : _props$orientation,
          _props$variant = _props.variant,
          variant = _props$variant === undefined ? '' : _props$variant,
          quiet = _props.quiet,
          children = _props.children,
          defaultSelectedIndex = _props.defaultSelectedIndex,
          otherProps = _objectWithoutProperties(_props, ['className', 'orientation', 'variant', 'quiet', 'children', 'defaultSelectedIndex']);

      var _state = this.state,
          selectedIndex = _state.selectedIndex,
          tabArray = _state.tabArray;


      var selectedTab = tabArray[selectedIndex];

      // For backwards compatibility
      // let mappedVariant = VARIANTS[variant] !== undefined ? VARIANTS[variant] : variant;
      if (VARIANTS[variant] != null) {
        var message = 'The "' + variant + '" variant of TabList has been deprecated.';
        if (VARIANTS[variant]) {
          message += ' Please use the "' + VARIANTS[variant] + '" variant instead.';
        } else {
          message += ' Please remove the variant prop to use the default variant instead.';
        }

        console.warn(message);
        variant = VARIANTS[variant];
      }

      return _react2.default.createElement(
        _TabListBase2.default,
        _extends({
          orientation: orientation,
          defaultSelectedIndex: defaultSelectedIndex || null,
          selectedIndex: selectedIndex
        }, otherProps, {
          className: (0, _classnames2.default)('spectrum-Tabs', 'spectrum-Tabs--' + orientation, { 'spectrum-Tabs--quiet': quiet }, variant ? 'spectrum-Tabs--' + variant : '', className),
          onChange: this.onChange }),
        children,
        selectedTab && _react2.default.createElement(TabLine, { orientation: orientation, selectedTab: selectedTab })
      );
    }
  }]);

  return TabList;
}(_react2.default.Component)) || _class;

TabList.propTypes = {
  /** The visual style of the tab list */
  variant: _propTypes2.default.oneOf(['compact', 'panel', 'anchored', '']),

  /** Whether the tab list should render using a quiet style */
  quiet: _propTypes2.default.bool,

  /** The layout orientation of the tabs */
  orientation: _propTypes2.default.oneOf(['horizontal', 'vertical']),

  /**
   * The index of the Tab that should be selected (open). When selectedIndex is
   * specified, the component is in a controlled state and a Tab can only be selected by changing the
   * selectedIndex prop value. By default, the first Tab will be selected.
   */
  selectedIndex: _propTypes2.default.number,

  /**
   * The same as selectedIndex except that the component is in an uncontrolled
   * state.
   */
  defaultSelectedIndex: _propTypes2.default.number,

  /**
   * A function that will be called when an Tab is selected or deselected. It will be passed
   * the updated selected index.
   */
  onChange: _propTypes2.default.func
};
TabList.defaultProps = {
  variant: '',
  quiet: false,
  orientation: 'horizontal'
};
exports.default = TabList;


function TabLine(_ref2) {
  var orientation = _ref2.orientation,
      selectedTab = _ref2.selectedTab;

  // Ideally this would be a DNA variable, but vertical tabs aren't even in DNA, soo...
  var verticalSelectionIndicatorOffset = 12;

  var style = {
    transform: orientation === 'vertical' ? 'translateY(' + (selectedTab.offsetTop + verticalSelectionIndicatorOffset / 2) + 'px)' : 'translateX(' + selectedTab.offsetLeft + 'px) '
  };

  if (orientation === 'horizontal') {
    style.width = selectedTab.offsetWidth + 'px';
  } else {
    style.height = selectedTab.offsetHeight - verticalSelectionIndicatorOffset + 'px';
  }

  return _react2.default.createElement('div', { className: 'spectrum-Tabs-selectionIndicator', role: 'presentation', style: style });
}