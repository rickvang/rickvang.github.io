{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _get = function get(object, property, receiver) {\n  if (object === null) object = Function.prototype;\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n\n  if (desc === undefined) {\n    var parent = Object.getPrototypeOf(object);\n\n    if (parent === null) {\n      return undefined;\n    } else {\n      return get(parent, property, receiver);\n    }\n  } else if (\"value\" in desc) {\n    return desc.value;\n  } else {\n    var getter = desc.get;\n\n    if (getter === undefined) {\n      return undefined;\n    }\n\n    return getter.call(receiver);\n  }\n};\n\nvar _DragTarget = require('./DragTarget');\n\nvar _DragTarget2 = _interopRequireDefault(_DragTarget);\n\nvar _IndexPath = require('./IndexPath');\n\nvar _IndexPath2 = _interopRequireDefault(_IndexPath);\n\nvar _Layout2 = require('./Layout');\n\nvar _Layout3 = _interopRequireDefault(_Layout2);\n\nvar _LayoutInfo = require('./LayoutInfo');\n\nvar _LayoutInfo2 = _interopRequireDefault(_LayoutInfo);\n\nvar _Rect = require('./Rect');\n\nvar _Rect2 = _interopRequireDefault(_Rect);\n\nvar _Size = require('./Size');\n\nvar _Size2 = _interopRequireDefault(_Size);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/**\n * The ListLayout class is an implementation of a collection view {@link Layout}\n * it is used for creating lists and lists with indented sub-lists\n *\n * To configure a ListLayout, you can use the properties to define the\n * layouts and/or use the method for defining indentation.\n * The {@link ListLayoutDelegate} extends the existing collection view\n * delegate with an additional method to do this (it uses the same delegate object as\n * the collection view itself).\n */\n\n\nvar ListLayout = function (_Layout) {\n  _inherits(ListLayout, _Layout);\n  /**\n   * Creates a new ListLayout with options. See the list of properties below for a description\n   * of the options that can be provided.\n   */\n\n\n  function ListLayout() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, ListLayout);\n    /**\n     * rowHeight defined the height of a row in px.\n     * Default to 48px\n     * @type {number}\n     */\n\n\n    var _this = _possibleConstructorReturn(this, (ListLayout.__proto__ || Object.getPrototypeOf(ListLayout)).call(this));\n\n    _this.rowHeight = options.rowHeight || 48;\n    _this.layoutInfos = [];\n    return _this;\n  }\n\n  _createClass(ListLayout, [{\n    key: 'getLayoutInfo',\n    value: function getLayoutInfo(type, section, index) {\n      return this.layoutInfos[section][index];\n    }\n  }, {\n    key: 'getVisibleLayoutInfos',\n    value: function getVisibleLayoutInfos(rect) {\n      var res = [];\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this.layoutInfos[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var section = _step.value;\n          var _iteratorNormalCompletion2 = true;\n          var _didIteratorError2 = false;\n          var _iteratorError2 = undefined;\n\n          try {\n            for (var _iterator2 = section[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n              var layoutInfo = _step2.value;\n\n              if (layoutInfo.rect.intersects(rect)) {\n                res.push(layoutInfo);\n              }\n            }\n          } catch (err) {\n            _didIteratorError2 = true;\n            _iteratorError2 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                _iterator2.return();\n              }\n            } finally {\n              if (_didIteratorError2) {\n                throw _iteratorError2;\n              }\n            }\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return res;\n    }\n  }, {\n    key: 'validate',\n    value: function validate() {\n      this.layoutInfos = [];\n      var numSections = this.collectionView.getNumberOfSections();\n      var y = 0;\n\n      for (var section = 0; section < numSections; section++) {\n        this.layoutInfos[section] = [];\n        var len = this.collectionView.getSectionLength(section);\n\n        for (var index = 0; index < len; index++) {\n          var layoutInfo = new _LayoutInfo2.default('item', section, index);\n          var x = 0;\n\n          if (typeof this.collectionView.delegate.indentationForItem === 'function') {\n            x = this.collectionView.delegate.indentationForItem(section, index) || 0;\n          }\n\n          layoutInfo.rect = new _Rect2.default(x, y, this.collectionView.size.width - x, this.rowHeight);\n          this.layoutInfos[section][index] = layoutInfo;\n          y += this.rowHeight;\n        }\n      }\n\n      this.contentHeight = y;\n    }\n  }, {\n    key: 'getContentSize',\n    value: function getContentSize() {\n      return new _Size2.default(this.collectionView.size.width, this.contentHeight);\n    }\n  }, {\n    key: 'indexPathAbove',\n    value: function indexPathAbove(indexPath) {\n      return this.collectionView.incrementIndexPath(indexPath, -1);\n    }\n  }, {\n    key: 'indexPathBelow',\n    value: function indexPathBelow(indexPath) {\n      return this.collectionView.incrementIndexPath(indexPath, 1);\n    }\n  }, {\n    key: 'getDragTarget',\n    value: function getDragTarget(point) {\n      var visible = this.getVisibleLayoutInfos(new _Rect2.default(point.x, point.y, 1, 1));\n\n      if (visible.length > 0) {\n        visible = visible.sort(function (a, b) {\n          return b.zIndex - a.zIndex;\n        });\n        return new _DragTarget2.default('item', new _IndexPath2.default(visible[0].section, visible[0].index));\n      }\n    }\n  }, {\n    key: 'getDropTarget',\n    value: function getDropTarget(point) {\n      var indexPath = this.collectionView.indexPathAtPoint(point);\n\n      if (indexPath) {\n        return new _DragTarget2.default('item', indexPath, _DragTarget2.default.DROP_ON);\n      }\n    }\n  }, {\n    key: 'getInitialLayoutInfo',\n    value: function getInitialLayoutInfo(type, section, index) {\n      var initial = _get(ListLayout.prototype.__proto__ || Object.getPrototypeOf(ListLayout.prototype), 'getInitialLayoutInfo', this).call(this, type, section, index);\n\n      initial.opacity = 0;\n      initial.transform = 'scale3d(0.8, 0.8, 0.8)';\n      return initial;\n    }\n  }, {\n    key: 'getFinalLayoutInfo',\n    value: function getFinalLayoutInfo(type, section, index) {\n      var final = _get(ListLayout.prototype.__proto__ || Object.getPrototypeOf(ListLayout.prototype), 'getFinalLayoutInfo', this).call(this, type, section, index);\n\n      final.opacity = 0;\n      final.transform = 'scale3d(0.8, 0.8, 0.8)';\n      return final;\n    }\n  }]);\n\n  return ListLayout;\n}(_Layout3.default);\n\nexports.default = ListLayout;","map":null,"metadata":{},"sourceType":"script"}