'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _filterDOMProps = require('../../utils/filterDOMProps');

var _filterDOMProps2 = _interopRequireDefault(_filterDOMProps);

var _FocusManager = require('../../utils/FocusManager');

var _FocusManager2 = _interopRequireDefault(_FocusManager);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

if (process.env.SCALE_MEDIUM && process.env.SCALE_LARGE) {
  require('../../spectrum-css/accordion/index.css');

  require('../../spectrum-css/accordion/index-diff.css');
} else if (process.env.SCALE_LARGE) {
  require('../../spectrum-css/accordion/index-lg.css');
} else {
  require('../../spectrum-css/accordion/index.css');
}

if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHT) require('../../spectrum-css/accordion/multiStops/light.css');
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARK) require('../../spectrum-css/accordion/multiStops/dark.css');
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHTEST) require('../../spectrum-css/accordion/multiStops/lightest.css');
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARKEST) require('../../spectrum-css/accordion/multiStops/darkest.css');


var ACCORDION_ITEM_HEADER_SELECTOR = '.spectrum-Accordion-item:not(.is-disabled) > .spectrum-Accordion-itemHeader';

/**
 * An accordion is a list of expandable and collapsible sections.
 */

var Accordion = function (_Component) {
  _inherits(Accordion, _Component);

  function Accordion(props) {
    _classCallCheck(this, Accordion);

    var _this = _possibleConstructorReturn(this, (Accordion.__proto__ || Object.getPrototypeOf(Accordion)).call(this, props));

    var selectedIndex = props.selectedIndex,
        defaultSelectedIndex = props.defaultSelectedIndex;


    var currentSelectedIndex = selectedIndex !== undefined ? selectedIndex : defaultSelectedIndex;

    _this.state = {
      selectedIndex: _this.normalizeSelectedIndex(currentSelectedIndex)
    };
    return _this;
  }

  _createClass(Accordion, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if ('selectedIndex' in nextProps) {
        this.setState({
          selectedIndex: this.normalizeSelectedIndex(nextProps.selectedIndex)
        });
      }
    }
  }, {
    key: 'onClickItem',
    value: function onClickItem(index) {
      var selectedIndex = this.state.selectedIndex;

      if (this.props.multiselectable) {
        selectedIndex = [].concat(_toConsumableArray(selectedIndex));

        var i = selectedIndex.indexOf(index);
        var selected = i !== -1;

        if (selected) {
          selectedIndex.splice(i, 1);
        } else {
          selectedIndex.push(index);
        }
      } else {
        selectedIndex = selectedIndex[0] === index ? [] : [index];
      }

      this.setSelectedKey(selectedIndex);
    }
  }, {
    key: 'setSelectedKey',
    value: function setSelectedKey(selectedIndex) {
      // If selectedIndex is defined on props then this is a controlled component and we shouldn't
      // change our own state.
      if (!('selectedIndex' in this.props)) {
        this.setState({
          selectedIndex: selectedIndex
        });
      }

      var deliverableSelectedIndex = selectedIndex;

      if (!this.props.multiselectable) {
        deliverableSelectedIndex = selectedIndex.length ? selectedIndex[0] : null;
      }

      this.props.onChange(deliverableSelectedIndex);
    }
  }, {
    key: 'getItems',
    value: function getItems() {
      var _this2 = this;

      var selectedIndex = this.state.selectedIndex;
      var _props = this.props,
          multiselectable = _props.multiselectable,
          ariaLevel = _props.ariaLevel,
          children = _props.children;

      return _react2.default.Children.map(children, function (child, index) {
        if (!_react2.default.isValidElement(child)) {
          return null;
        }
        var selected = multiselectable ? selectedIndex.indexOf(index) !== -1 : selectedIndex[0] === index;

        var props = {
          selected: selected,
          ariaLevel: ariaLevel,
          onItemClick: _this2.onClickItem.bind(_this2, index)
        };

        return _react2.default.cloneElement(child, props);
      });
    }
  }, {
    key: 'normalizeSelectedIndex',
    value: function normalizeSelectedIndex(selectedIndex) {
      if (!Array.isArray(selectedIndex)) {
        selectedIndex = selectedIndex !== undefined ? [selectedIndex] : [];
      }

      return selectedIndex.map(function (index) {
        return parseInt(index, 10);
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          className = _props2.className,
          multiselectable = _props2.multiselectable,
          otherProps = _objectWithoutProperties(_props2, ['className', 'multiselectable']);

      // We don't need/want to add onChange to the div because we call it manually when we hear that
      // an accordion item has been clicked. If we were to add the handler to the div, it would be
      // called every time any input inside the accordion is changed.


      delete otherProps.onChange;

      return _react2.default.createElement(
        _FocusManager2.default,
        { itemSelector: ACCORDION_ITEM_HEADER_SELECTOR, manageTabIndex: false },
        _react2.default.createElement(
          'div',
          _extends({}, (0, _filterDOMProps2.default)(otherProps), {
            className: (0, _classnames2.default)('spectrum-Accordion', className),
            role: 'tablist',
            'aria-orientation': 'vertical',
            'aria-multiselectable': multiselectable }),
          this.getItems()
        )
      );
    }
  }]);

  return Accordion;
}(_react.Component);

Accordion.propTypes = {
  /**
   * The index of the AccordionItem that should be selected (open). If multiselectable
   * is true, selectedIndex can be an array of indices. When selectedIndex is specified, the component
   * is in a controlled state and an AccordionItem can only be selected by changing the selectedIndex
   * prop value. By default, no AccordionItems will be selected.
   */
  selectedIndex: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number, _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]))]),

  /**
   * The same as selectedIndex except that the component is in an uncontrolled
   * state. AccordionItems can be opened or closed without prop values having changed.
   */
  defaultSelectedIndex: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number, _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]))]),

  /** Whether multiple AccordionItems can be selected (open) at the same time. */
  multiselectable: _propTypes2.default.bool,

  /** A function that will be called when an AccordionItem is selected (opened) or
   * deselected (closed). It will be passed the updated selected index.
   */
  onChange: _propTypes2.default.func,

  /** The aria heading level of the accordion items */
  ariaLevel: _propTypes2.default.number
};
Accordion.defaultProps = {
  onChange: function onChange() {},

  multiselectable: false,
  ariaLevel: 3
};
exports.default = Accordion;