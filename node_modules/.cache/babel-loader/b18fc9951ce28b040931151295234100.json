{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _class;\n\nvar _autobindDecorator = require('autobind-decorator');\n\nvar _autobindDecorator2 = _interopRequireDefault(_autobindDecorator);\n\nvar _events = require('../../utils/events');\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _createId = require('../../utils/createId');\n\nvar _createId2 = _interopRequireDefault(_createId);\n\nvar _filterDOMProps = require('../../utils/filterDOMProps');\n\nvar _filterDOMProps2 = _interopRequireDefault(_filterDOMProps);\n\nvar _focusRing = require('../../utils/focusRing');\n\nvar _focusRing2 = _interopRequireDefault(_focusRing);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _SideNav = require('./SideNav');\n\nvar _SideNav2 = _interopRequireDefault(_SideNav);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar NOOP = function NOOP() {};\n\nvar FOCUSABLE_SIDENAV_ITEMLINK_SELECTOR = '.spectrum-SideNav-itemLink[tabIndex]';\n/**\n * An item in a sidenav\n */\n\nvar SideNavItem = (0, _autobindDecorator2.default)(_class = (0, _focusRing2.default)(_class = function (_Component) {\n  _inherits(SideNavItem, _Component);\n\n  function SideNavItem(props) {\n    _classCallCheck(this, SideNavItem);\n\n    var _this = _possibleConstructorReturn(this, (SideNavItem.__proto__ || Object.getPrototypeOf(SideNavItem)).call(this, props));\n\n    _this.state = {\n      expanded: _this.props.defaultExpanded || _this.props.expanded,\n      focused: false\n    };\n\n    _this.setSideNavItemRef = function (s) {\n      return _this.sideNavItemRef = s;\n    };\n\n    _this.id = (0, _createId2.default)();\n    return _this;\n  }\n\n  _createClass(SideNavItem, [{\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      var expanded = nextProps.expanded;\n\n      if (expanded !== this.props.expanded) {\n        this.setState(function (prevState) {\n          return _extends({}, prevState, {\n            expanded: expanded\n          });\n        });\n      }\n    }\n  }, {\n    key: 'handleClick',\n    value: function handleClick(e) {\n      this.props.onClick(e);\n      this.onSelectFocused(e);\n    }\n  }, {\n    key: 'onSelectFocused',\n    value: function onSelectFocused(e) {\n      var _props = this.props,\n          onSelect = _props.onSelect,\n          value = _props.value,\n          expanded = _props.expanded,\n          href = _props.href;\n      var isKeyDown = e.type === 'keydown';\n\n      if (!href || isKeyDown) {\n        // When there is no href or if triggered from a keyboard event,\n        // preventDefault and stopPropagation.\n        e.preventDefault();\n        e.stopPropagation(); // If Enter of Space key pressed, trigger click event on event target\n\n        if (isKeyDown && (e.key === 'Enter' || e.key === ' ')) {\n          e.target.click();\n          return;\n        }\n      }\n\n      if (expanded === undefined) {\n        this.setState(function (prevState) {\n          return _extends({}, prevState, {\n            expanded: !prevState.expanded\n          });\n        });\n      }\n\n      onSelect(value, e);\n    }\n    /**\n     * Keyboard event handler to interperet ArrowLeft/ArrowRight to collapse/expand section in multiLevel variant.\n     * @param {KeyboardEvent} e Keyboard event\n     */\n\n  }, {\n    key: 'onKeyDown',\n    value: function onKeyDown(e) {\n      var expanded = this.state.expanded;\n      var isExpandableTreeItem = this.props.role === 'treeitem' && this.hasNestedNav;\n\n      switch (e.key) {\n        case 'ArrowLeft':\n        case 'Left':\n          if (isExpandableTreeItem) {\n            if (expanded) {\n              this.onSelectFocused(e);\n              this.focus();\n            }\n          }\n\n          break;\n\n        case 'ArrowRight':\n        case 'Right':\n          if (isExpandableTreeItem) {\n            if (!expanded) {\n              this.onSelectFocused(e);\n            } else if (this.sideNavItemRef) {\n              var links = Array.from(_reactDom2.default.findDOMNode(this).querySelectorAll(FOCUSABLE_SIDENAV_ITEMLINK_SELECTOR));\n\n              if (links.indexOf(e.target) === 0) {\n                links[1].focus();\n              }\n            }\n          }\n\n          break;\n      }\n    }\n  }, {\n    key: 'onFocus',\n    value: function onFocus() {\n      this.setState({\n        focused: true\n      });\n    }\n  }, {\n    key: 'onBlur',\n    value: function onBlur() {\n      this.setState({\n        focused: false\n      });\n    }\n  }, {\n    key: 'focus',\n    value: function focus() {\n      if (this.sideNavItemRef) {\n        var link = _reactDom2.default.findDOMNode(this.sideNavItemRef).querySelector(FOCUSABLE_SIDENAV_ITEMLINK_SELECTOR);\n\n        link.focus();\n      }\n    }\n  }, {\n    key: 'getDescendantId',\n    value: function getDescendantId(postfix) {\n      var _props$id = this.props.id,\n          id = _props$id === undefined ? this.id : _props$id;\n      return postfix ? id + '-' + postfix : id;\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props2 = this.props,\n          header = _props2.header,\n          hidden = _props2.hidden,\n          href = _props2.href,\n          className = _props2.className,\n          children = _props2.children,\n          disabled = _props2.disabled,\n          role = _props2.role,\n          _props2$id = _props2.id,\n          id = _props2$id === undefined ? this.id : _props2$id,\n          value = _props2.value,\n          _isSelected = _props2._isSelected,\n          _nestedNavValue = _props2._nestedNavValue,\n          manageTabIndex = _props2.manageTabIndex,\n          onSelect = _props2.onSelect,\n          _props2$target = _props2.target,\n          target = _props2$target === undefined ? '_self' : _props2$target,\n          ariaLevel = _props2.ariaLevel,\n          otherProps = _objectWithoutProperties(_props2, ['header', 'hidden', 'href', 'className', 'children', 'disabled', 'role', 'id', 'value', '_isSelected', '_nestedNavValue', 'manageTabIndex', 'onSelect', 'target', 'ariaLevel']);\n\n      var _state = this.state,\n          expanded = _state.expanded,\n          focused = _state.focused;\n      var _props3 = this.props,\n          label = _props3.label,\n          _props3$tabIndex = _props3.tabIndex,\n          tabIndex = _props3$tabIndex === undefined ? 0 : _props3$tabIndex;\n\n      if (!label && !header) {\n        label = children;\n      }\n\n      var isTreeItem = role === 'treeitem';\n      var isCurrent = !!_nestedNavValue && value === _nestedNavValue;\n\n      if (isTreeItem || manageTabIndex) {\n        tabIndex = isCurrent ? tabIndex : -1;\n      }\n\n      delete otherProps.label;\n      var ariaCurrent = otherProps['aria-current'];\n      delete otherProps['aria-current'];\n      return _react2.default.createElement('li', _extends({\n        className: (0, _classnames2.default)('spectrum-SideNav-item', {\n          'is-selected': _isSelected,\n          'is-disabled': disabled,\n          'is-focused': focused\n        }, className),\n        onKeyDown: disabled ? undefined : (0, _events.chain)(this.onKeyDown, _events.interpretKeyboardEvent.bind(this)),\n        role: isTreeItem ? 'none' : undefined,\n        ref: this.setSideNavItemRef\n      }, (0, _filterDOMProps2.default)(otherProps)), label && _react2.default.createElement('a', {\n        href: disabled ? undefined : href,\n        onClick: disabled ? undefined : this.handleClick,\n        onFocus: disabled ? undefined : this.onFocus,\n        onBlur: disabled ? undefined : this.onBlur,\n        tabIndex: disabled ? undefined : tabIndex,\n        className: (0, _classnames2.default)('spectrum-SideNav-itemLink', {\n          'is-selected': _isSelected,\n          'is-disabled': disabled,\n          'is-focused': focused,\n          'is-hidden': hidden\n        }),\n        id: id,\n        role: (disabled || !href) && !isTreeItem ? 'link' : role,\n        'aria-disabled': disabled || undefined,\n        'aria-expanded': this.hasNestedNav && isTreeItem ? expanded : undefined,\n        'aria-owns': this.hasNestedNav && isTreeItem && expanded ? this.getDescendantId('child-list') : undefined,\n        'aria-selected': isTreeItem ? focused : undefined,\n        'aria-current': _isSelected ? ariaCurrent : undefined,\n        'aria-level': ariaLevel,\n        target: target\n      }, label), header && _react2.default.createElement('h2', {\n        className: 'spectrum-SideNav-heading',\n        id: this.getDescendantId('header')\n      }, header), this.hasNestedNav && _react2.default.createElement(_SideNav2.default, {\n        role: 'none',\n        variant: isTreeItem ? 'multiLevel' : undefined,\n        id: this.getDescendantId('child'),\n        'aria-labelledby': header ? this.getDescendantId('header') : id,\n        ariaLevel: ariaLevel + 1,\n        hidden: isTreeItem ? !expanded : undefined,\n        value: _nestedNavValue,\n        onSelect: onSelect\n      }, children));\n    }\n  }, {\n    key: 'hasNestedNav',\n    get: function get() {\n      var children = this.props.children;\n      return children && typeof children !== 'string';\n    }\n  }]);\n\n  return SideNavItem;\n}(_react.Component)) || _class) || _class;\n\nSideNavItem.propTypes = {\n  /**\n   * Custom className of sidenav to apply\n   */\n  className: _propTypes2.default.string,\n\n  /**\n   * Whether the item is disabled\n   */\n  disabled: _propTypes2.default.bool,\n\n  /**\n   * The label to display in the item\n   */\n  label: _propTypes2.default.string,\n\n  /**\n   * The value of item\n   */\n  value: _propTypes2.default.string,\n\n  /**\n   * The href of item\n   */\n  href: _propTypes2.default.string,\n\n  /**\n   * The target type for item link\n   */\n  target: _propTypes2.default.string,\n\n  /**\n   * Whether item should represent the current page within a set of pages or current location within an environment or context when selected.\n   * See <a href=\"https://www.w3.org/TR/wai-aria-1.1/#aria-current\" class=\"spectrum-Link\">WAI-ARIA 1.1 definition of `aria-current (state)`</a> \n   * attribute.\n   */\n  'aria-current': _propTypes2.default.oneOf(['page', 'location']),\n\n  /**\n   * Whether the item is expanded in case of multi-level sidenav item\n   */\n  expanded: _propTypes2.default.bool,\n\n  /**\n   * Whether the item is expanded at initialization in case of multi-level sidenav item\n   */\n  defaultExpanded: _propTypes2.default.bool,\n\n  /**\n   * A click handler for the item\n   */\n  onClick: _propTypes2.default.func,\n\n  /**\n   * A select handler for the item\n   */\n  onSelect: _propTypes2.default.func\n};\nSideNavItem.defaultProps = {\n  'aria-current': 'page',\n  disabled: false,\n  target: '_self',\n  onSelect: NOOP,\n  onClick: NOOP\n};\nexports.default = SideNavItem;","map":null,"metadata":{},"sourceType":"script"}