'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = FieldLabel;

var _Asterisk = require('../../Icon/Asterisk');

var _Asterisk2 = _interopRequireDefault(_Asterisk);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _LabelBase = require('./LabelBase');

var _LabelBase2 = _interopRequireDefault(_LabelBase);

var _intl = require('../../utils/intl');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var intlMessages = {
  'en-US': _interopRequireDefault(require('./../intl/en-US.json')).default
};

if (process.env.SCALE_MEDIUM && process.env.SCALE_LARGE) {
  require('../../spectrum-css/fieldlabel/index.css');

  require('../../spectrum-css/fieldlabel/index-diff.css');
} else if (process.env.SCALE_LARGE) {
  require('../../spectrum-css/fieldlabel/index-lg.css');
} else {
  require('../../spectrum-css/fieldlabel/index.css');
}

if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHT) require('../../spectrum-css/fieldlabel/multiStops/light.css');
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARK) require('../../spectrum-css/fieldlabel/multiStops/dark.css');
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHTEST) require('../../spectrum-css/fieldlabel/multiStops/lightest.css');
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARKEST) require('../../spectrum-css/fieldlabel/multiStops/darkest.css');

var formatMessage = (0, _intl.messageFormatter)(intlMessages);

function FieldLabel(_ref) {
  var label = _ref.label,
      position = _ref.position,
      children = _ref.children,
      className = _ref.className,
      labelFor = _ref.labelFor,
      necessity = _ref.necessity,
      necessityIndicator = _ref.necessityIndicator,
      otherProps = _objectWithoutProperties(_ref, ['label', 'position', 'children', 'className', 'labelFor', 'necessity', 'necessityIndicator']);

  var necessityMap = {
    required: label + ' ' + formatMessage('(required)'),
    optional: label + ' ' + formatMessage('(optional)')
  };
  var icon = null;
  if (necessityIndicator === 'icon' && necessity === 'required') {
    icon = _react2.default.createElement(_Asterisk2.default, { className: 'spectrum-UIIcon-Asterisk spectrum-fieldLabel-requiredIcon', size: 'S', alt: formatMessage('(required)') });
  }

  return _react2.default.createElement(
    _LabelBase2.default,
    _extends({
      label: necessity && necessityIndicator === 'label' ? necessityMap[necessity] : label,
      className: className,
      componentName: 'FieldLabel',
      labelClassName: (0, _classnames2.default)('spectrum-FieldLabel', {
        'spectrum-FieldLabel--left': position === 'left',
        'spectrum-FieldLabel--right': position === 'right'
      }),
      labelFor: labelFor,
      icon: icon
    }, otherProps),
    children
  );
}

FieldLabel.displayName = 'FieldLabel';

FieldLabel.propTypes = {
  /**
   * String to display
   */
  label: _propTypes2.default.string.isRequired,

  /**
   * Justification of the label text within its container. Setting this property
   * will situate the label container to the left of the form field, regardless
   * of the property value.
   */
  position: _propTypes2.default.oneOf(['left', 'right']),

  /**
   * Custom classname to apply to the label
   */
  className: _propTypes2.default.string,

  /**
   * Like in a form, with what input should the label be associated
   */
  labelFor: _propTypes2.default.string,

  /**
   * Style for communicating whether the associated input is required or optional.
   */
  necessity: _propTypes2.default.oneOf(['required', 'optional']),

  /**
   * 'icon' adds an asterix to the field label if necessity is required.
   * 'label' adds a '(required)' or '(optional)' string to the label depending on the necessity.
   */
  necessityIndicator: _propTypes2.default.oneOf(['icon', 'label'])
};

FieldLabel.defaultProps = {
  necessityIndicator: 'icon'
};