'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _filterDOMProps = require('../../utils/filterDOMProps');

var _filterDOMProps2 = _interopRequireDefault(_filterDOMProps);

var _FocusManager = require('../../utils/FocusManager');

var _FocusManager2 = _interopRequireDefault(_FocusManager);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

if (process.env.SCALE_MEDIUM && process.env.SCALE_LARGE) {
  require('../../spectrum-css/buttongroup/index.css');

  require('../../spectrum-css/buttongroup/index-diff.css');
} else if (process.env.SCALE_LARGE) {
  require('../../spectrum-css/buttongroup/index-lg.css');
} else {
  require('../../spectrum-css/buttongroup/index.css');
}

var BUTTONGROUP_ITEM_SELECTOR = '.spectrum-ButtonGroup-item:not([disabled]):not([aria-disabled])';
var BUTTONGROUP_SELECTED_ITEM_SELECTOR = BUTTONGROUP_ITEM_SELECTOR + '[aria-checked=true].is-selected';
var ALLOWED_BUTTON_VARIANTS = {
  tool: true,
  action: true
};

var ButtonGroup = function (_Component) {
  _inherits(ButtonGroup, _Component);

  function ButtonGroup(props) {
    _classCallCheck(this, ButtonGroup);

    var _this = _possibleConstructorReturn(this, (ButtonGroup.__proto__ || Object.getPrototypeOf(ButtonGroup)).call(this, props));

    _this.state = {
      value: props.value
    };
    return _this;
  }

  _createClass(ButtonGroup, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(props) {
      if (props.value && props.value !== this.state.value) {
        this.setState({
          value: props.value
        });
      }
    }
  }, {
    key: 'addSelection',
    value: function addSelection(button) {
      return [].concat(_toConsumableArray(this.state.value || []), [button.value]);
    }
  }, {
    key: 'removeSelection',
    value: function removeSelection(button) {
      var value = this.state.value || [];
      var index = value.indexOf(button.value);
      return [].concat(_toConsumableArray(value.slice(0, index)), _toConsumableArray(value.slice(index + 1, value.length)));
    }
  }, {
    key: 'handleSelect',
    value: function handleSelect(button, e) {
      if (!this.props.readOnly && !button.readOnly) {
        var nextButtons = void 0;
        if (this.props.multiple) {
          if (this.isSelected(button)) {
            nextButtons = this.removeSelection(button);
          } else {
            nextButtons = this.addSelection(button);
          }
        } else {
          nextButtons = button.value;
        }

        // Set state if in uncontrolled mode
        if (!('value' in this.props)) {
          this.setState({ value: nextButtons });
        }

        if (this.props.onChange) {
          this.props.onChange(nextButtons, e);
        }
      }

      if (this.props.onClick) {
        this.props.onClick(button.value, e);
      }
    }

    /**
     * @private
     * Evaluates whether button element is selected.
     * @param   {Object}  button Button properties object
     * @returns {Boolean} true if button is selected
     */

  }, {
    key: 'isSelected',
    value: function isSelected(button) {
      if (this.props.readOnly) {
        return null;
      }
      return this.props.multiple ? this.state.value && this.state.value.indexOf(button.value) >= 0 : this.state.value === button.value;
    }

    /**
     * @private
     * The role to be used by buttons within the group. If the button group is readOnly,
     * button should retain their implicit role of button. With multiple selection, buttons
     * should have role of checkbox, and with single selection buttons should have role of radio.
     * @returns {String} role of buttons within group, either null, radio or checkbox.
     */

  }, {
    key: 'getChildRole',
    value: function getChildRole() {
      if (this.props.readOnly) {
        return null;
      }
      return this.props.multiple ? 'checkbox' : 'radio';
    }
  }, {
    key: 'getChildProps',
    value: function getChildProps(button, index) {
      var invalid = this.props.invalid || button.props.invalid;
      var required = this.props.required || button.props.required;
      var disabled = this.props.disabled || button.props.disabled;
      var selected = this.isSelected(button.props);
      var role = this.getChildRole();
      var onClick = !disabled ? this.handleSelect.bind(this, button.props) : null;
      var allowedVariant = ALLOWED_BUTTON_VARIANTS[button.props.variant];
      return {
        className: (0, _classnames2.default)('spectrum-ButtonGroup-item'),
        selected: selected,
        disabled: disabled,
        variant: allowedVariant ? button.props.variant : 'action',
        quiet: allowedVariant ? button.props.quiet : true,
        onClick: onClick,
        onKeyDown: button.props.onKeyDown,
        role: role,
        'aria-checked': selected,
        'aria-invalid': invalid,
        'aria-required': required
      };
    }
  }, {
    key: 'renderButtons',
    value: function renderButtons() {
      var _this2 = this;

      var children = this.props.children;

      return _react2.default.Children.map(children, function (child, index) {
        return child ? _react2.default.cloneElement(child, _this2.getChildProps(child, index)) : null;
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          _props$children = _props.children,
          children = _props$children === undefined ? [] : _props$children,
          className = _props.className,
          multiple = _props.multiple,
          disabled = _props.disabled,
          readOnly = _props.readOnly,
          invalid = _props.invalid,
          required = _props.required,
          orientation = _props.orientation,
          otherProps = _objectWithoutProperties(_props, ['children', 'className', 'multiple', 'disabled', 'readOnly', 'invalid', 'required', 'orientation']);

      delete otherProps.onChange;
      delete otherProps.onClick;

      if (!readOnly && !multiple) {

        // With single-selection, the wrapper element should have role=radiogroup.
        otherProps.role = 'radiogroup';
      } else if (readOnly || children.length > 2) {

        // With readOnly and more than one button, the wrapper element should have role=toolbar, otherwise with less than two items or multi-selection, use role=group.
        otherProps.role = readOnly && children.length > 2 ? 'toolbar' : 'group';
      }

      return _react2.default.createElement(
        _FocusManager2.default,
        { itemSelector: BUTTONGROUP_ITEM_SELECTOR, selectedItemSelector: BUTTONGROUP_SELECTED_ITEM_SELECTOR, orientation: otherProps.role === 'toolbar' ? orientation : 'both' },
        _react2.default.createElement(
          'div',
          _extends({
            'aria-invalid': invalid || null,
            'aria-required': required || null,
            'aria-disabled': disabled || null,
            'aria-orientation': orientation !== 'both' && otherProps.role === 'toolbar' ? orientation : null
          }, (0, _filterDOMProps2.default)(otherProps), {
            className: (0, _classnames2.default)('spectrum-ButtonGroup', {
              'spectrum-ButtonGroup--vertical': orientation === 'vertical'
            }, className) }),
          this.renderButtons(children)
        )
      );
    }
  }]);

  return ButtonGroup;
}(_react.Component);

ButtonGroup.propTypes = {
  /**
   * All buttons in ButtonGroup are disabled, greyed out and cannot be interacted with.
   */
  disabled: _propTypes2.default.bool,

  /**
   * Will override all child buttons invalid
   */
  invalid: _propTypes2.default.bool,

  /**
   * Allows multi select
   */
  multiple: _propTypes2.default.bool,

  /**
   * Won't allow a permanent selection
   */
  readOnly: _propTypes2.default.bool,

  /**
   * Will override all child buttons required
   */
  required: _propTypes2.default.bool,

  /**
   * Called whenever a button is selected (non-readonly mode)
   */
  onChange: _propTypes2.default.func,

  /**
   * Called whenever a button is clicked (readonly mode)
   */
  onClick: _propTypes2.default.func,

  /**
   * Renders the button group as a row or a column
   */
  orientation: _propTypes2.default.oneOf(['horizontal', 'vertical', 'both'])
};
ButtonGroup.defaultProps = {
  disabled: false,
  invalid: false,
  multiple: false,
  readOnly: false,
  required: false,
  orientation: 'both'
};
exports.default = ButtonGroup;