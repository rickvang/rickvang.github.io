'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = DropdownButton;

var _Button = require('../../Button');

var _Button2 = _interopRequireDefault(_Button);

var _Dropdown = require('../../Dropdown');

var _Dropdown2 = _interopRequireDefault(_Dropdown);

var _Menu = require('../../Menu');

var _More = require('../../Icon/More');

var _More2 = _interopRequireDefault(_More);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function DropdownButton(_ref) {
  var alignRight = _ref.alignRight,
      onClose = _ref.onClose,
      onOpen = _ref.onOpen,
      onSelect = _ref.onSelect,
      children = _ref.children,
      closeOnSelect = _ref.closeOnSelect,
      menuClassName = _ref.menuClassName,
      props = _objectWithoutProperties(_ref, ['alignRight', 'onClose', 'onOpen', 'onSelect', 'children', 'closeOnSelect', 'menuClassName']);

  return _react2.default.createElement(
    _Dropdown2.default,
    { style: { display: 'inline-block' }, onClose: onClose, onOpen: onOpen, onSelect: onSelect, alignRight: alignRight, closeOnSelect: closeOnSelect },
    _react2.default.createElement(_Button2.default, _extends({
      variant: 'action',
      quiet: true,
      icon: _react2.default.createElement(_More2.default, null)
    }, props)),
    _react2.default.createElement(
      _Menu.Menu,
      { className: menuClassName },
      children
    )
  );
}

DropdownButton.propTypes = {
  /**
   * If true, dropdown will close on selection of an item
   */
  closeOnSelect: _propTypes2.default.bool,

  /**
   * Callback for when the dropdown is opened
   */
  onOpen: _propTypes2.default.func,

  /**
   * Callback for when the dropdown is closed
   */
  onClose: _propTypes2.default.func,

  /**
   * Callback for when an item is selected from the dropdown
   */
  onSelect: _propTypes2.default.func,

  /**
   * Aligns the dropdown to the right or left of the button opening the dropdown
   */
  alignRight: _propTypes2.default.bool,

  /**
   * Custom classname to apply to the Menu
   */
  menuClassName: _propTypes2.default.bool
};