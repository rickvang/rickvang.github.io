<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="Mocha Tests" time="22.236000000000022" tests="1520" failures="0">
  <testsuite name="Root Suite" timestamp="2019-01-26T00:12:12" tests="0" failures="0" time="0">
  </testsuite>
  <testsuite name="Accordion" timestamp="2019-01-26T00:12:12" tests="6" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Accordion/Accordion.js" failures="0" time="0.237">
    <testcase name="Accordion supports additional classNames" time="0.019" classname="supports additional classNames">
    </testcase>
    <testcase name="Accordion supports invalid children" time="0.004" classname="supports invalid children">
    </testcase>
    <testcase name="Accordion supports multiselectable" time="0.141" classname="supports multiselectable">
    </testcase>
    <testcase name="Accordion sets selection with selectedIndex prop" time="0.055" classname="sets selection with selectedIndex prop">
    </testcase>
    <testcase name="Accordion supports defaultSelectedIndex" time="0.004" classname="supports defaultSelectedIndex">
    </testcase>
    <testcase name="Accordion does not call onChange if descendant input is changed" time="0.014" classname="does not call onChange if descendant input is changed">
    </testcase>
  </testsuite>
  <testsuite name="selectedKey" timestamp="2019-01-26T00:12:12" tests="4" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Accordion/Accordion.js" failures="0" time="0.04">
    <testcase name="Accordion selectedKey supports string index" time="0.002" classname="supports string index">
    </testcase>
    <testcase name="Accordion selectedKey supports integer index" time="0.002" classname="supports integer index">
    </testcase>
    <testcase name="Accordion selectedKey supports integer index of 0" time="0.001" classname="supports integer index of 0">
    </testcase>
    <testcase name="Accordion selectedKey sets selection on header click" time="0.035" classname="sets selection on header click">
    </testcase>
  </testsuite>
  <testsuite name="Accessibility" timestamp="2019-01-26T00:12:12" tests="4" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Accordion/Accordion.js" failures="0" time="0.004">
    <testcase name="Accordion Accessibility should have role=&quot;tablist&quot;" time="0.001" classname="should have role=&quot;tablist&quot;">
    </testcase>
    <testcase name="Accordion Accessibility should have aria-orientation=&quot;vertical&quot;" time="0.001" classname="should have aria-orientation=&quot;vertical&quot;">
    </testcase>
    <testcase name="Accordion Accessibility should have aria-multiselectable=&quot;false&quot; if multiselectable is false" time="0.001" classname="should have aria-multiselectable=&quot;false&quot; if multiselectable is false">
    </testcase>
    <testcase name="Accordion Accessibility should have aria-multiselectable=&quot;true&quot; if multiselectable is true" time="0.001" classname="should have aria-multiselectable=&quot;true&quot; if multiselectable is true">
    </testcase>
  </testsuite>
  <testsuite name="Keyboard navigation" timestamp="2019-01-26T00:12:12" tests="6" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Accordion/Accordion.js" failures="0" time="0.05099999999999999">
    <testcase name="Accordion Accessibility Keyboard navigation when ArrowDown key is pressed, focus next not disabled item header" time="0.019" classname="when ArrowDown key is pressed, focus next not disabled item header">
    </testcase>
    <testcase name="Accordion Accessibility Keyboard navigation when ArrowDown key is pressed on last item, focus first not disabled item header" time="0.004" classname="when ArrowDown key is pressed on last item, focus first not disabled item header">
    </testcase>
    <testcase name="Accordion Accessibility Keyboard navigation when ArrowUp key is pressed, focus previous not disabled item header" time="0.013" classname="when ArrowUp key is pressed, focus previous not disabled item header">
    </testcase>
    <testcase name="Accordion Accessibility Keyboard navigation when ArrowUp key is pressed on first item, focus last not disabled item header" time="0.005" classname="when ArrowUp key is pressed on first item, focus last not disabled item header">
    </testcase>
    <testcase name="Accordion Accessibility Keyboard navigation when End key is pressed, focus last not disabled item header" time="0.005" classname="when End key is pressed, focus last not disabled item header">
    </testcase>
    <testcase name="Accordion Accessibility Keyboard navigation when Home key is pressed, focus first not disabled item header" time="0.005" classname="when Home key is pressed, focus first not disabled item header">
    </testcase>
  </testsuite>
  <testsuite name="AccordionItem" timestamp="2019-01-26T00:12:12" tests="5" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Accordion/AccordionItem.js" failures="0" time="0.009000000000000001">
    <testcase name="AccordionItem supports additional classNames" time="0.003" classname="supports additional classNames">
    </testcase>
    <testcase name="AccordionItem supports selected" time="0.001" classname="supports selected">
    </testcase>
    <testcase name="AccordionItem supports header" time="0.002" classname="supports header">
    </testcase>
    <testcase name="AccordionItem renders children when selected" time="0.001" classname="renders children when selected">
    </testcase>
    <testcase name="AccordionItem doesn&apos;t render children when not selected" time="0.002" classname="doesn&apos;t render children when not selected">
    </testcase>
  </testsuite>
  <testsuite name="supports onItemClick" timestamp="2019-01-26T00:12:12" tests="3" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Accordion/AccordionItem.js" failures="0" time="0.002">
    <testcase name="AccordionItem supports onItemClick when header clicked" time="0.002" classname="when header clicked">
    </testcase>
    <testcase name="AccordionItem supports onItemClick when enter key pressed" time="0" classname="when enter key pressed">
    </testcase>
    <testcase name="AccordionItem supports onItemClick when space key pressed" time="0" classname="when space key pressed">
    </testcase>
  </testsuite>
  <testsuite name="Accessibility" timestamp="2019-01-26T00:12:12" tests="0" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Accordion/AccordionItem.js" failures="0" time="0">
  </testsuite>
  <testsuite name="WAI-ARIA" timestamp="2019-01-26T00:12:12" tests="8" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Accordion/AccordionItem.js" failures="0" time="0.003">
    <testcase name="AccordionItem Accessibility WAI-ARIA item div role equals &apos;presentation&apos;" time="0" classname="item div role equals &apos;presentation&apos;">
    </testcase>
    <testcase name="AccordionItem Accessibility WAI-ARIA header role equals &apos;tab&apos;" time="0" classname="header role equals &apos;tab&apos;">
    </testcase>
    <testcase name="AccordionItem Accessibility WAI-ARIA header has tabIndex so that it can receive keyboard focus" time="0" classname="header has tabIndex so that it can receive keyboard focus">
    </testcase>
    <testcase name="AccordionItem Accessibility WAI-ARIA relationship between header and content is defined using aria-controls" time="0" classname="relationship between header and content is defined using aria-controls">
    </testcase>
    <testcase name="AccordionItem Accessibility WAI-ARIA content role equals &apos;tabpanel&apos;" time="0" classname="content role equals &apos;tabpanel&apos;">
    </testcase>
    <testcase name="AccordionItem Accessibility WAI-ARIA content region is labelled by the header using aria-labelledby" time="0" classname="content region is labelled by the header using aria-labelledby">
    </testcase>
    <testcase name="AccordionItem Accessibility WAI-ARIA header has child with role equal to &apos;heading&apos; that supports aria-level" time="0.001" classname="header has child with role equal to &apos;heading&apos; that supports aria-level">
    </testcase>
    <testcase name="AccordionItem Accessibility WAI-ARIA supports aria-level" time="0.002" classname="supports aria-level">
    </testcase>
  </testsuite>
  <testsuite name="default WAI-ARIA state properties" timestamp="2019-01-26T00:12:12" tests="3" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Accordion/AccordionItem.js" failures="0" time="0">
    <testcase name="AccordionItem Accessibility WAI-ARIA default WAI-ARIA state properties aria-selected is false" time="0" classname="aria-selected is false">
    </testcase>
    <testcase name="AccordionItem Accessibility WAI-ARIA default WAI-ARIA state properties aria-expanded is false" time="0" classname="aria-expanded is false">
    </testcase>
    <testcase name="AccordionItem Accessibility WAI-ARIA default WAI-ARIA state properties aria-hidden on content region is true" time="0" classname="aria-hidden on content region is true">
    </testcase>
  </testsuite>
  <testsuite name="selected WAI-ARIA state properties" timestamp="2019-01-26T00:12:12" tests="3" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Accordion/AccordionItem.js" failures="0" time="0.001">
    <testcase name="AccordionItem Accessibility WAI-ARIA selected WAI-ARIA state properties aria-selected is true" time="0.001" classname="aria-selected is true">
    </testcase>
    <testcase name="AccordionItem Accessibility WAI-ARIA selected WAI-ARIA state properties aria-expanded is false" time="0" classname="aria-expanded is false">
    </testcase>
    <testcase name="AccordionItem Accessibility WAI-ARIA selected WAI-ARIA state properties aria-hidden on content region is true" time="0" classname="aria-hidden on content region is true">
    </testcase>
  </testsuite>
  <testsuite name="disabled WAI-ARIA state property" timestamp="2019-01-26T00:12:12" tests="2" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Accordion/AccordionItem.js" failures="0" time="0">
    <testcase name="AccordionItem Accessibility WAI-ARIA disabled WAI-ARIA state property aria-disabled is true" time="0" classname="aria-disabled is true">
    </testcase>
    <testcase name="AccordionItem Accessibility WAI-ARIA disabled WAI-ARIA state property header has tabIndex equal to undefined, so that it cannot receive keyboard focus" time="0" classname="header has tabIndex equal to undefined, so that it cannot receive keyboard focus">
    </testcase>
  </testsuite>
  <testsuite name="Alert" timestamp="2019-01-26T00:12:12" tests="7" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Alert/Alert.js" failures="0" time="0.018000000000000002">
    <testcase name="Alert default" time="0.006" classname="default">
    </testcase>
    <testcase name="Alert supports large size" time="0" classname="supports large size">
    </testcase>
    <testcase name="Alert supports additional classNames" time="0.001" classname="supports additional classNames">
    </testcase>
    <testcase name="Alert supports additional properties" time="0" classname="supports additional properties">
    </testcase>
    <testcase name="Alert supports multiple variants" time="0.004" classname="supports multiple variants">
    </testcase>
    <testcase name="Alert supports header" time="0.005" classname="supports header">
    </testcase>
    <testcase name="Alert supports children" time="0.002" classname="supports children">
    </testcase>
  </testsuite>
  <testsuite name="Asset" timestamp="2019-01-26T00:12:12" tests="4" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Asset/Asset.js" failures="0" time="0.006">
    <testcase name="Asset should support AssetFile as the default content" time="0.004" classname="should support AssetFile as the default content">
    </testcase>
    <testcase name="Asset should support AssetImage when type is image" time="0.001" classname="should support AssetImage when type is image">
    </testcase>
    <testcase name="Asset should support AssetFolder when type is folder" time="0.001" classname="should support AssetFolder when type is folder">
    </testcase>
    <testcase name="Asset should support custom classes" time="0" classname="should support custom classes">
    </testcase>
  </testsuite>
  <testsuite name="should support decorative to hide element from screen readers" timestamp="2019-01-26T00:12:12" tests="3" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Asset/Asset.js" failures="0" time="0.007">
    <testcase name="Asset should support decorative to hide element from screen readers when type is file as the default content" time="0.003" classname="when type is file as the default content">
    </testcase>
    <testcase name="Asset should support decorative to hide element from screen readers when type is image" time="0.002" classname="when type is image">
    </testcase>
    <testcase name="Asset should support decorative to hide element from screen readers when type is folder as the default content" time="0.002" classname="when type is folder as the default content">
    </testcase>
  </testsuite>
  <testsuite name="AssetFile" timestamp="2019-01-26T00:12:12" tests="3" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Asset/AssetFile.js" failures="0" time="0.004">
    <testcase name="AssetFile should display a File Icon" time="0.002" classname="should display a File Icon">
    </testcase>
    <testcase name="AssetFile should include alt text for accessibility" time="0.001" classname="should include alt text for accessibility">
    </testcase>
    <testcase name="AssetFile should support decorative to hide element from screen readers" time="0.001" classname="should support decorative to hide element from screen readers">
    </testcase>
  </testsuite>
  <testsuite name="AssetFolder" timestamp="2019-01-26T00:12:12" tests="3" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Asset/AssetFolder.js" failures="0" time="0.004">
    <testcase name="AssetFolder should display a Folder Icon" time="0.002" classname="should display a Folder Icon">
    </testcase>
    <testcase name="AssetFolder should include alt text for accessibility" time="0.001" classname="should include alt text for accessibility">
    </testcase>
    <testcase name="AssetFolder should support decorative to hide element from screen readers" time="0.001" classname="should support decorative to hide element from screen readers">
    </testcase>
  </testsuite>
  <testsuite name="AssetImage" timestamp="2019-01-26T00:12:12" tests="6" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Asset/AssetImage.js" failures="0" time="0.10200000000000001">
    <testcase name="AssetImage should render the correct size when image is a square" time="0.027" classname="should render the correct size when image is a square">
    </testcase>
    <testcase name="AssetImage should include alt text for accessibility" time="0.01" classname="should include alt text for accessibility">
    </testcase>
    <testcase name="AssetImage should support decorative to hide element from screen readers" time="0.015" classname="should support decorative to hide element from screen readers">
    </testcase>
    <testcase name="AssetImage should render the correct size when image ratio of sides is &gt;= 1:4" time="0.017" classname="should render the correct size when image ratio of sides is &gt;= 1:4">
    </testcase>
    <testcase name="AssetImage should render the correct size when image is a horizontal rectangle" time="0.017" classname="should render the correct size when image is a horizontal rectangle">
    </testcase>
    <testcase name="AssetImage should render the correct size when input is a vertical rectangle" time="0.016" classname="should render the correct size when input is a vertical rectangle">
    </testcase>
  </testsuite>
  <testsuite name="Autocomplete" timestamp="2019-01-26T00:12:12" tests="20" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Autocomplete/Autocomplete.js" failures="0" time="0.43900000000000006">
    <testcase name="Autocomplete should render children" time="0.005" classname="should render children">
    </testcase>
    <testcase name="Autocomplete should render other children and select the right input" time="0.003" classname="should render other children and select the right input">
    </testcase>
    <testcase name="Autocomplete should call getCompletions and render a menu with results" time="0.011" classname="should call getCompletions and render a menu with results">
    </testcase>
    <testcase name="Autocomplete should call getCompletions and render a menu with results asynchronously" time="0.014" classname="should call getCompletions and render a menu with results asynchronously">
    </testcase>
    <testcase name="Autocomplete should handle keyboard navigation of menu items" time="0.019" classname="should handle keyboard navigation of menu items">
    </testcase>
    <testcase name="Autocomplete should handle PageUp/PageDown navigation of menu items" time="0.273" classname="should handle PageUp/PageDown navigation of menu items">
    </testcase>
    <testcase name="Autocomplete should select an item when the enter key is pressed" time="0.008" classname="should select an item when the enter key is pressed">
    </testcase>
    <testcase name="Autocomplete should not select an item when the space key is pressed" time="0.007" classname="should not select an item when the space key is pressed">
    </testcase>
    <testcase name="Autocomplete should hide the menu when the escape key is pressed" time="0.005" classname="should hide the menu when the escape key is pressed">
    </testcase>
    <testcase name="Autocomplete should show the menu when ArrowDown is pressed" time="0.006" classname="should show the menu when ArrowDown is pressed">
    </testcase>
    <testcase name="Autocomplete should show the menu when the Alt + ArrowDown is pressed" time="0.006" classname="should show the menu when the Alt + ArrowDown is pressed">
    </testcase>
    <testcase name="Autocomplete should hide the menu when the Alt + ArrowUp is pressed" time="0.005" classname="should hide the menu when the Alt + ArrowUp is pressed">
    </testcase>
    <testcase name="Autocomplete should hide the menu on blur" time="0.005" classname="should hide the menu on blur">
    </testcase>
    <testcase name="Autocomplete supports a controlled mode" time="0.01" classname="supports a controlled mode">
    </testcase>
    <testcase name="Autocomplete does not select first menu item by default with allowCreate" time="0.007" classname="does not select first menu item by default with allowCreate">
    </testcase>
    <testcase name="Autocomplete can toggle the menu programmatically" time="0.003" classname="can toggle the menu programmatically">
    </testcase>
    <testcase name="Autocomplete supports non-string completions" time="0.007" classname="supports non-string completions">
    </testcase>
    <testcase name="Autocomplete supports caching of width when componentDidUpdate is called" time="0.037" classname="supports caching of width when componentDidUpdate is called">
    </testcase>
    <testcase name="Autocomplete should show a checkmark on the currently selected menu item" time="0.005" classname="should show a checkmark on the currently selected menu item">
    </testcase>
    <testcase name="Autocomplete should focus the selected index when showing the menu" time="0.003" classname="should focus the selected index when showing the menu">
    </testcase>
  </testsuite>
  <testsuite name="autocompletes when Tab is pressed" timestamp="1970-01-01T00:00:00" tests="2" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Autocomplete/Autocomplete.js" failures="0" time="0.01">
    <testcase name="Autocomplete autocompletes when Tab is pressed if the menu is open" time="0.007" classname="if the menu is open">
    </testcase>
    <testcase name="Autocomplete autocompletes when Tab is pressed otherwise performs default behavior" time="0.003" classname="otherwise performs default behavior">
    </testcase>
  </testsuite>
  <testsuite name="Accessibility" timestamp="1970-01-01T00:00:00" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Autocomplete/Autocomplete.js" failures="0" time="0.024">
    <testcase name="Autocomplete Accessibility should have appropriate role and aria-* attributes" time="0.024" classname="should have appropriate role and aria-* attributes">
    </testcase>
  </testsuite>
  <testsuite name="Avatar" timestamp="2019-01-26T00:12:13" tests="4" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Avatar/Avatar.js" failures="0" time="0.002">
    <testcase name="Avatar should render an avatar image" time="0.001" classname="should render an avatar image">
    </testcase>
    <testcase name="Avatar should render a disabled avatar" time="0" classname="should render a disabled avatar">
    </testcase>
    <testcase name="Avatar should support custom classes" time="0.001" classname="should support custom classes">
    </testcase>
    <testcase name="Avatar should support other DOM props" time="0" classname="should support other DOM props">
    </testcase>
  </testsuite>
  <testsuite name="Banner" timestamp="2019-01-26T00:12:13" tests="4" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Banner/Banner.js" failures="0" time="0.002">
    <testcase name="Banner supports variants, default info" time="0.001" classname="supports variants, default info">
    </testcase>
    <testcase name="Banner supports corner placement" time="0.001" classname="supports corner placement">
    </testcase>
    <testcase name="Banner supports additional classNames" time="0" classname="supports additional classNames">
    </testcase>
    <testcase name="Banner supports additional properties" time="0" classname="supports additional properties">
    </testcase>
  </testsuite>
  <testsuite name="Breadcrumbs" timestamp="2019-01-26T00:12:13" tests="6" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Breadcrumbs/Breadcrumbs.js" failures="0" time="0.04">
    <testcase name="Breadcrumbs should render breadcrumbs" time="0.004" classname="should render breadcrumbs">
    </testcase>
    <testcase name="Breadcrumbs should support putting an icon at the start" time="0.002" classname="should support putting an icon at the start">
    </testcase>
    <testcase name="Breadcrumbs should support clicking on a breadcrumb" time="0.003" classname="should support clicking on a breadcrumb">
    </testcase>
    <testcase name="Breadcrumbs clicking on the last breadcrumb should do nothing" time="0.003" classname="clicking on the last breadcrumb should do nothing">
    </testcase>
    <testcase name="Breadcrumbs focusing a breadcrumb should display focus-ring style" time="0.02" classname="focusing a breadcrumb should display focus-ring style">
    </testcase>
    <testcase name="Breadcrumbs on losing focus, a breadcrumb should not display focus-ring style" time="0.008" classname="on losing focus, a breadcrumb should not display focus-ring style">
    </testcase>
  </testsuite>
  <testsuite name="variant=&quot;title&quot;" timestamp="2019-01-26T00:12:13" tests="2" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Breadcrumbs/Breadcrumbs.js" failures="0" time="0.009000000000000001">
    <testcase name="Breadcrumbs variant=&quot;title&quot; last breadcrumb should render with an h1 element when variant=&quot;title&quot;" time="0.007" classname="last breadcrumb should render with an h1 element when variant=&quot;title&quot;">
    </testcase>
    <testcase name="Breadcrumbs variant=&quot;title&quot; h1 element should include an aria-level attribute when ariaLevel is set" time="0.002" classname="h1 element should include an aria-level attribute when ariaLevel is set">
    </testcase>
  </testsuite>
  <testsuite name="Button" timestamp="2019-01-26T00:12:13" tests="15" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Button/Button.js" failures="0" time="0.04400000000000001">
    <testcase name="Button supports different elements" time="0.004" classname="supports different elements">
    </testcase>
    <testcase name="Button supports different elements being disabled" time="0.002" classname="supports different elements being disabled">
    </testcase>
    <testcase name="Button support different element activation using the Space or Enter key" time="0.002" classname="support different element activation using the Space or Enter key">
    </testcase>
    <testcase name="Button supports different variants" time="0.004" classname="supports different variants">
    </testcase>
    <testcase name="Button supports block" time="0.001" classname="supports block">
    </testcase>
    <testcase name="Button supports disabled" time="0.001" classname="supports disabled">
    </testcase>
    <testcase name="Button supports selected" time="0.001" classname="supports selected">
    </testcase>
    <testcase name="Button supports quiet" time="0" classname="supports quiet">
    </testcase>
    <testcase name="Button supports logic" time="0.001" classname="supports logic">
    </testcase>
    <testcase name="Button supports additional classNames" time="0" classname="supports additional classNames">
    </testcase>
    <testcase name="Button supports additional properties" time="0.001" classname="supports additional properties">
    </testcase>
    <testcase name="Button supports children" time="0.001" classname="supports children">
    </testcase>
    <testcase name="Button can be clicked" time="0.001" classname="can be clicked">
    </testcase>
    <testcase name="Button supports focus method" time="0.005" classname="supports focus method">
    </testcase>
    <testcase name="Button supports autoFocus" time="0.02" classname="supports autoFocus">
    </testcase>
  </testsuite>
  <testsuite name="supports aria-expanded" timestamp="2019-01-26T00:12:13" tests="2" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Button/Button.js" failures="0" time="0.002">
    <testcase name="Button supports aria-expanded when aria-haspopup is true" time="0.001" classname="when aria-haspopup is true">
    </testcase>
    <testcase name="Button supports aria-expanded when prop is explicitly set" time="0.001" classname="when prop is explicitly set">
    </testcase>
  </testsuite>
  <testsuite name="icon" timestamp="2019-01-26T00:12:13" tests="2" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Button/Button.js" failures="0" time="0.001">
    <testcase name="Button icon supports different icons" time="0.001" classname="supports different icons">
    </testcase>
    <testcase name="Button icon supports different sizes" time="0" classname="supports different sizes">
    </testcase>
  </testsuite>
  <testsuite name="label" timestamp="2019-01-26T00:12:13" tests="2" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Button/Button.js" failures="0" time="0.003">
    <testcase name="Button label doesn&apos;t render a label by default" time="0.001" classname="doesn&apos;t render a label by default">
    </testcase>
    <testcase name="Button label supports label text" time="0.002" classname="supports label text">
    </testcase>
  </testsuite>
  <testsuite name="receives focus" timestamp="2019-01-26T00:12:13" tests="2" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Button/Button.js" failures="0" time="0.004">
    <testcase name="Button receives focus on mouse down" time="0.002" classname="on mouse down">
    </testcase>
    <testcase name="Button receives focus on mouse up" time="0.002" classname="on mouse up">
    </testcase>
  </testsuite>
  <testsuite name="focus change following mouse event" timestamp="2019-01-26T00:12:13" tests="2" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Button/Button.js" failures="0" time="0.008">
    <testcase name="Button focus change following mouse event on mouse down" time="0.005" classname="on mouse down">
    </testcase>
    <testcase name="Button focus change following mouse event on mouse up" time="0.003" classname="on mouse up">
    </testcase>
  </testsuite>
  <testsuite name="ButtonGroup" timestamp="2019-01-26T00:12:13" tests="15" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/ButtonGroup/ButtonGroup.js" failures="0" time="0.03200000000000001">
    <testcase name="ButtonGroup supports additional classNames" time="0.001" classname="supports additional classNames">
    </testcase>
    <testcase name="ButtonGroup supports numerous buttons" time="0.002" classname="supports numerous buttons">
    </testcase>
    <testcase name="ButtonGroup should default to quiet action button" time="0.001" classname="should default to quiet action button">
    </testcase>
    <testcase name="ButtonGroup should default to quiet action button if invalid variant is provided" time="0.001" classname="should default to quiet action button if invalid variant is provided">
    </testcase>
    <testcase name="ButtonGroup should support tool buttons" time="0.001" classname="should support tool buttons">
    </testcase>
    <testcase name="ButtonGroup supports an item being selected" time="0.002" classname="supports an item being selected">
    </testcase>
    <testcase name="ButtonGroup supports an item being selected" time="0.001" classname="supports an item being selected">
    </testcase>
    <testcase name="ButtonGroup supports multiple items being selected" time="0.004" classname="supports multiple items being selected">
    </testcase>
    <testcase name="ButtonGroup supports multiple items being deselected" time="0.005" classname="supports multiple items being deselected">
    </testcase>
    <testcase name="ButtonGroup componentWillReceiveProps" time="0.002" classname="componentWillReceiveProps">
    </testcase>
    <testcase name="ButtonGroup supports all items being disabled" time="0.002" classname="supports all items being disabled">
    </testcase>
    <testcase name="ButtonGroup supports an item being disabled" time="0.001" classname="supports an item being disabled">
    </testcase>
    <testcase name="ButtonGroup supports readOnly" time="0.001" classname="supports readOnly">
    </testcase>
    <testcase name="ButtonGroup supports orientation" time="0.006" classname="supports orientation">
    </testcase>
    <testcase name="ButtonGroup supports selection being returned on selection change for single select" time="0.002" classname="supports selection being returned on selection change for single select">
    </testcase>
  </testsuite>
  <testsuite name="Accessibility" timestamp="2019-01-26T00:12:13" tests="0" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/ButtonGroup/ButtonGroup.js" failures="0" time="0">
  </testsuite>
  <testsuite name="supports appropriate WAI-ARIA properties depending on selection mode" timestamp="2019-01-26T00:12:13" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/ButtonGroup/ButtonGroup.js" failures="0" time="0.004">
    <testcase name="ButtonGroup Accessibility supports appropriate WAI-ARIA properties depending on selection mode supports aria-checked updating with selection" time="0.004" classname="supports aria-checked updating with selection">
    </testcase>
  </testsuite>
  <testsuite name="readOnly" timestamp="2019-01-26T00:12:13" tests="4" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/ButtonGroup/ButtonGroup.js" failures="0" time="0.005">
    <testcase name="ButtonGroup Accessibility supports appropriate WAI-ARIA properties depending on selection mode readOnly should have role=toolbar if there are more than one button" time="0.001" classname="should have role=toolbar if there are more than one button">
    </testcase>
    <testcase name="ButtonGroup Accessibility supports appropriate WAI-ARIA properties depending on selection mode readOnly children should not have a role attribute" time="0.001" classname="children should not have a role attribute">
    </testcase>
    <testcase name="ButtonGroup Accessibility supports appropriate WAI-ARIA properties depending on selection mode readOnly should have role=group if there is one button or less" time="0.001" classname="should have role=group if there is one button or less">
    </testcase>
    <testcase name="ButtonGroup Accessibility supports appropriate WAI-ARIA properties depending on selection mode readOnly items should not have aria-checked attribute" time="0.002" classname="items should not have aria-checked attribute">
    </testcase>
  </testsuite>
  <testsuite name="multiple" timestamp="2019-01-26T00:12:13" tests="3" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/ButtonGroup/ButtonGroup.js" failures="0" time="0.003">
    <testcase name="ButtonGroup Accessibility supports appropriate WAI-ARIA properties depending on selection mode multiple should have role=group" time="0.001" classname="should have role=group">
    </testcase>
    <testcase name="ButtonGroup Accessibility supports appropriate WAI-ARIA properties depending on selection mode multiple children should have role=checkbox" time="0.001" classname="children should have role=checkbox">
    </testcase>
    <testcase name="ButtonGroup Accessibility supports appropriate WAI-ARIA properties depending on selection mode multiple selected items should have aria-checked=true" time="0.001" classname="selected items should have aria-checked=true">
    </testcase>
  </testsuite>
  <testsuite name="Default (single-selection)" timestamp="2019-01-26T00:12:13" tests="3" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/ButtonGroup/ButtonGroup.js" failures="0" time="0.003">
    <testcase name="ButtonGroup Accessibility supports appropriate WAI-ARIA properties depending on selection mode Default (single-selection) should have role=radiogroup" time="0.001" classname="should have role=radiogroup">
    </testcase>
    <testcase name="ButtonGroup Accessibility supports appropriate WAI-ARIA properties depending on selection mode Default (single-selection) children should have role=radio" time="0.001" classname="children should have role=radio">
    </testcase>
    <testcase name="ButtonGroup Accessibility supports appropriate WAI-ARIA properties depending on selection mode Default (single-selection) selected item should have aria-checked=true" time="0.001" classname="selected item should have aria-checked=true">
    </testcase>
  </testsuite>
  <testsuite name="Keyboard interaction, " timestamp="2019-01-26T00:12:13" tests="0" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/ButtonGroup/ButtonGroup.js" failures="0" time="0">
  </testsuite>
  <testsuite name="readOnly" timestamp="2019-01-26T00:12:13" tests="2" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/ButtonGroup/ButtonGroup.js" failures="0" time="0.048">
    <testcase name="ButtonGroup Accessibility Keyboard interaction,  readOnly buttons should have tabIndex=0, or if disabled tabIndex=-1, when no button has focus" time="0.022" classname="buttons should have tabIndex=0, or if disabled tabIndex=-1, when no button has focus">
    </testcase>
    <testcase name="ButtonGroup Accessibility Keyboard interaction,  readOnly focused button should have tabIndex=0, while not focused buttons should have tabIndex=-1" time="0.026" classname="focused button should have tabIndex=0, while not focused buttons should have tabIndex=-1">
    </testcase>
  </testsuite>
  <testsuite name="multiple" timestamp="2019-01-26T00:12:13" tests="2" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/ButtonGroup/ButtonGroup.js" failures="0" time="0.049">
    <testcase name="ButtonGroup Accessibility Keyboard interaction,  multiple buttons should have tabIndex=0, or if disabled tabIndex=-1, when no button has focus" time="0.012" classname="buttons should have tabIndex=0, or if disabled tabIndex=-1, when no button has focus">
    </testcase>
    <testcase name="ButtonGroup Accessibility Keyboard interaction,  multiple focused button should have tabIndex=0, while not focused buttons should have tabIndex=-1" time="0.037" classname="focused button should have tabIndex=0, while not focused buttons should have tabIndex=-1">
    </testcase>
  </testsuite>
  <testsuite name="Default (single-selection)" timestamp="2019-01-26T00:12:13" tests="2" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/ButtonGroup/ButtonGroup.js" failures="0" time="0.055">
    <testcase name="ButtonGroup Accessibility Keyboard interaction,  Default (single-selection) buttons should have tabIndex=0, or if disabled tabIndex=-1, attribute when no button has focus" time="0.026" classname="buttons should have tabIndex=0, or if disabled tabIndex=-1, attribute when no button has focus">
    </testcase>
    <testcase name="ButtonGroup Accessibility Keyboard interaction,  Default (single-selection) focused button should have tabIndex=0, while not focused buttons should have tabIndex=-1" time="0.029" classname="focused button should have tabIndex=0, while not focused buttons should have tabIndex=-1">
    </testcase>
  </testsuite>
  <testsuite name="navigation" timestamp="2019-01-26T00:12:13" tests="12" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/ButtonGroup/ButtonGroup.js" failures="0" time="0.030000000000000006">
    <testcase name="ButtonGroup Accessibility Keyboard interaction,  navigation supports ArrowRight to focus next, not disabled button" time="0.004" classname="supports ArrowRight to focus next, not disabled button">
    </testcase>
    <testcase name="ButtonGroup Accessibility Keyboard interaction,  navigation supports ArrowDown to focus next, not disabled button" time="0.003" classname="supports ArrowDown to focus next, not disabled button">
    </testcase>
    <testcase name="ButtonGroup Accessibility Keyboard interaction,  navigation supports wrapping when ArrowRight key is pressed on last button" time="0.002" classname="supports wrapping when ArrowRight key is pressed on last button">
    </testcase>
    <testcase name="ButtonGroup Accessibility Keyboard interaction,  navigation supports wrapping when ArrowDown key is pressed on last button" time="0.002" classname="supports wrapping when ArrowDown key is pressed on last button">
    </testcase>
    <testcase name="ButtonGroup Accessibility Keyboard interaction,  navigation supports ArrowLeft to focus previous, not disabled button" time="0.003" classname="supports ArrowLeft to focus previous, not disabled button">
    </testcase>
    <testcase name="ButtonGroup Accessibility Keyboard interaction,  navigation supports ArrowUp to focus previous, not disabled button" time="0.003" classname="supports ArrowUp to focus previous, not disabled button">
    </testcase>
    <testcase name="ButtonGroup Accessibility Keyboard interaction,  navigation supports wrapping when ArrowLeft key is pressed on first button" time="0.002" classname="supports wrapping when ArrowLeft key is pressed on first button">
    </testcase>
    <testcase name="ButtonGroup Accessibility Keyboard interaction,  navigation supports wrapping when ArrowUp key is pressed on first button" time="0.002" classname="supports wrapping when ArrowUp key is pressed on first button">
    </testcase>
    <testcase name="ButtonGroup Accessibility Keyboard interaction,  navigation supports Home to focus first, not disabled button" time="0.002" classname="supports Home to focus first, not disabled button">
    </testcase>
    <testcase name="ButtonGroup Accessibility Keyboard interaction,  navigation supports PageUp to focus first, not disabled button" time="0.003" classname="supports PageUp to focus first, not disabled button">
    </testcase>
    <testcase name="ButtonGroup Accessibility Keyboard interaction,  navigation supports End to focus last, not disabled button" time="0.002" classname="supports End to focus last, not disabled button">
    </testcase>
    <testcase name="ButtonGroup Accessibility Keyboard interaction,  navigation supports PageDown to focus last, not disabled button" time="0.002" classname="supports PageDown to focus last, not disabled button">
    </testcase>
  </testsuite>
  <testsuite name="Calendar" timestamp="2019-01-26T00:12:13" tests="18" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Calendar/Calendar.js" failures="0" time="0.8790000000000001">
    <testcase name="Calendar default" time="0.044" classname="default">
    </testcase>
    <testcase name="Calendar supports defaultValue uncontrolled behavior" time="0.122" classname="supports defaultValue uncontrolled behavior">
    </testcase>
    <testcase name="Calendar supports value controlled behavior" time="0.036" classname="supports value controlled behavior">
    </testcase>
    <testcase name="Calendar supports startDay" time="0.01" classname="supports startDay">
    </testcase>
    <testcase name="Calendar supports headerFormat" time="0.022" classname="supports headerFormat">
    </testcase>
    <testcase name="Calendar supports valueFormat" time="0.062" classname="supports valueFormat">
    </testcase>
    <testcase name="Calendar supports selectionType=range" time="0.044" classname="supports selectionType=range">
    </testcase>
    <testcase name="Calendar supports selectionType=range with uncontrolled behavior" time="0.108" classname="supports selectionType=range with uncontrolled behavior">
    </testcase>
    <testcase name="Calendar supports selectionType=range with controlled behavior" time="0.101" classname="supports selectionType=range with controlled behavior">
    </testcase>
    <testcase name="Calendar sets min and max to the start of the respective day" time="0.036" classname="sets min and max to the start of the respective day">
    </testcase>
    <testcase name="Calendar enforces min and max" time="0.113" classname="enforces min and max">
    </testcase>
    <testcase name="Calendar generateDateId" time="0.009" classname="generateDateId">
    </testcase>
    <testcase name="Calendar supports disabled" time="0.021" classname="supports disabled">
    </testcase>
    <testcase name="Calendar supports readOnly" time="0.01" classname="supports readOnly">
    </testcase>
    <testcase name="Calendar supports additional classNames" time="0.008" classname="supports additional classNames">
    </testcase>
    <testcase name="Calendar supports additional properties" time="0.008" classname="supports additional properties">
    </testcase>
    <testcase name="Calendar focusCalendarBody moves focus to calendarBody" time="0.07" classname="focusCalendarBody moves focus to calendarBody">
    </testcase>
    <testcase name="Calendar supports autoFocus" time="0.055" classname="supports autoFocus">
    </testcase>
  </testsuite>
  <testsuite name="dispatches onChange" timestamp="2019-01-26T00:12:14" tests="3" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Calendar/Calendar.js" failures="0" time="0.154">
    <testcase name="Calendar dispatches onChange when a non-disabled day is clicked" time="0.039" classname="when a non-disabled day is clicked">
    </testcase>
    <testcase name="Calendar dispatches onChange when a focused day receives enter/space keydown event" time="0.055" classname="when a focused day receives enter/space keydown event">
    </testcase>
    <testcase name="Calendar dispatches onChange with a range when selectionType=range" time="0.06" classname="with a range when selectionType=range">
    </testcase>
  </testsuite>
  <testsuite name="dispatches onFocus" timestamp="2019-01-26T00:12:14" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Calendar/Calendar.js" failures="0" time="0.033">
    <testcase name="Calendar dispatches onFocus when table body receives focus" time="0.033" classname="when table body receives focus">
    </testcase>
  </testsuite>
  <testsuite name="dispatches onBlur" timestamp="2019-01-26T00:12:14" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Calendar/Calendar.js" failures="0" time="0.049">
    <testcase name="Calendar dispatches onBlur when table body loses focus" time="0.049" classname="when table body loses focus">
    </testcase>
  </testsuite>
  <testsuite name="currentMonth" timestamp="2019-01-26T00:12:14" tests="2" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Calendar/Calendar.js" failures="0" time="0.131">
    <testcase name="Calendar currentMonth changes currentMonth when value prop is set to different day" time="0.013" classname="changes currentMonth when value prop is set to different day">
    </testcase>
    <testcase name="Calendar currentMonth changes currentMonth when previous or next buttons are clicked" time="0.118" classname="changes currentMonth when previous or next buttons are clicked">
    </testcase>
  </testsuite>
  <testsuite name="focusedDate" timestamp="2019-01-26T00:12:14" tests="8" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Calendar/Calendar.js" failures="0" time="0.3680000000000001">
    <testcase name="Calendar focusedDate increments/decrements one day with left/right arrows" time="0.058" classname="increments/decrements one day with left/right arrows">
    </testcase>
    <testcase name="Calendar focusedDate increments/decrements one week with up/down arrows" time="0.058" classname="increments/decrements one week with up/down arrows">
    </testcase>
    <testcase name="Calendar focusedDate goes to beginning/end of month with home and end keys" time="0.049" classname="goes to beginning/end of month with home and end keys">
    </testcase>
    <testcase name="Calendar focusedDate increments/decrements one month with page up/down" time="0.053" classname="increments/decrements one month with page up/down">
    </testcase>
    <testcase name="Calendar focusedDate increments/decrements one year with cmd + page up/down" time="0.058" classname="increments/decrements one year with cmd + page up/down">
    </testcase>
    <testcase name="Calendar focusedDate is set to value if it exists" time="0.035" classname="is set to value if it exists">
    </testcase>
    <testcase name="Calendar focusedDate is set to defaultValue if it exists" time="0.031" classname="is set to defaultValue if it exists">
    </testcase>
    <testcase name="Calendar focusedDate is set to now if no value or defaultValue exist" time="0.026" classname="is set to now if no value or defaultValue exist">
    </testcase>
  </testsuite>
  <testsuite name="selectionType=range" timestamp="2019-01-26T00:12:15" tests="3" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Calendar/Calendar.js" failures="0" time="0.17400000000000002">
    <testcase name="Calendar selectionType=range highlights the selected range when hovering over cells" time="0.047" classname="highlights the selected range when hovering over cells">
    </testcase>
    <testcase name="Calendar selectionType=range indicates the selected range using table caption and aria-describedby on the body" time="0.088" classname="indicates the selected range using table caption and aria-describedby on the body">
    </testcase>
    <testcase name="Calendar selectionType=range resets the selection when the escape key is pressed" time="0.039" classname="resets the selection when the escape key is pressed">
    </testcase>
  </testsuite>
  <testsuite name="highlights the selected range when navigating using the keyboard" timestamp="2019-01-26T00:12:15" tests="6" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Calendar/Calendar.js" failures="0" time="0.421">
    <testcase name="Calendar selectionType=range highlights the selected range when navigating using the keyboard adds appropriate selection prompt to aria-label of focused cell" time="0.13" classname="adds appropriate selection prompt to aria-label of focused cell">
    </testcase>
    <testcase name="Calendar selectionType=range highlights the selected range when navigating using the keyboard increments/decrements one day with left/right arrows" time="0.058" classname="increments/decrements one day with left/right arrows">
    </testcase>
    <testcase name="Calendar selectionType=range highlights the selected range when navigating using the keyboard increments/decrements one week with up/down arrows" time="0.059" classname="increments/decrements one week with up/down arrows">
    </testcase>
    <testcase name="Calendar selectionType=range highlights the selected range when navigating using the keyboard goes to beginning/end of month with home and end keys" time="0.055" classname="goes to beginning/end of month with home and end keys">
    </testcase>
    <testcase name="Calendar selectionType=range highlights the selected range when navigating using the keyboard increments/decrements one month with page up/down" time="0.058" classname="increments/decrements one month with page up/down">
    </testcase>
    <testcase name="Calendar selectionType=range highlights the selected range when navigating using the keyboard increments/decrements one year with cmd + page up/down" time="0.061" classname="increments/decrements one year with cmd + page up/down">
    </testcase>
  </testsuite>
  <testsuite name="CalendarCell" timestamp="2019-01-26T00:12:16" tests="0" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Calendar/Calendar.js" failures="0" time="0">
  </testsuite>
  <testsuite name="selected cell" timestamp="2019-01-26T00:12:16" tests="6" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Calendar/Calendar.js" failures="0" time="0.148">
    <testcase name="Calendar CalendarCell selected cell props" time="0.001" classname="props">
    </testcase>
    <testcase name="Calendar CalendarCell selected cell classes" time="0" classname="classes">
    </testcase>
    <testcase name="Calendar CalendarCell selected cell supports range selections" time="0.036" classname="supports range selections">
    </testcase>
    <testcase name="Calendar CalendarCell selected cell supports click event" time="0.037" classname="supports click event">
    </testcase>
    <testcase name="Calendar CalendarCell selected cell supports mouseDown event" time="0.038" classname="supports mouseDown event">
    </testcase>
    <testcase name="Calendar CalendarCell selected cell supports mouseEnter event" time="0.036" classname="supports mouseEnter event">
    </testcase>
  </testsuite>
  <testsuite name="disabled cell" timestamp="2019-01-26T00:12:16" tests="2" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Calendar/Calendar.js" failures="0" time="0.001">
    <testcase name="Calendar CalendarCell disabled cell props" time="0.001" classname="props">
    </testcase>
    <testcase name="Calendar CalendarCell disabled cell classes" time="0" classname="classes">
    </testcase>
  </testsuite>
  <testsuite name="With aria-label prop" timestamp="2019-01-26T00:12:16" tests="0" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Calendar/Calendar.js" failures="0" time="0">
  </testsuite>
  <testsuite name="is defined," timestamp="2019-01-26T00:12:16" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Calendar/Calendar.js" failures="0" time="0.01">
    <testcase name="Calendar With aria-label prop is defined, calendar has aria-labelledby prop that includes both the calendar id and the header element id." time="0.01" classname="calendar has aria-labelledby prop that includes both the calendar id and the header element id.">
    </testcase>
  </testsuite>
  <testsuite name="and aria-labelledby prop defined," timestamp="2019-01-26T00:12:16" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Calendar/Calendar.js" failures="0" time="0.016">
    <testcase name="Calendar With aria-label prop is defined, and aria-labelledby prop defined, calendar has aria-labelledby prop that includes the calendar id, the aria-labelledby prop and the header element id." time="0.016" classname="calendar has aria-labelledby prop that includes the calendar id, the aria-labelledby prop and the header element id.">
    </testcase>
  </testsuite>
  <testsuite name="With aria-labelledby prop" timestamp="2019-01-26T00:12:16" tests="0" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Calendar/Calendar.js" failures="0" time="0">
  </testsuite>
  <testsuite name="is undefined," timestamp="2019-01-26T00:12:16" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Calendar/Calendar.js" failures="0" time="0.009">
    <testcase name="Calendar With aria-labelledby prop is undefined, calendar has aria-labelledby prop referencing header element id." time="0.009" classname="calendar has aria-labelledby prop referencing header element id.">
    </testcase>
  </testsuite>
  <testsuite name="is defined," timestamp="2019-01-26T00:12:16" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Calendar/Calendar.js" failures="0" time="0.009">
    <testcase name="Calendar With aria-labelledby prop is defined, calendar has aria-labelledby prop that includes both the aria-labelledby prop and the header element id." time="0.009" classname="calendar has aria-labelledby prop that includes both the aria-labelledby prop and the header element id.">
    </testcase>
  </testsuite>
  <testsuite name="Card" timestamp="2019-01-26T00:12:16" tests="4" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Card/Card.js" failures="0" time="0.007">
    <testcase name="Card should display a checkbox on hover" time="0.003" classname="should display a checkbox on hover">
    </testcase>
    <testcase name="Card should support selection" time="0.002" classname="should support selection">
    </testcase>
    <testcase name="Card should allow selection to be disabled" time="0.001" classname="should allow selection to be disabled">
    </testcase>
    <testcase name="Card should fire event onSelectionChange when supplied" time="0.001" classname="should fire event onSelectionChange when supplied">
    </testcase>
  </testsuite>
  <testsuite name="Checkbox" timestamp="2019-01-26T00:12:16" tests="5" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Checkbox/Checkbox.js" failures="0" time="0.020000000000000004">
    <testcase name="Checkbox has correct defaults" time="0.001" classname="has correct defaults">
    </testcase>
    <testcase name="Checkbox supports indeterminate" time="0.017" classname="supports indeterminate">
    </testcase>
    <testcase name="Checkbox supports quiet" time="0" classname="supports quiet">
    </testcase>
    <testcase name="Checkbox supports additional classNames" time="0" classname="supports additional classNames">
    </testcase>
    <testcase name="Checkbox supports additional properties" time="0.002" classname="supports additional properties">
    </testcase>
  </testsuite>
  <testsuite name="Clock" timestamp="2019-01-26T00:12:16" tests="13" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Clock/Clock.js" failures="0" time="0.060000000000000005">
    <testcase name="Clock default" time="0.006" classname="default">
    </testcase>
    <testcase name="Clock supports defaultValue uncontrolled behavior" time="0.006" classname="supports defaultValue uncontrolled behavior">
    </testcase>
    <testcase name="Clock supports value controlled behavior" time="0.004" classname="supports value controlled behavior">
    </testcase>
    <testcase name="Clock supports quiet" time="0.004" classname="supports quiet">
    </testcase>
    <testcase name="Clock supports disabled" time="0.003" classname="supports disabled">
    </testcase>
    <testcase name="Clock supports invalid" time="0.003" classname="supports invalid">
    </testcase>
    <testcase name="Clock supports readOnly" time="0.003" classname="supports readOnly">
    </testcase>
    <testcase name="Clock supports required" time="0.003" classname="supports required">
    </testcase>
    <testcase name="Clock supports additional classNames" time="0.002" classname="supports additional classNames">
    </testcase>
    <testcase name="Clock supports additional properties" time="0.001" classname="supports additional properties">
    </testcase>
    <testcase name="Clock supports setting value as a prop" time="0.006" classname="supports setting value as a prop">
    </testcase>
    <testcase name="Clock supports focus method" time="0.009" classname="supports focus method">
    </testcase>
    <testcase name="Clock supports handleFocus, handleHourBlur, handleMinuteBlur" time="0.01" classname="supports handleFocus, handleHourBlur, handleMinuteBlur">
    </testcase>
  </testsuite>
  <testsuite name="dispatches onChange" timestamp="2019-01-26T00:12:16" tests="4" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Clock/Clock.js" failures="0" time="0.023">
    <testcase name="Clock dispatches onChange when hour changes" time="0.005" classname="when hour changes">
    </testcase>
    <testcase name="Clock dispatches onChange when minute changes" time="0.005" classname="when minute changes">
    </testcase>
    <testcase name="Clock dispatches onChange maintains month, day, and year of value when hour/minute changes are made" time="0.009" classname="maintains month, day, and year of value when hour/minute changes are made">
    </testcase>
    <testcase name="Clock dispatches onChange maintains month, day, and year of defaultValue when hour/minutes changes are made" time="0.004" classname="maintains month, day, and year of defaultValue when hour/minutes changes are made">
    </testcase>
  </testsuite>
  <testsuite name="Accessibility" timestamp="2019-01-26T00:12:16" tests="2" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Clock/Clock.js" failures="0" time="0.012">
    <testcase name="Clock Accessibility supports aria-labelledby" time="0.007" classname="supports aria-labelledby">
    </testcase>
    <testcase name="Clock Accessibility supports aria-label" time="0.005" classname="supports aria-label">
    </testcase>
  </testsuite>
  <testsuite name="AM/PM Support" timestamp="2019-01-26T00:12:16" tests="9" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Clock/Clock.js" failures="0" time="0.20500000000000002">
    <testcase name="Clock AM/PM Support supports AM/PM format" time="0.003" classname="supports AM/PM format">
    </testcase>
    <testcase name="Clock AM/PM Support does not display AM/PM dropdown by default" time="0.003" classname="does not display AM/PM dropdown by default">
    </testcase>
    <testcase name="Clock AM/PM Support displays am for 01:00" time="0.003" classname="displays am for 01:00">
    </testcase>
    <testcase name="Clock AM/PM Support displays pm for 13:00" time="0.003" classname="displays pm for 13:00">
    </testcase>
    <testcase name="Clock AM/PM Support supports lowercase AM" time="0.118" classname="supports lowercase AM">
    </testcase>
    <testcase name="Clock AM/PM Support supports uppercase AM" time="0.065" classname="supports uppercase AM">
    </testcase>
    <testcase name="Clock AM/PM Support handles 13:00 as 1pm" time="0.003" classname="handles 13:00 as 1pm">
    </testcase>
    <testcase name="Clock AM/PM Support handles 00:30 as 12:30am" time="0.003" classname="handles 00:30 as 12:30am">
    </testcase>
    <testcase name="Clock AM/PM Support can change from AM to PM" time="0.004" classname="can change from AM to PM">
    </testcase>
  </testsuite>
  <testsuite name="Column" timestamp="2019-01-26T00:12:17" tests="16" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/ColumnView/Column.js" failures="0" time="0.032">
    <testcase name="Column should render a collection view" time="0.002" classname="should render a collection view">
    </testcase>
    <testcase name="Column should allow multiple highlighting if selection is enabled" time="0.001" classname="should allow multiple highlighting if selection is enabled">
    </testcase>
    <testcase name="Column should render an item view" time="0.001" classname="should render an item view">
    </testcase>
    <testcase name="Column should select an item" time="0.002" classname="should select an item">
    </testcase>
    <testcase name="Column should highlight a navigated item" time="0.001" classname="should highlight a navigated item">
    </testcase>
    <testcase name="Column should trigger a navigate when highlighting an item" time="0.002" classname="should trigger a navigate when highlighting an item">
    </testcase>
    <testcase name="Column should navigate to the parent if no items are selected" time="0.002" classname="should navigate to the parent if no items are selected">
    </testcase>
    <testcase name="Column should not navigate if multiple items are selected" time="0.002" classname="should not navigate if multiple items are selected">
    </testcase>
    <testcase name="Column should commit the selection when pressing enter" time="0.001" classname="should commit the selection when pressing enter">
    </testcase>
    <testcase name="Column should not commit the selection when pressing enter if selection is not enabled" time="0.001" classname="should not commit the selection when pressing enter if selection is not enabled">
    </testcase>
    <testcase name="Column should commit the selection when pressing enter for branch items if enabled" time="0.001" classname="should commit the selection when pressing enter for branch items if enabled">
    </testcase>
    <testcase name="Column should not commit the selection when pressing enter for branch items if not enabled" time="0.001" classname="should not commit the selection when pressing enter for branch items if not enabled">
    </testcase>
    <testcase name="Column should unselect the highlighted items when pressing enter if they are all already selected" time="0.001" classname="should unselect the highlighted items when pressing enter if they are all already selected">
    </testcase>
    <testcase name="Column should select the highlighted items when pressing enter if there are mixed selected and unselected items" time="0" classname="should select the highlighted items when pressing enter if there are mixed selected and unselected items">
    </testcase>
    <testcase name="Column should navigate to the next column when pressing the right arrow key" time="0.002" classname="should navigate to the next column when pressing the right arrow key">
    </testcase>
    <testcase name="Column should navigate to the previous column when pressing the left arrow key" time="0.012" classname="should navigate to the previous column when pressing the left arrow key">
    </testcase>
  </testsuite>
  <testsuite name="ColumnView" timestamp="2019-01-26T00:12:17" tests="6" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/ColumnView/ColumnView.js" failures="0" time="0.276">
    <testcase name="ColumnView passes default props to Column" time="0.004" classname="passes default props to Column">
    </testcase>
    <testcase name="ColumnView renders a detail column" time="0.005" classname="renders a detail column">
    </testcase>
    <testcase name="ColumnView calls the selectionChange prop" time="0.001" classname="calls the selectionChange prop">
    </testcase>
    <testcase name="ColumnView calls the onNavigate prop" time="0.155" classname="calls the onNavigate prop">
    </testcase>
    <testcase name="ColumnView should set the selected items if passed" time="0.006" classname="should set the selected items if passed">
    </testcase>
    <testcase name="ColumnView should work with a TreeDataSource" time="0.105" classname="should work with a TreeDataSource">
    </testcase>
  </testsuite>
  <testsuite name="navigatedPath" timestamp="2019-01-26T00:12:17" tests="2" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/ColumnView/ColumnView.js" failures="0" time="0.205">
    <testcase name="ColumnView navigatedPath should navigate to a nested item" time="0.103" classname="should navigate to a nested item">
    </testcase>
    <testcase name="ColumnView navigatedPath should navigate to a nested item using isItemEqual comparator" time="0.102" classname="should navigate to a nested item using isItemEqual comparator">
    </testcase>
  </testsuite>
  <testsuite name="Accessibility" timestamp="2019-01-26T00:12:17" tests="2" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/ColumnView/ColumnView.js" failures="0" time="0.003">
    <testcase name="ColumnView Accessibility should have role=&quot;tree&quot;" time="0.001" classname="should have role=&quot;tree&quot;">
    </testcase>
    <testcase name="ColumnView Accessibility should have aria-multiselectable=&quot;true&quot;" time="0.002" classname="should have aria-multiselectable=&quot;true&quot;">
    </testcase>
  </testsuite>
  <testsuite name="ColumnViewDataSource" timestamp="2019-01-26T00:12:17" tests="19" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/ColumnView/ColumnViewDataSource.js" failures="0" time="0.044">
    <testcase name="ColumnViewDataSource should navigate to the root by default" time="0" classname="should navigate to the root by default">
    </testcase>
    <testcase name="ColumnViewDataSource should navigate to an item" time="0.001" classname="should navigate to an item">
    </testcase>
    <testcase name="ColumnViewDataSource should navigate further down the tree" time="0.001" classname="should navigate further down the tree">
    </testcase>
    <testcase name="ColumnViewDataSource should navigate to the next column" time="0.001" classname="should navigate to the next column">
    </testcase>
    <testcase name="ColumnViewDataSource should navigate to the previous column" time="0.001" classname="should navigate to the previous column">
    </testcase>
    <testcase name="ColumnViewDataSource should not navigate to the next column if there are no children" time="0.001" classname="should not navigate to the next column if there are no children">
    </testcase>
    <testcase name="ColumnViewDataSource should not navigate to the previous column if already at the first" time="0.001" classname="should not navigate to the previous column if already at the first">
    </testcase>
    <testcase name="ColumnViewDataSource should return whether an item in the navigation path" time="0.001" classname="should return whether an item in the navigation path">
    </testcase>
    <testcase name="ColumnViewDataSource should get the detail item if no children" time="0.001" classname="should get the detail item if no children">
    </testcase>
    <testcase name="ColumnViewDataSource should not get a detail item if there are children" time="0.001" classname="should not get a detail item if there are children">
    </testcase>
    <testcase name="ColumnViewDataSource should select an item and reloadItems items up to parent level" time="0.003" classname="should select an item and reloadItems items up to parent level">
    </testcase>
    <testcase name="ColumnViewDataSource should deselect an item and reloadItems items up to parent level" time="0.002" classname="should deselect an item and reloadItems items up to parent level">
    </testcase>
    <testcase name="ColumnViewDataSource should set multiple items selected or deselected" time="0.002" classname="should set multiple items selected or deselected">
    </testcase>
    <testcase name="ColumnViewDataSource should clear the selection" time="0.002" classname="should clear the selection">
    </testcase>
    <testcase name="ColumnViewDataSource should get the selected items" time="0.001" classname="should get the selected items">
    </testcase>
    <testcase name="ColumnViewDataSource should check if an item is selected" time="0.001" classname="should check if an item is selected">
    </testcase>
    <testcase name="ColumnViewDataSource should select items by object reference by default" time="0.001" classname="should select items by object reference by default">
    </testcase>
    <testcase name="ColumnViewDataSource should support selecting objects equivalent by isItemEqual comparator" time="0.012" classname="should support selecting objects equivalent by isItemEqual comparator">
    </testcase>
    <testcase name="ColumnViewDataSource should support selecting objects equivalent by isItemEqual comparator with TreeDataSource" time="0.011" classname="should support selecting objects equivalent by isItemEqual comparator with TreeDataSource">
    </testcase>
  </testsuite>
  <testsuite name="insertChild" timestamp="2019-01-26T00:12:17" tests="5" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/ColumnView/ColumnViewDataSource.js" failures="0" time="0.015">
    <testcase name="ColumnViewDataSource insertChild should do nothing if children not yet loaded" time="0.001" classname="should do nothing if children not yet loaded">
    </testcase>
    <testcase name="ColumnViewDataSource insertChild should insert a child" time="0.002" classname="should insert a child">
    </testcase>
    <testcase name="ColumnViewDataSource insertChild should append a child" time="0.001" classname="should append a child">
    </testcase>
    <testcase name="ColumnViewDataSource insertChild should insert into an empty item" time="0.01" classname="should insert into an empty item">
    </testcase>
    <testcase name="ColumnViewDataSource insertChild should append to the root" time="0.001" classname="should append to the root">
    </testcase>
  </testsuite>
  <testsuite name="removeItem" timestamp="2019-01-26T00:12:17" tests="4" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/ColumnView/ColumnViewDataSource.js" failures="0" time="0.003">
    <testcase name="ColumnViewDataSource removeItem should do nothing if children not yet loaded" time="0.001" classname="should do nothing if children not yet loaded">
    </testcase>
    <testcase name="ColumnViewDataSource removeItem should remove a child" time="0.001" classname="should remove a child">
    </testcase>
    <testcase name="ColumnViewDataSource removeItem should update disclosure indicator if removing last child" time="0.001" classname="should update disclosure indicator if removing last child">
    </testcase>
    <testcase name="ColumnViewDataSource removeItem should update the navigation stack if removing a navigated item" time="0" classname="should update the navigation stack if removing a navigated item">
    </testcase>
  </testsuite>
  <testsuite name="moveItem" timestamp="2019-01-26T00:12:17" tests="9" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/ColumnView/ColumnViewDataSource.js" failures="0" time="0.011000000000000003">
    <testcase name="ColumnViewDataSource moveItem should do nothing if the parent is not loaded" time="0" classname="should do nothing if the parent is not loaded">
    </testcase>
    <testcase name="ColumnViewDataSource moveItem should remove an item if the destination is not loaded" time="0.002" classname="should remove an item if the destination is not loaded">
    </testcase>
    <testcase name="ColumnViewDataSource moveItem should move an item within the same parent" time="0.001" classname="should move an item within the same parent">
    </testcase>
    <testcase name="ColumnViewDataSource moveItem should move an item up the tree" time="0.001" classname="should move an item up the tree">
    </testcase>
    <testcase name="ColumnViewDataSource moveItem should move an item down the tree" time="0.002" classname="should move an item down the tree">
    </testcase>
    <testcase name="ColumnViewDataSource moveItem should reload source parent when moving the last item" time="0.002" classname="should reload source parent when moving the last item">
    </testcase>
    <testcase name="ColumnViewDataSource moveItem should reload destination parent when inserting the first item" time="0.001" classname="should reload destination parent when inserting the first item">
    </testcase>
    <testcase name="ColumnViewDataSource moveItem should update the navigation stack if moving a navigated item up the tree" time="0.001" classname="should update the navigation stack if moving a navigated item up the tree">
    </testcase>
    <testcase name="ColumnViewDataSource moveItem should update the navigation stack if moving a navigated item down the tree" time="0.001" classname="should update the navigation stack if moving a navigated item down the tree">
    </testcase>
  </testsuite>
  <testsuite name="setNavigatedPath" timestamp="2019-01-26T00:12:17" tests="2" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/ColumnView/ColumnViewDataSource.js" failures="0" time="0.001">
    <testcase name="ColumnViewDataSource setNavigatedPath should navigate to a nested item" time="0" classname="should navigate to a nested item">
    </testcase>
    <testcase name="ColumnViewDataSource setNavigatedPath should navigate to a nested item using isItemEqual comparator" time="0.001" classname="should navigate to a nested item using isItemEqual comparator">
    </testcase>
  </testsuite>
  <testsuite name="Column Item" timestamp="2019-01-26T00:12:17" tests="5" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/ColumnView/Item.js" failures="0" time="0.011">
    <testcase name="Column Item sets the correct branch classes based on props" time="0.001" classname="sets the correct branch classes based on props">
    </testcase>
    <testcase name="Column Item sets the correct selected classes based on props" time="0" classname="sets the correct selected classes based on props">
    </testcase>
    <testcase name="Column Item renders a checkbox when with branch selection" time="0.002" classname="renders a checkbox when with branch selection">
    </testcase>
    <testcase name="Column Item renders a checkbox without branch selection" time="0.001" classname="renders a checkbox without branch selection">
    </testcase>
    <testcase name="Column Item has ref when mounted" time="0.007" classname="has ref when mounted">
    </testcase>
  </testsuite>
  <testsuite name="Accessibility" timestamp="2019-01-26T00:12:17" tests="6" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/ColumnView/Item.js" failures="0" time="0.009000000000000001">
    <testcase name="Column Item Accessibility should have role=treeitem" time="0.001" classname="should have role=treeitem">
    </testcase>
    <testcase name="Column Item Accessibility supports tabIndex" time="0.002" classname="supports tabIndex">
    </testcase>
    <testcase name="Column Item Accessibility supports aria-selected" time="0.001" classname="supports aria-selected">
    </testcase>
    <testcase name="Column Item Accessibility supports aria-level, aria-posinset and aria-setsize" time="0.001" classname="supports aria-level, aria-posinset and aria-setsize">
    </testcase>
    <testcase name="Column Item Accessibility clicking checkbox should set focus to item" time="0.003" classname="clicking checkbox should set focus to item">
    </testcase>
    <testcase name="Column Item Accessibility should add aria-owns and aria-describedby for detail view when renderDetail is true" time="0.001" classname="should add aria-owns and aria-describedby for detail view when renderDetail is true">
    </testcase>
  </testsuite>
  <testsuite name="ComboBox" timestamp="2019-01-26T00:12:17" tests="8" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/ComboBox/ComboBox.js" failures="0" time="0.094">
    <testcase name="ComboBox should render a textfield and button" time="0.003" classname="should render a textfield and button">
    </testcase>
    <testcase name="ComboBox should render classnames for states" time="0.001" classname="should render classnames for states">
    </testcase>
    <testcase name="ComboBox should get completions from options" time="0.002" classname="should get completions from options">
    </testcase>
    <testcase name="ComboBox should toggle menu on button click" time="0.074" classname="should toggle menu on button click">
    </testcase>
    <testcase name="ComboBox should not filter if we havent changed" time="0.001" classname="should not filter if we havent changed">
    </testcase>
    <testcase name="ComboBox should support icons" time="0.001" classname="should support icons">
    </testcase>
    <testcase name="ComboBox should support additional classNames" time="0.001" classname="should support additional classNames">
    </testcase>
    <testcase name="ComboBox should update accessibility label for button on change" time="0.011" classname="should update accessibility label for button on change">
    </testcase>
  </testsuite>
  <testsuite name="Datepicker" timestamp="2019-01-26T00:12:17" tests="13" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Datepicker/Datepicker.js" failures="0" time="0.031000000000000007">
    <testcase name="Datepicker default" time="0.007" classname="default">
    </testcase>
    <testcase name="Datepicker supports type (date, time, and datetime)" time="0.004" classname="supports type (date, time, and datetime)">
    </testcase>
    <testcase name="Datepicker supports defaultValue uncontrolled behavior" time="0.004" classname="supports defaultValue uncontrolled behavior">
    </testcase>
    <testcase name="Datepicker supports value controlled behavior" time="0.003" classname="supports value controlled behavior">
    </testcase>
    <testcase name="Datepicker supports placeholder" time="0.001" classname="supports placeholder">
    </testcase>
    <testcase name="Datepicker supports quiet" time="0.001" classname="supports quiet">
    </testcase>
    <testcase name="Datepicker supports disabled" time="0.002" classname="supports disabled">
    </testcase>
    <testcase name="Datepicker supports invalid" time="0.001" classname="supports invalid">
    </testcase>
    <testcase name="Datepicker supports readOnly" time="0.002" classname="supports readOnly">
    </testcase>
    <testcase name="Datepicker supports required" time="0.002" classname="supports required">
    </testcase>
    <testcase name="Datepicker supports additional classNames" time="0.001" classname="supports additional classNames">
    </testcase>
    <testcase name="Datepicker supports additional properties" time="0.001" classname="supports additional properties">
    </testcase>
    <testcase name="Datepicker supports popover placement" time="0.002" classname="supports popover placement">
    </testcase>
  </testsuite>
  <testsuite name="onBlur" timestamp="2019-01-26T00:12:17" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Datepicker/Datepicker.js" failures="0" time="0.003">
    <testcase name="Datepicker onBlur calls onBlur when text input is blurred" time="0.003" classname="calls onBlur when text input is blurred">
    </testcase>
  </testsuite>
  <testsuite name="onChange" timestamp="2019-01-26T00:12:17" tests="5" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Datepicker/Datepicker.js" failures="0" time="0.011000000000000001">
    <testcase name="Datepicker onChange textfield onChange" time="0.003" classname="textfield onChange">
    </testcase>
    <testcase name="Datepicker onChange calendar onChange" time="0.002" classname="calendar onChange">
    </testcase>
    <testcase name="Datepicker onChange calendar onChange with displayFormat" time="0.002" classname="calendar onChange with displayFormat">
    </testcase>
    <testcase name="Datepicker onChange clock onChange" time="0.002" classname="clock onChange">
    </testcase>
    <testcase name="Datepicker onChange clock onChange with displayFormat" time="0.002" classname="clock onChange with displayFormat">
    </testcase>
  </testsuite>
  <testsuite name="maintains month, day, and year when hour/minute changes are made" timestamp="2019-01-26T00:12:17" tests="2" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Datepicker/Datepicker.js" failures="0" time="0.018000000000000002">
    <testcase name="Datepicker onChange maintains month, day, and year when hour/minute changes are made when controlled" time="0.01" classname="when controlled">
    </testcase>
    <testcase name="Datepicker onChange maintains month, day, and year when hour/minute changes are made when not controlled" time="0.008" classname="when not controlled">
    </testcase>
  </testsuite>
  <testsuite name="Dial" timestamp="2019-01-26T00:12:17" tests="18" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Dial/Dial.js" failures="0" time="0.09400000000000001">
    <testcase name="Dial should render a dial" time="0.006" classname="should render a dial">
    </testcase>
    <testcase name="Dial should support setting a default value" time="0.003" classname="should support setting a default value">
    </testcase>
    <testcase name="Dial should support setting a min and max value" time="0.004" classname="should support setting a min and max value">
    </testcase>
    <testcase name="Dial should support drag and drop to set the dial value" time="0.011" classname="should support drag and drop to set the dial value">
    </testcase>
    <testcase name="Dial should support drag and drop to set the dial value, snapping to step" time="0.004" classname="should support drag and drop to set the dial value, snapping to step">
    </testcase>
    <testcase name="Dial should not set state if value is controlled" time="0.003" classname="should not set state if value is controlled">
    </testcase>
    <testcase name="Dial should stop dragging on mouse up" time="0.006" classname="should stop dragging on mouse up">
    </testcase>
    <testcase name="Dial should support disabled" time="0.002" classname="should support disabled">
    </testcase>
    <testcase name="Dial should support focus/blur states" time="0.004" classname="should support focus/blur states">
    </testcase>
    <testcase name="Dial should support changing value via input element using keyboard or assitive technology" time="0.008" classname="should support changing value via input element using keyboard or assitive technology">
    </testcase>
    <testcase name="Dial should support small size" time="0.002" classname="should support small size">
    </testcase>
    <testcase name="Dial should support adding label, hidden by default, but still accessible" time="0.004" classname="should support adding label, hidden by default, but still accessible">
    </testcase>
    <testcase name="Dial should support adding label and aria-labelledby, hidden by default, but still accessible" time="0.007" classname="should support adding label and aria-labelledby, hidden by default, but still accessible">
    </testcase>
    <testcase name="Dial should support adding label and aria-labelledby with renderLabel" time="0.009" classname="should support adding label and aria-labelledby with renderLabel">
    </testcase>
    <testcase name="Dial should submit values when stopped dragging" time="0.003" classname="should submit values when stopped dragging">
    </testcase>
    <testcase name="Dial should set focus to input on mousedown" time="0.006" classname="should set focus to input on mousedown">
    </testcase>
    <testcase name="Dial should set focus to input on mouseup" time="0.005" classname="should set focus to input on mouseup">
    </testcase>
    <testcase name="Dial should set focus to input on value click" time="0.007" classname="should set focus to input on value click">
    </testcase>
  </testsuite>
  <testsuite name="Dialog" timestamp="2019-01-26T00:12:18" tests="21" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Dialog/Dialog.js" failures="0" time="0.107">
    <testcase name="Dialog default" time="0.002" classname="default">
    </testcase>
    <testcase name="Dialog supports optional title" time="0.001" classname="supports optional title">
    </testcase>
    <testcase name="Dialog supports optional footer" time="0.003" classname="supports optional footer">
    </testcase>
    <testcase name="Dialog defaults to information variant with only confirm button" time="0.002" classname="defaults to information variant with only confirm button">
    </testcase>
    <testcase name="Dialog defaults to information variant with confirm and cancel button" time="0.001" classname="defaults to information variant with confirm and cancel button">
    </testcase>
    <testcase name="Dialog supports different variants" time="0.005" classname="supports different variants">
    </testcase>
    <testcase name="Dialog supports alert mode" time="0" classname="supports alert mode">
    </testcase>
    <testcase name="Dialog supports fullscreen mode" time="0.001" classname="supports fullscreen mode">
    </testcase>
    <testcase name="Dialog supports fullscreen takeover mode" time="0.001" classname="supports fullscreen takeover mode">
    </testcase>
    <testcase name="Dialog renders content comp if there is a title" time="0.002" classname="renders content comp if there is a title">
    </testcase>
    <testcase name="Dialog does not render a content comp if there is no title" time="0.001" classname="does not render a content comp if there is no title">
    </testcase>
    <testcase name="Dialog calls props.onClose" time="0.002" classname="calls props.onClose">
    </testcase>
    <testcase name="Dialog calls props.onConfirm and onClose" time="0.005" classname="calls props.onConfirm and onClose">
    </testcase>
    <testcase name="Dialog calls props.onCancel and onClose" time="0.003" classname="calls props.onCancel and onClose">
    </testcase>
    <testcase name="Dialog calls props.onConfirm but not onClose" time="0.003" classname="calls props.onConfirm but not onClose">
    </testcase>
    <testcase name="Dialog calls props.onCancel but not onClose" time="0.003" classname="calls props.onCancel but not onClose">
    </testcase>
    <testcase name="Dialog supports autoFocusButton=&apos;confirm&apos;" time="0.031" classname="supports autoFocusButton=&apos;confirm&apos;">
    </testcase>
    <testcase name="Dialog supports autoFocusButton=&apos;cancel&apos;" time="0.023" classname="supports autoFocusButton=&apos;cancel&apos;">
    </testcase>
    <testcase name="Dialog supports disabling confirm button" time="0.004" classname="supports disabling confirm button">
    </testcase>
    <testcase name="Dialog supports keyboardConfirm" time="0.01" classname="supports keyboardConfirm">
    </testcase>
    <testcase name="Dialog Esc key triggers onCancel" time="0.004" classname="Esc key triggers onCancel">
    </testcase>
  </testsuite>
  <testsuite name="DialogButtons" timestamp="2019-01-26T00:12:18" tests="12" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Dialog/DialogButtons.js" failures="0" time="0.07500000000000001">
    <testcase name="DialogButtons default" time="0.001" classname="default">
    </testcase>
    <testcase name="DialogButtons renders no buttons on default" time="0" classname="renders no buttons on default">
    </testcase>
    <testcase name="DialogButtons renders an OK button using confirmLabel" time="0" classname="renders an OK button using confirmLabel">
    </testcase>
    <testcase name="DialogButtons renders an OK and close button" time="0" classname="renders an OK and close button">
    </testcase>
    <testcase name="DialogButtons renders three buttons with secondaryLabel" time="0.001" classname="renders three buttons with secondaryLabel">
    </testcase>
    <testcase name="DialogButtons supports onCancel and onConfirm" time="0.001" classname="supports onCancel and onConfirm">
    </testcase>
    <testcase name="DialogButtons supports onConfirm with primary or secondary option" time="0" classname="supports onConfirm with primary or secondary option">
    </testcase>
    <testcase name="DialogButtons supports autoFocus=&apos;confirm&apos;" time="0.023" classname="supports autoFocus=&apos;confirm&apos;">
    </testcase>
    <testcase name="DialogButtons supports autoFocus=&apos;cancel&apos;" time="0.024" classname="supports autoFocus=&apos;cancel&apos;">
    </testcase>
    <testcase name="DialogButtons supports autoFocus=&apos;secondary&apos;" time="0.023" classname="supports autoFocus=&apos;secondary&apos;">
    </testcase>
    <testcase name="DialogButtons supports disabling confirm button" time="0.001" classname="supports disabling confirm button">
    </testcase>
    <testcase name="DialogButtons disables secondary button when confirm is disabled" time="0.001" classname="disables secondary button when confirm is disabled">
    </testcase>
  </testsuite>
  <testsuite name="DialogHeader" timestamp="2019-01-26T00:12:18" tests="7" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Dialog/DialogHeader.js" failures="0" time="0.05">
    <testcase name="DialogHeader supports optional title" time="0.001" classname="supports optional title">
    </testcase>
    <testcase name="DialogHeader supports additional classNames" time="0.001" classname="supports additional classNames">
    </testcase>
    <testcase name="DialogHeader supports fullscreen mode" time="0" classname="supports fullscreen mode">
    </testcase>
    <testcase name="DialogHeader supports fullscreen takeover mode" time="0.001" classname="supports fullscreen takeover mode">
    </testcase>
    <testcase name="DialogHeader supports autoFocus=&apos;confirm&apos;" time="0.023" classname="supports autoFocus=&apos;confirm&apos;">
    </testcase>
    <testcase name="DialogHeader supports autoFocus=&apos;cancel&apos;" time="0.022" classname="supports autoFocus=&apos;cancel&apos;">
    </testcase>
    <testcase name="DialogHeader supports disabling confirm button" time="0.002" classname="supports disabling confirm button">
    </testcase>
  </testsuite>
  <testsuite name="DropZone" timestamp="2019-01-26T00:12:18" tests="5" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/DropZone/DropZone.js" failures="0" time="0.325">
    <testcase name="DropZone should support custom children" time="0.002" classname="should support custom children">
    </testcase>
    <testcase name="DropZone should support custom className" time="0.001" classname="should support custom className">
    </testcase>
    <testcase name="DropZone should animate onDragOver" time="0.108" classname="should animate onDragOver">
    </testcase>
    <testcase name="DropZone should pass EventListeners" time="0.107" classname="should pass EventListeners">
    </testcase>
    <testcase name="DropZone should handle shouldAccept properly" time="0.107" classname="should handle shouldAccept properly">
    </testcase>
  </testsuite>
  <testsuite name="Dropdown" timestamp="2019-01-26T00:12:18" tests="8" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Dropdown/Dropdown.js" failures="0" time="0.094">
    <testcase name="Dropdown renders a target" time="0.003" classname="renders a target">
    </testcase>
    <testcase name="Dropdown renders other children" time="0.003" classname="renders other children">
    </testcase>
    <testcase name="Dropdown allows any child to be the trigger" time="0.003" classname="allows any child to be the trigger">
    </testcase>
    <testcase name="Dropdown closes the menu onClose" time="0.002" classname="closes the menu onClose">
    </testcase>
    <testcase name="Dropdown closes the menu onSelect" time="0.001" classname="closes the menu onSelect">
    </testcase>
    <testcase name="Dropdown menu remains open onSelect when closeOnSelect set to false" time="0.002" classname="menu remains open onSelect when closeOnSelect set to false">
    </testcase>
    <testcase name="Dropdown calls onOpen and onClose" time="0.004" classname="calls onOpen and onClose">
    </testcase>
    <testcase name="Dropdown aria-expanded is set correctly after open/close" time="0.076" classname="aria-expanded is set correctly after open/close">
    </testcase>
  </testsuite>
  <testsuite name="DropdownButton" timestamp="2019-01-26T00:12:18" tests="2" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/DropdownButton/DropdownButton.js" failures="0" time="0.003">
    <testcase name="DropdownButton renders a default" time="0.001" classname="renders a default">
    </testcase>
    <testcase name="DropdownButton passes props" time="0.002" classname="passes props">
    </testcase>
  </testsuite>
  <testsuite name="FieldLabel" timestamp="2019-01-26T00:12:18" tests="15" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/FieldLabel/FieldLabel.js" failures="0" time="0.029000000000000005">
    <testcase name="FieldLabel should render a label and its children" time="0.004" classname="should render a label and its children">
    </testcase>
    <testcase name="FieldLabel should render only a label" time="0" classname="should render only a label">
    </testcase>
    <testcase name="FieldLabel should generate an id and label for attribute by default" time="0.002" classname="should generate an id and label for attribute by default">
    </testcase>
    <testcase name="FieldLabel if an id is specified on the label it should remain unchanged" time="0.002" classname="if an id is specified on the label it should remain unchanged">
    </testcase>
    <testcase name="FieldLabel if an id is not specified on the label one should be generated" time="0.001" classname="if an id is not specified on the label one should be generated">
    </testcase>
    <testcase name="FieldLabel should render a label positioned on the left side" time="0.001" classname="should render a label positioned on the left side">
    </testcase>
    <testcase name="FieldLabel should render a label positioned on the right side" time="0.001" classname="should render a label positioned on the right side">
    </testcase>
    <testcase name="FieldLabel supports label for" time="0.002" classname="supports label for">
    </testcase>
    <testcase name="FieldLabel supports necessity required" time="0.003" classname="supports necessity required">
    </testcase>
    <testcase name="FieldLabel supports necessity required and necessityIndicator icon" time="0.001" classname="supports necessity required and necessityIndicator icon">
    </testcase>
    <testcase name="FieldLabel supports necessity required necessityIndicator label" time="0.002" classname="supports necessity required necessityIndicator label">
    </testcase>
    <testcase name="FieldLabel supports necessity optional" time="0.002" classname="supports necessity optional">
    </testcase>
    <testcase name="FieldLabel supports necessity optional necessityIndicator label" time="0.007" classname="supports necessity optional necessityIndicator label">
    </testcase>
    <testcase name="FieldLabel supports additional classNames" time="0" classname="supports additional classNames">
    </testcase>
    <testcase name="FieldLabel supports additional properties" time="0.001" classname="supports additional properties">
    </testcase>
  </testsuite>
  <testsuite name="Form" timestamp="2019-01-26T00:12:18" tests="3" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Form/Form.js" failures="0" time="0.003">
    <testcase name="Form should render a Form element with classes and its children" time="0.002" classname="should render a Form element with classes and its children">
    </testcase>
    <testcase name="Form should render with additional properties" time="0.001" classname="should render with additional properties">
    </testcase>
    <testcase name="Form should render with additional classnames" time="0" classname="should render with additional classnames">
    </testcase>
  </testsuite>
  <testsuite name="FormItem" timestamp="2019-01-26T00:12:18" tests="4" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Form/FormItem.js" failures="0" time="0.007">
    <testcase name="FormItem should render a FormItem element with classes and its children" time="0.003" classname="should render a FormItem element with classes and its children">
    </testcase>
    <testcase name="FormItem label should have the correct inner text and reference" time="0.001" classname="label should have the correct inner text and reference">
    </testcase>
    <testcase name="FormItem label text should be right aligned" time="0.002" classname="label text should be right aligned">
    </testcase>
    <testcase name="FormItem with no label prop use div rather than label" time="0.001" classname="with no label prop use div rather than label">
    </testcase>
  </testsuite>
  <testsuite name="Grid" timestamp="2019-01-26T00:12:18" tests="5" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Grid/Grid.js" failures="0" time="0.003">
    <testcase name="Grid supports additional classNames" time="0.002" classname="supports additional classNames">
    </testcase>
    <testcase name="Grid supports additional properties" time="0" classname="supports additional properties">
    </testcase>
    <testcase name="Grid supports children" time="0" classname="supports children">
    </testcase>
    <testcase name="Grid supports fixed variant" time="0.001" classname="supports fixed variant">
    </testcase>
    <testcase name="Grid supports fluid variant" time="0" classname="supports fluid variant">
    </testcase>
  </testsuite>
  <testsuite name="GridColumn" timestamp="2019-01-26T00:12:18" tests="8" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Grid/GridColumn.js" failures="0" time="0.004">
    <testcase name="GridColumn supports additional classNames" time="0.002" classname="supports additional classNames">
    </testcase>
    <testcase name="GridColumn supports additional properties" time="0" classname="supports additional properties">
    </testcase>
    <testcase name="GridColumn supports children" time="0" classname="supports children">
    </testcase>
    <testcase name="GridColumn supports custom column size" time="0" classname="supports custom column size">
    </testcase>
    <testcase name="GridColumn supports first property" time="0" classname="supports first property">
    </testcase>
    <testcase name="GridColumn supports last property" time="0.001" classname="supports last property">
    </testcase>
    <testcase name="GridColumn supports custom offset size" time="0.001" classname="supports custom offset size">
    </testcase>
    <testcase name="GridColumn supports auto sizing" time="0" classname="supports auto sizing">
    </testcase>
  </testsuite>
  <testsuite name="GridRow" timestamp="2019-01-26T00:12:18" tests="12" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Grid/GridRow.js" failures="0" time="0.004">
    <testcase name="GridRow supports additional classNames" time="0.002" classname="supports additional classNames">
    </testcase>
    <testcase name="GridRow supports additional properties" time="0" classname="supports additional properties">
    </testcase>
    <testcase name="GridRow supports children" time="0" classname="supports children">
    </testcase>
    <testcase name="GridRow supports align start" time="0.001" classname="supports align start">
    </testcase>
    <testcase name="GridRow supports align center" time="0" classname="supports align center">
    </testcase>
    <testcase name="GridRow supports align start" time="0" classname="supports align start">
    </testcase>
    <testcase name="GridRow supports align top" time="0" classname="supports align top">
    </testcase>
    <testcase name="GridRow supports align middle" time="0" classname="supports align middle">
    </testcase>
    <testcase name="GridRow supports align start" time="0" classname="supports align start">
    </testcase>
    <testcase name="GridRow supports reverse" time="0.001" classname="supports reverse">
    </testcase>
    <testcase name="GridRow supports around distribution" time="0" classname="supports around distribution">
    </testcase>
    <testcase name="GridRow supports between distribution" time="0" classname="supports between distribution">
    </testcase>
  </testsuite>
  <testsuite name="responsive" timestamp="2019-01-26T00:12:18" tests="5" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Grid/responsive.js" failures="0" time="0">
    <testcase name="responsive supports objects" time="0" classname="supports objects">
    </testcase>
    <testcase name="responsive supports arrays" time="0" classname="supports arrays">
    </testcase>
    <testcase name="responsive supports values" time="0" classname="supports values">
    </testcase>
    <testcase name="responsive supports auto sizing" time="0" classname="supports auto sizing">
    </testcase>
    <testcase name="responsive supports undefined" time="0" classname="supports undefined">
    </testcase>
  </testsuite>
  <testsuite name="GalleryLayout" timestamp="2019-01-26T00:12:18" tests="11" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/GridView/GalleryLayout.js" failures="0" time="0.002">
    <testcase name="GalleryLayout should layout some items" time="0" classname="should layout some items">
    </testcase>
    <testcase name="GalleryLayout should get a drop target with dropPosition=&quot;on&quot;" time="0.001" classname="should get a drop target with dropPosition=&quot;on&quot;">
    </testcase>
    <testcase name="GalleryLayout should get a drop target on the whole table with dropPosition=&quot;on&quot;" time="0" classname="should get a drop target on the whole table with dropPosition=&quot;on&quot;">
    </testcase>
    <testcase name="GalleryLayout should get a drop target with dropPosition=&quot;between&quot;" time="0.001" classname="should get a drop target with dropPosition=&quot;between&quot;">
    </testcase>
    <testcase name="GalleryLayout should get a drop target at the end with dropPosition=&quot;between&quot;" time="0" classname="should get a drop target at the end with dropPosition=&quot;between&quot;">
    </testcase>
    <testcase name="GalleryLayout should shift a row when dragging between two items" time="0" classname="should shift a row when dragging between two items">
    </testcase>
    <testcase name="GalleryLayout should not shift a row when reordering items in a position next to the original" time="0" classname="should not shift a row when reordering items in a position next to the original">
    </testcase>
    <testcase name="GalleryLayout should get the indexPathAbove" time="0" classname="should get the indexPathAbove">
    </testcase>
    <testcase name="GalleryLayout should get the indexPathBelow" time="0" classname="should get the indexPathBelow">
    </testcase>
    <testcase name="GalleryLayout should get the indexPathLeftOf" time="0" classname="should get the indexPathLeftOf">
    </testcase>
    <testcase name="GalleryLayout should get the indexPathRightOf" time="0" classname="should get the indexPathRightOf">
    </testcase>
  </testsuite>
  <testsuite name="GridItem" timestamp="2019-01-26T00:12:18" tests="4" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/GridView/GridItem.js" failures="0" time="0.003">
    <testcase name="GridItem should have aria properties" time="0.002" classname="should have aria properties">
    </testcase>
    <testcase name="GridItem should support aria-selected" time="0" classname="should support aria-selected">
    </testcase>
    <testcase name="GridItem should have tabIndex = 0 when focused" time="0.001" classname="should have tabIndex = 0 when focused">
    </testcase>
    <testcase name="GridItem should have tabIndex = 0 when there are no items focused" time="0" classname="should have tabIndex = 0 when there are no items focused">
    </testcase>
  </testsuite>
  <testsuite name="GridLayout" timestamp="2019-01-26T00:12:18" tests="11" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/GridView/GridLayout.js" failures="0" time="0.007">
    <testcase name="GridLayout should layout some items" time="0.001" classname="should layout some items">
    </testcase>
    <testcase name="GridLayout should get a drop target with dropPosition=&quot;on&quot;" time="0.001" classname="should get a drop target with dropPosition=&quot;on&quot;">
    </testcase>
    <testcase name="GridLayout should get a drop target on the whole table with dropPosition=&quot;on&quot;" time="0.004" classname="should get a drop target on the whole table with dropPosition=&quot;on&quot;">
    </testcase>
    <testcase name="GridLayout should get a drop target with dropPosition=&quot;between&quot;" time="0" classname="should get a drop target with dropPosition=&quot;between&quot;">
    </testcase>
    <testcase name="GridLayout should get a drop target at the end with dropPosition=&quot;between&quot;" time="0" classname="should get a drop target at the end with dropPosition=&quot;between&quot;">
    </testcase>
    <testcase name="GridLayout should shift a row when dragging between two items" time="0" classname="should shift a row when dragging between two items">
    </testcase>
    <testcase name="GridLayout should not shift a row when reordering items in a position next to the original" time="0" classname="should not shift a row when reordering items in a position next to the original">
    </testcase>
    <testcase name="GridLayout should get the indexPathAbove" time="0.001" classname="should get the indexPathAbove">
    </testcase>
    <testcase name="GridLayout should get the indexPathBelow" time="0" classname="should get the indexPathBelow">
    </testcase>
    <testcase name="GridLayout should get the indexPathLeftOf" time="0" classname="should get the indexPathLeftOf">
    </testcase>
    <testcase name="GridLayout should get the indexPathRightOf" time="0" classname="should get the indexPathRightOf">
    </testcase>
  </testsuite>
  <testsuite name="GridView" timestamp="2019-01-26T00:12:18" tests="4" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/GridView/GridView.js" failures="0" time="0.004">
    <testcase name="GridView should render a collection view" time="0.002" classname="should render a collection view">
    </testcase>
    <testcase name="GridView should use a layout instance" time="0.001" classname="should use a layout instance">
    </testcase>
    <testcase name="GridView wraps items in a GridItem" time="0.001" classname="wraps items in a GridItem">
    </testcase>
    <testcase name="GridView should fire an onSelectionChange event" time="0" classname="should fire an onSelectionChange event">
    </testcase>
  </testsuite>
  <testsuite name="WaterfallLayout" timestamp="2019-01-26T00:12:18" tests="7" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/GridView/WaterfallLayout.js" failures="0" time="0.003">
    <testcase name="WaterfallLayout should layout some items" time="0.001" classname="should layout some items">
    </testcase>
    <testcase name="WaterfallLayout should get a drop target with dropPosition=&quot;on&quot;" time="0.001" classname="should get a drop target with dropPosition=&quot;on&quot;">
    </testcase>
    <testcase name="WaterfallLayout should get a drop target on the whole table with dropPosition=&quot;on&quot;" time="0" classname="should get a drop target on the whole table with dropPosition=&quot;on&quot;">
    </testcase>
    <testcase name="WaterfallLayout should get the indexPathAbove" time="0.001" classname="should get the indexPathAbove">
    </testcase>
    <testcase name="WaterfallLayout should get the indexPathBelow" time="0" classname="should get the indexPathBelow">
    </testcase>
    <testcase name="WaterfallLayout should get the indexPathLeftOf" time="0" classname="should get the indexPathLeftOf">
    </testcase>
    <testcase name="WaterfallLayout should get the indexPathRightOf" time="0" classname="should get the indexPathRightOf">
    </testcase>
  </testsuite>
  <testsuite name="Heading" timestamp="2019-01-26T00:12:18" tests="4" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Heading/Heading.js" failures="0" time="0.002">
    <testcase name="Heading supports different sizes" time="0.001" classname="supports different sizes">
    </testcase>
    <testcase name="Heading supports additional classNames" time="0" classname="supports additional classNames">
    </testcase>
    <testcase name="Heading supports additional properties" time="0" classname="supports additional properties">
    </testcase>
    <testcase name="Heading supports children" time="0.001" classname="supports children">
    </testcase>
  </testsuite>
  <testsuite name="Icon" timestamp="2019-01-26T00:12:18" tests="6" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Icon/Icon.js" failures="0" time="0.001">
    <testcase name="Icon supports icons" time="0" classname="supports icons">
    </testcase>
    <testcase name="Icon supports multiple sizes" time="0" classname="supports multiple sizes">
    </testcase>
    <testcase name="Icon supports additional classNames" time="0.001" classname="supports additional classNames">
    </testcase>
    <testcase name="Icon no alt specificed. Icon is hidden from AT" time="0" classname="no alt specificed. Icon is hidden from AT">
    </testcase>
    <testcase name="Icon alt text gets rendered appropriately" time="0" classname="alt text gets rendered appropriately">
    </testcase>
    <testcase name="Icon switches between sizes appropriately" time="0" classname="switches between sizes appropriately">
    </testcase>
  </testsuite>
  <testsuite name="IllustratedMessage" timestamp="2019-01-26T00:12:18" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/IllustratedMessage/IllustratedMessage.js" failures="0" time="0.002">
    <testcase name="IllustratedMessage should support customization" time="0.002" classname="should support customization">
    </testcase>
  </testsuite>
  <testsuite name="Image" timestamp="2019-01-26T00:12:18" tests="10" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Image/Image.js" failures="0" time="0.036000000000000004">
    <testcase name="Image should render an image" time="0.001" classname="should render an image">
    </testcase>
    <testcase name="Image should pass through additional DOM props" time="0" classname="should pass through additional DOM props">
    </testcase>
    <testcase name="Image should hide decorative image from assitive technology" time="0.001" classname="should hide decorative image from assitive technology">
    </testcase>
    <testcase name="Image should trigger onLoad" time="0.003" classname="should trigger onLoad">
    </testcase>
    <testcase name="Image should load an image using the cache" time="0.017" classname="should load an image using the cache">
    </testcase>
    <testcase name="Image should set is-loaded class when loaded" time="0.004" classname="should set is-loaded class when loaded">
    </testcase>
    <testcase name="Image should load a pre-cached image" time="0.001" classname="should load a pre-cached image">
    </testcase>
    <testcase name="Image should show a placeholder image when cached already" time="0.003" classname="should show a placeholder image when cached already">
    </testcase>
    <testcase name="Image should update the image when the src prop changes" time="0.003" classname="should update the image when the src prop changes">
    </testcase>
    <testcase name="Image should reset the state on error" time="0.003" classname="should reset the state on error">
    </testcase>
  </testsuite>
  <testsuite name="InlineEditor" timestamp="2019-01-26T00:12:18" tests="13" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/InlineEditor/InlineEditor.js" failures="0" time="0.014000000000000005">
    <testcase name="InlineEditor should render a label by default" time="0.001" classname="should render a label by default">
    </testcase>
    <testcase name="InlineEditor should render a textfield in autofocus mode" time="0.002" classname="should render a textfield in autofocus mode">
    </testcase>
    <testcase name="InlineEditor should render a textfield on double click" time="0" classname="should render a textfield on double click">
    </testcase>
    <testcase name="InlineEditor should support custom classnames" time="0.001" classname="should support custom classnames">
    </testcase>
    <testcase name="InlineEditor should save the value on enter" time="0.003" classname="should save the value on enter">
    </testcase>
    <testcase name="InlineEditor should save the value on enter when onChange returns success in validate mode" time="0.001" classname="should save the value on enter when onChange returns success in validate mode">
    </testcase>
    <testcase name="InlineEditor should remain a textfield on enter when onChange returns failure in validate mode" time="0.001" classname="should remain a textfield on enter when onChange returns failure in validate mode">
    </testcase>
    <testcase name="InlineEditor should not execute onCancel hook on Enter" time="0.001" classname="should not execute onCancel hook on Enter">
    </testcase>
    <testcase name="InlineEditor should execute onCancel hook on Escape key down" time="0.001" classname="should execute onCancel hook on Escape key down">
    </testcase>
    <testcase name="InlineEditor should revert to the previous value on escape" time="0.001" classname="should revert to the previous value on escape">
    </testcase>
    <testcase name="InlineEditor should not set state on save in controlled mode" time="0.001" classname="should not set state on save in controlled mode">
    </testcase>
    <testcase name="InlineEditor should update the value on value prop change" time="0.001" classname="should update the value on value prop change">
    </testcase>
    <testcase name="InlineEditor should not update the value on defaultValue prop change" time="0" classname="should not update the value on defaultValue prop change">
    </testcase>
  </testsuite>
  <testsuite name="Label" timestamp="2019-01-26T00:12:18" tests="5" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Label/Label.js" failures="0" time="0.002">
    <testcase name="Label supports the large size" time="0.001" classname="supports the large size">
    </testcase>
    <testcase name="Label supports variants, default grey" time="0" classname="supports variants, default grey">
    </testcase>
    <testcase name="Label supports additional classNames" time="0.001" classname="supports additional classNames">
    </testcase>
    <testcase name="Label supports additional properties" time="0" classname="supports additional properties">
    </testcase>
    <testcase name="Label supports children" time="0" classname="supports children">
    </testcase>
  </testsuite>
  <testsuite name="Link" timestamp="2019-01-26T00:12:18" tests="5" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Link/Link.js" failures="0" time="0.002">
    <testcase name="Link supports the quiet variation" time="0.001" classname="supports the quiet variation">
    </testcase>
    <testcase name="Link supports the overBackground variation" time="0.001" classname="supports the overBackground variation">
    </testcase>
    <testcase name="Link supports additional classNames" time="0" classname="supports additional classNames">
    </testcase>
    <testcase name="Link supports additional properties" time="0" classname="supports additional properties">
    </testcase>
    <testcase name="Link supports children" time="0" classname="supports children">
    </testcase>
  </testsuite>
  <testsuite name="List" timestamp="2019-01-26T00:12:18" tests="2" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/List/List.js" failures="0" time="0.002">
    <testcase name="List renders a ul with correct className" time="0.001" classname="renders a ul with correct className">
    </testcase>
    <testcase name="List is selectable when it should be" time="0.001" classname="is selectable when it should be">
    </testcase>
  </testsuite>
  <testsuite name="ListItem" timestamp="2019-01-26T00:12:18" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/List/ListItem.js" failures="0" time="0.001">
    <testcase name="ListItem li elements from ListItem shouldn&apos;t be passed a value prop" time="0.001" classname="li elements from ListItem shouldn&apos;t be passed a value prop">
    </testcase>
  </testsuite>
  <testsuite name="handleMouseEnter" timestamp="2019-01-26T00:12:18" tests="2" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/List/ListItem.js" failures="0" time="0.002">
    <testcase name="ListItem handleMouseEnter should focus the currentTarget on mouseEnter if onMouseEnter is undefined" time="0.001" classname="should focus the currentTarget on mouseEnter if onMouseEnter is undefined">
    </testcase>
    <testcase name="ListItem handleMouseEnter shouldn&apos;t focus the currentTarget on mouseEnter if onMouseEnter is supplied" time="0.001" classname="shouldn&apos;t focus the currentTarget on mouseEnter if onMouseEnter is supplied">
    </testcase>
  </testsuite>
  <testsuite name="handleClick" timestamp="2019-01-26T00:12:18" tests="3" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/List/ListItem.js" failures="0" time="0.001">
    <testcase name="ListItem handleClick should trigger onClick if onClick is supplied" time="0.001" classname="should trigger onClick if onClick is supplied">
    </testcase>
    <testcase name="ListItem handleClick should trigger onSelect if onSelect is supplied and onClick is not supplied." time="0" classname="should trigger onSelect if onSelect is supplied and onClick is not supplied.">
    </testcase>
    <testcase name="ListItem handleClick should trigger onClick and onSelect if both are supplied." time="0" classname="should trigger onClick and onSelect if both are supplied.">
    </testcase>
  </testsuite>
  <testsuite name="handleFocus" timestamp="2019-01-26T00:12:18" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/List/ListItem.js" failures="0" time="0">
    <testcase name="ListItem handleFocus should trigger onFocus if onFocus is supplied" time="0" classname="should trigger onFocus if onFocus is supplied">
    </testcase>
  </testsuite>
  <testsuite name="handleBlur" timestamp="2019-01-26T00:12:18" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/List/ListItem.js" failures="0" time="0.001">
    <testcase name="ListItem handleBlur should trigger onBlur if onBlur is supplied" time="0.001" classname="should trigger onBlur if onBlur is supplied">
    </testcase>
  </testsuite>
  <testsuite name="when role=menuitemcheckbox or role=menuitemradio" timestamp="2019-01-26T00:12:18" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/List/ListItem.js" failures="0" time="0.008">
    <testcase name="ListItem when role=menuitemcheckbox or role=menuitemradio should include aria-checked" time="0.008" classname="should include aria-checked">
    </testcase>
  </testsuite>
  <testsuite name="ListDataSource" timestamp="2019-01-26T00:12:18" tests="4" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/ListDataSource/ListDataSource.js" failures="0" time="0.017">
    <testcase name="ListDataSource should trigger a load when calling performLoad" time="0.011" classname="should trigger a load when calling performLoad">
    </testcase>
    <testcase name="ListDataSource should clear the data before loading" time="0.003" classname="should clear the data before loading">
    </testcase>
    <testcase name="ListDataSource should trigger a loadMore when calling performLoadMore" time="0.002" classname="should trigger a loadMore when calling performLoadMore">
    </testcase>
    <testcase name="ListDataSource should trigger a load when performing a sort" time="0.001" classname="should trigger a load when performing a sort">
    </testcase>
  </testsuite>
  <testsuite name="Menu" timestamp="2019-01-26T00:12:18" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Menu/Menu.js" failures="0" time="0.003">
    <testcase name="Menu renders a List with correct className" time="0.003" classname="renders a List with correct className">
    </testcase>
  </testsuite>
  <testsuite name="MenuDivider" timestamp="2019-01-26T00:12:18" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Menu/MenuDivider.js" failures="0" time="0.001">
    <testcase name="MenuDivider should render an li element with role=&quot;separator&quot;" time="0.001" classname="should render an li element with role=&quot;separator&quot;">
    </testcase>
  </testsuite>
  <testsuite name="MenuHeading" timestamp="2019-01-26T00:12:18" tests="3" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Menu/MenuHeading.js" failures="0" time="0.007">
    <testcase name="MenuHeading renders a li element with a Menu sectionHeading class and role=&quot;heading&quot;" time="0.002" classname="renders a li element with a Menu sectionHeading class and role=&quot;heading&quot;">
    </testcase>
    <testcase name="MenuHeading should set aria-level" time="0.002" classname="should set aria-level">
    </testcase>
    <testcase name="MenuHeading places label text as children of the li element" time="0.003" classname="places label text as children of the li element">
    </testcase>
  </testsuite>
  <testsuite name="MenuItem" timestamp="2019-01-26T00:12:18" tests="2" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Menu/MenuItem.js" failures="0" time="0.002">
    <testcase name="MenuItem should be a ListItem" time="0.001" classname="should be a ListItem">
    </testcase>
    <testcase name="MenuItem should accept a label" time="0.001" classname="should accept a label">
    </testcase>
  </testsuite>
  <testsuite name="SubMenu" timestamp="2019-01-26T00:12:18" tests="4" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Menu/SubMenu.js" failures="0" time="0.07100000000000001">
    <testcase name="SubMenu has correct defaults" time="0.003" classname="has correct defaults">
    </testcase>
    <testcase name="SubMenu renders an overlayTrigger" time="0.001" classname="renders an overlayTrigger">
    </testcase>
    <testcase name="SubMenu menuItem is trigger for overlay" time="0.002" classname="menuItem is trigger for overlay">
    </testcase>
    <testcase name="SubMenu Submenu is opened on trigger" time="0.065" classname="Submenu is opened on trigger">
    </testcase>
  </testsuite>
  <testsuite name="Accessibility" timestamp="2019-01-26T00:12:19" tests="3" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Menu/SubMenu.js" failures="0" time="0.106">
    <testcase name="SubMenu Accessibility aria-haspopup is set to as menu" time="0.002" classname="aria-haspopup is set to as menu">
    </testcase>
    <testcase name="SubMenu Accessibility aria-expanded is set to correct value" time="0.051" classname="aria-expanded is set to correct value">
    </testcase>
    <testcase name="SubMenu Accessibility aria-owns and aria-labelledby are set correct" time="0.053" classname="aria-owns and aria-labelledby are set correct">
    </testcase>
  </testsuite>
  <testsuite name="ModalContainer" timestamp="2019-01-26T00:12:19" tests="7" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/ModalContainer/ModalContainer.js" failures="0" time="0.052000000000000005">
    <testcase name="ModalContainer should wrap contents in a modal and call PortalContainer" time="0.022" classname="should wrap contents in a modal and call PortalContainer">
    </testcase>
    <testcase name="ModalContainer should use &quot;static&quot; for backdrop by default" time="0.001" classname="should use &quot;static&quot; for backdrop by default">
    </testcase>
    <testcase name="ModalContainer should use true for backdrop if it hosts a node with backdropClickable: true" time="0.001" classname="should use true for backdrop if it hosts a node with backdropClickable: true">
    </testcase>
    <testcase name="ModalContainer should use false for backdrop if it hosts a node with fullscreenTakeover: true" time="0" classname="should use false for backdrop if it hosts a node with fullscreenTakeover: true">
    </testcase>
    <testcase name="ModalContainer should use false for backdrop if it hosts a node with fullscreenTakeover: true and backdropClickable: true" time="0" classname="should use false for backdrop if it hosts a node with fullscreenTakeover: true and backdropClickable: true">
    </testcase>
    <testcase name="ModalContainer should move focus to modal on show and restore focus to the last focused element on hide" time="0.01" classname="should move focus to modal on show and restore focus to the last focused element on hide">
    </testcase>
    <testcase name="ModalContainer should hide with Escape key" time="0.018" classname="should hide with Escape key">
    </testcase>
  </testsuite>
  <testsuite name="Accessibility" timestamp="1970-01-01T00:00:00" tests="2" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/ModalContainer/ModalContainer.js" failures="0" time="0.034">
    <testcase name="ModalContainer Accessibility should have role=&quot;dialog&quot; when child has no role" time="0.02" classname="should have role=&quot;dialog&quot; when child has no role">
    </testcase>
    <testcase name="ModalContainer Accessibility should have role=&quot;presentation&quot; when child has role=&quot;dialog&quot;" time="0.014" classname="should have role=&quot;presentation&quot; when child has role=&quot;dialog&quot;">
    </testcase>
  </testsuite>
  <testsuite name="ModalTrigger" timestamp="2019-01-26T00:12:19" tests="4" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/ModalTrigger/ModalTrigger.js" failures="0" time="0.016">
    <testcase name="ModalTrigger can pass advanced context to the child of mounted component" time="0.004" classname="can pass advanced context to the child of mounted component">
    </testcase>
    <testcase name="ModalTrigger should pass context" time="0.001" classname="should pass context">
    </testcase>
    <testcase name="ModalTrigger adds a wrapping div only when necessary" time="0.005" classname="adds a wrapping div only when necessary">
    </testcase>
    <testcase name="ModalTrigger calls chained onClick methods for ModalTrigger and trigger child" time="0.006" classname="calls chained onClick methods for ModalTrigger and trigger child">
    </testcase>
  </testsuite>
  <testsuite name="NumberInput" timestamp="2019-01-26T00:12:19" tests="15" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/NumberInput/NumberInput.js" failures="0" time="0.04700000000000001">
    <testcase name="NumberInput default" time="0.007" classname="default">
    </testcase>
    <testcase name="NumberInput supports defaultValue" time="0.003" classname="supports defaultValue">
    </testcase>
    <testcase name="NumberInput supports placeholder" time="0.001" classname="supports placeholder">
    </testcase>
    <testcase name="NumberInput supports decrementTitle" time="0.001" classname="supports decrementTitle">
    </testcase>
    <testcase name="NumberInput supports incrementTitle" time="0.002" classname="supports incrementTitle">
    </testcase>
    <testcase name="NumberInput supports readOnly" time="0.002" classname="supports readOnly">
    </testcase>
    <testcase name="NumberInput supports disabled" time="0.002" classname="supports disabled">
    </testcase>
    <testcase name="NumberInput supports overriding id" time="0.001" classname="supports overriding id">
    </testcase>
    <testcase name="NumberInput sets focused class when focused" time="0.003" classname="sets focused class when focused">
    </testcase>
    <testcase name="NumberInput supports additional classNames" time="0" classname="supports additional classNames">
    </testcase>
    <testcase name="NumberInput supports additional properties" time="0.001" classname="supports additional properties">
    </testcase>
    <testcase name="NumberInput clicking increment or decrement should focus input." time="0.003" classname="clicking increment or decrement should focus input.">
    </testcase>
    <testcase name="NumberInput preventDefault on mouse event for increment or decrement button" time="0.005" classname="preventDefault on mouse event for increment or decrement button">
    </testcase>
    <testcase name="NumberInput has textfield ref when mounted" time="0.008" classname="has textfield ref when mounted">
    </testcase>
    <testcase name="NumberInput allows events to pass through from props" time="0.008" classname="allows events to pass through from props">
    </testcase>
  </testsuite>
  <testsuite name="supports step" timestamp="1970-01-01T00:00:00" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/NumberInput/NumberInput.js" failures="0" time="0">
    <testcase name="NumberInput supports step adds prop to input" time="0" classname="adds prop to input">
    </testcase>
  </testsuite>
  <testsuite name="calls change with proper stepped value" timestamp="1970-01-01T00:00:00" tests="6" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/NumberInput/NumberInput.js" failures="0" time="0.035">
    <testcase name="NumberInput supports step calls change with proper stepped value when increment button is clicked" time="0.003" classname="when increment button is clicked">
    </testcase>
    <testcase name="NumberInput supports step calls change with proper stepped value when decrement button is clicked" time="0.003" classname="when decrement button is clicked">
    </testcase>
    <testcase name="NumberInput supports step calls change with proper stepped value supports step=&quot;any&quot;" time="0.008" classname="supports step=&quot;any&quot;">
    </testcase>
    <testcase name="NumberInput supports step calls change with proper stepped value when up or page up arrow keys are pressed" time="0.003" classname="when up or page up arrow keys are pressed">
    </testcase>
    <testcase name="NumberInput supports step calls change with proper stepped value when down or page down arrow keys are pressed" time="0.003" classname="when down or page down arrow keys are pressed">
    </testcase>
    <testcase name="NumberInput supports step calls change with proper stepped value when arrow key is pressed announce value change using live region" time="0.015" classname="when arrow key is pressed announce value change using live region">
    </testcase>
  </testsuite>
  <testsuite name="when mouse wheel is scrolled" timestamp="1970-01-01T00:00:01" tests="3" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/NumberInput/NumberInput.js" failures="0" time="0.008">
    <testcase name="NumberInput supports step calls change with proper stepped value when mouse wheel is scrolled up" time="0.003" classname="up">
    </testcase>
    <testcase name="NumberInput supports step calls change with proper stepped value when mouse wheel is scrolled down" time="0.002" classname="down">
    </testcase>
    <testcase name="NumberInput supports step calls change with proper stepped value when mouse wheel is scrolled unless input is not focused or readOnly or disabled" time="0.003" classname="unless input is not focused or readOnly or disabled">
    </testcase>
  </testsuite>
  <testsuite name="support max" timestamp="1970-01-01T00:00:01" tests="0" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/NumberInput/NumberInput.js" failures="0" time="0">
  </testsuite>
  <testsuite name="if value is greater than or equal" timestamp="1970-01-01T00:00:01" tests="3" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/NumberInput/NumberInput.js" failures="0" time="0.003">
    <testcase name="NumberInput support max if value is greater than or equal disables increment button" time="0.001" classname="disables increment button">
    </testcase>
    <testcase name="NumberInput support max if value is greater than or equal won&apos;t increment if up arrow pressed" time="0" classname="won&apos;t increment if up arrow pressed">
    </testcase>
    <testcase name="NumberInput support max if value is greater than or equal will allow changing value greater than max, but marks it invalid" time="0.002" classname="will allow changing value greater than max, but marks it invalid">
    </testcase>
  </testsuite>
  <testsuite name="will jump value to max if home key is pressed" timestamp="1970-01-01T00:00:01" tests="2" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/NumberInput/NumberInput.js" failures="0" time="0.007">
    <testcase name="NumberInput support max if value is greater than or equal will jump value to max if home key is pressed unless input is not focused or readOnly or disabled" time="0.004" classname="unless input is not focused or readOnly or disabled">
    </testcase>
    <testcase name="NumberInput support max if value is greater than or equal will jump value to max if home key is pressed and the input can accept input" time="0.003" classname="and the input can accept input">
    </testcase>
  </testsuite>
  <testsuite name="support min" timestamp="1970-01-01T00:00:01" tests="0" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/NumberInput/NumberInput.js" failures="0" time="0">
  </testsuite>
  <testsuite name="if value is less than or equal" timestamp="1970-01-01T00:00:01" tests="4" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/NumberInput/NumberInput.js" failures="0" time="0.006">
    <testcase name="NumberInput support min if value is less than or equal disables decrement button" time="0.002" classname="disables decrement button">
    </testcase>
    <testcase name="NumberInput support min if value is less than or equal won&apos;t decrement if down arrow pressed" time="0" classname="won&apos;t decrement if down arrow pressed">
    </testcase>
    <testcase name="NumberInput support min if value is less than or equal will allow setting value to less than min, but marks it invalid" time="0.002" classname="will allow setting value to less than min, but marks it invalid">
    </testcase>
    <testcase name="NumberInput support min if value is less than or equal will allow input change value to be less than min, but marks it invalid" time="0.002" classname="will allow input change value to be less than min, but marks it invalid">
    </testcase>
  </testsuite>
  <testsuite name="will jump value to max if end key is pressed" timestamp="1970-01-01T00:00:01" tests="2" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/NumberInput/NumberInput.js" failures="0" time="0.007">
    <testcase name="NumberInput support min if value is less than or equal will jump value to max if end key is pressed unless input is not focused or readOnly or disabled" time="0.004" classname="unless input is not focused or readOnly or disabled">
    </testcase>
    <testcase name="NumberInput support min if value is less than or equal will jump value to max if end key is pressed and the input can accept input" time="0.003" classname="and the input can accept input">
    </testcase>
  </testsuite>
  <testsuite name="input change" timestamp="1970-01-01T00:00:01" tests="4" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/NumberInput/NumberInput.js" failures="0" time="0.003">
    <testcase name="NumberInput input change will not allow non-numeric characters" time="0" classname="will not allow non-numeric characters">
    </testcase>
    <testcase name="NumberInput input change will allow a single negative sign even though it is not a number" time="0.001" classname="will allow a single negative sign even though it is not a number">
    </testcase>
    <testcase name="NumberInput input change will allow numeric values" time="0.001" classname="will allow numeric values">
    </testcase>
    <testcase name="NumberInput input change should set value to null when clearing the input" time="0.001" classname="should set value to null when clearing the input">
    </testcase>
  </testsuite>
  <testsuite name="on mobile, " timestamp="1970-01-01T00:00:01" tests="2" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/NumberInput/NumberInput.js" failures="0" time="0.019">
    <testcase name="NumberInput on mobile,  clicking increment or decrement should not focus input." time="0.003" classname="clicking increment or decrement should not focus input.">
    </testcase>
    <testcase name="NumberInput on mobile,  clicking increment or decrement should announce value change using live region." time="0.016" classname="clicking increment or decrement should announce value change using live region.">
    </testcase>
  </testsuite>
  <testsuite name="Overlay" timestamp="2019-01-26T00:12:19" tests="11" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/Overlay.js" failures="0" time="0.656">
    <testcase name="Overlay renders an overlay" time="0.001" classname="renders an overlay">
    </testcase>
    <testcase name="Overlay doesn&apos;t change render of an overlay if not showing" time="0" classname="doesn&apos;t change render of an overlay if not showing">
    </testcase>
    <testcase name="Overlay renders a portal with the container prop" time="0.001" classname="renders a portal with the container prop">
    </testcase>
    <testcase name="Overlay passes props to OpenTransition" time="0.001" classname="passes props to OpenTransition">
    </testcase>
    <testcase name="Overlay wraps in a close wrapper when true" time="0.001" classname="wraps in a close wrapper when true">
    </testcase>
    <testcase name="Overlay passes props to Position" time="0.001" classname="passes props to Position">
    </testcase>
    <testcase name="Overlay calls props onExcited with args" time="0.001" classname="calls props onExcited with args">
    </testcase>
    <testcase name="Overlay should not apply extra css to body" time="0.049" classname="should not apply extra css to body">
    </testcase>
    <testcase name="Overlay calls modalManager when rendering and unmounting" time="0.04" classname="calls modalManager when rendering and unmounting">
    </testcase>
    <testcase name="Overlay context overlay" time="0.053" classname="context overlay">
    </testcase>
    <testcase name="Overlay should only hide if it is the top-most overlay" time="0.508" classname="should only hide if it is the top-most overlay">
    </testcase>
  </testsuite>
  <testsuite name="OverlayTrigger" timestamp="2019-01-26T00:12:20" tests="5" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/Overlay.js" failures="0" time="0.655">
    <testcase name="OverlayTrigger should add aria-describedby to trigger when Overlay is a Tooltip" time="0.11" classname="should add aria-describedby to trigger when Overlay is a Tooltip">
    </testcase>
    <testcase name="OverlayTrigger should support delay" time="0.222" classname="should support delay">
    </testcase>
    <testcase name="OverlayTrigger should support delayShow" time="0.198" classname="should support delayShow">
    </testcase>
    <testcase name="OverlayTrigger should support delayHide" time="0.073" classname="should support delayHide">
    </testcase>
    <testcase name="OverlayTrigger disabled prop should hide overlay" time="0.052" classname="disabled prop should hide overlay">
    </testcase>
  </testsuite>
  <testsuite name="Position" timestamp="2019-01-26T00:12:20" tests="4" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/Position.js" failures="0" time="0.023">
    <testcase name="Position passes props to child" time="0.001" classname="passes props to child">
    </testcase>
    <testcase name="Position updates position on mount" time="0.009" classname="updates position on mount">
    </testcase>
    <testcase name="Position updates position on prop change" time="0.007" classname="updates position on prop change">
    </testcase>
    <testcase name="Position updates position on window resize" time="0.006" classname="updates position on window resize">
    </testcase>
  </testsuite>
  <testsuite name="calculatePosition" timestamp="2019-01-26T00:12:20" tests="0" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/calculatePosition.js" failures="0" time="0">
  </testsuite>
  <testsuite name="placement = left" timestamp="2019-01-26T00:12:20" tests="0" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/calculatePosition.js" failures="0" time="0">
  </testsuite>
  <testsuite name="no viewport offset" timestamp="2019-01-26T00:12:20" tests="2" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/calculatePosition.js" failures="0" time="0.182">
    <testcase name="calculatePosition placement = left no viewport offset Should calculate the correct position" time="0.096" classname="Should calculate the correct position">
    </testcase>
    <testcase name="calculatePosition placement = left no viewport offset Should calculate the correct position when provider does not start at top of screen" time="0.086" classname="Should calculate the correct position when provider does not start at top of screen">
    </testcase>
  </testsuite>
  <testsuite name="viewport offset before" timestamp="2019-01-26T00:12:20" tests="2" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/calculatePosition.js" failures="0" time="0.17099999999999999">
    <testcase name="calculatePosition placement = left viewport offset before Should calculate the correct position" time="0.087" classname="Should calculate the correct position">
    </testcase>
    <testcase name="calculatePosition placement = left viewport offset before Should calculate the correct position when provider does not start at top of screen" time="0.084" classname="Should calculate the correct position when provider does not start at top of screen">
    </testcase>
  </testsuite>
  <testsuite name="viewport offset after" timestamp="2019-01-26T00:12:21" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/calculatePosition.js" failures="0" time="0.091">
    <testcase name="calculatePosition placement = left viewport offset after Should calculate the correct position" time="0.091" classname="Should calculate the correct position">
    </testcase>
  </testsuite>
  <testsuite name="main axis offset" timestamp="2019-01-26T00:12:21" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/calculatePosition.js" failures="0" time="0.085">
    <testcase name="calculatePosition placement = left main axis offset Should calculate the correct position" time="0.085" classname="Should calculate the correct position">
    </testcase>
  </testsuite>
  <testsuite name="cross axis offset" timestamp="2019-01-26T00:12:21" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/calculatePosition.js" failures="0" time="0.09">
    <testcase name="calculatePosition placement = left cross axis offset Should calculate the correct position" time="0.09" classname="Should calculate the correct position">
    </testcase>
  </testsuite>
  <testsuite name="placement = left top" timestamp="2019-01-26T00:12:21" tests="0" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/calculatePosition.js" failures="0" time="0">
  </testsuite>
  <testsuite name="no viewport offset" timestamp="2019-01-26T00:12:21" tests="2" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/calculatePosition.js" failures="0" time="0.173">
    <testcase name="calculatePosition placement = left top no viewport offset Should calculate the correct position" time="0.085" classname="Should calculate the correct position">
    </testcase>
    <testcase name="calculatePosition placement = left top no viewport offset Should calculate the correct position when provider does not start at top of screen" time="0.088" classname="Should calculate the correct position when provider does not start at top of screen">
    </testcase>
  </testsuite>
  <testsuite name="viewport offset before" timestamp="2019-01-26T00:12:21" tests="2" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/calculatePosition.js" failures="0" time="0.174">
    <testcase name="calculatePosition placement = left top viewport offset before Should calculate the correct position" time="0.085" classname="Should calculate the correct position">
    </testcase>
    <testcase name="calculatePosition placement = left top viewport offset before Should calculate the correct position when provider does not start at top of screen" time="0.089" classname="Should calculate the correct position when provider does not start at top of screen">
    </testcase>
  </testsuite>
  <testsuite name="viewport offset after" timestamp="2019-01-26T00:12:21" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/calculatePosition.js" failures="0" time="0.086">
    <testcase name="calculatePosition placement = left top viewport offset after Should calculate the correct position" time="0.086" classname="Should calculate the correct position">
    </testcase>
  </testsuite>
  <testsuite name="main axis offset" timestamp="2019-01-26T00:12:21" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/calculatePosition.js" failures="0" time="0.088">
    <testcase name="calculatePosition placement = left top main axis offset Should calculate the correct position" time="0.088" classname="Should calculate the correct position">
    </testcase>
  </testsuite>
  <testsuite name="cross axis offset" timestamp="2019-01-26T00:12:21" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/calculatePosition.js" failures="0" time="0.085">
    <testcase name="calculatePosition placement = left top cross axis offset Should calculate the correct position" time="0.085" classname="Should calculate the correct position">
    </testcase>
  </testsuite>
  <testsuite name="placement = left bottom" timestamp="2019-01-26T00:12:21" tests="0" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/calculatePosition.js" failures="0" time="0">
  </testsuite>
  <testsuite name="no viewport offset" timestamp="2019-01-26T00:12:21" tests="2" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/calculatePosition.js" failures="0" time="0.174">
    <testcase name="calculatePosition placement = left bottom no viewport offset Should calculate the correct position" time="0.089" classname="Should calculate the correct position">
    </testcase>
    <testcase name="calculatePosition placement = left bottom no viewport offset Should calculate the correct position when provider does not start at top of screen" time="0.085" classname="Should calculate the correct position when provider does not start at top of screen">
    </testcase>
  </testsuite>
  <testsuite name="viewport offset before" timestamp="2019-01-26T00:12:22" tests="2" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/calculatePosition.js" failures="0" time="0.174">
    <testcase name="calculatePosition placement = left bottom viewport offset before Should calculate the correct position" time="0.089" classname="Should calculate the correct position">
    </testcase>
    <testcase name="calculatePosition placement = left bottom viewport offset before Should calculate the correct position when provider does not start at top of screen" time="0.085" classname="Should calculate the correct position when provider does not start at top of screen">
    </testcase>
  </testsuite>
  <testsuite name="viewport offset after" timestamp="2019-01-26T00:12:22" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/calculatePosition.js" failures="0" time="0.088">
    <testcase name="calculatePosition placement = left bottom viewport offset after Should calculate the correct position" time="0.088" classname="Should calculate the correct position">
    </testcase>
  </testsuite>
  <testsuite name="main axis offset" timestamp="2019-01-26T00:12:22" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/calculatePosition.js" failures="0" time="0.084">
    <testcase name="calculatePosition placement = left bottom main axis offset Should calculate the correct position" time="0.084" classname="Should calculate the correct position">
    </testcase>
  </testsuite>
  <testsuite name="cross axis offset" timestamp="2019-01-26T00:12:22" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/calculatePosition.js" failures="0" time="0.088">
    <testcase name="calculatePosition placement = left bottom cross axis offset Should calculate the correct position" time="0.088" classname="Should calculate the correct position">
    </testcase>
  </testsuite>
  <testsuite name="placement = top" timestamp="2019-01-26T00:12:22" tests="0" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/calculatePosition.js" failures="0" time="0">
  </testsuite>
  <testsuite name="no viewport offset" timestamp="2019-01-26T00:12:22" tests="2" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/calculatePosition.js" failures="0" time="0.215">
    <testcase name="calculatePosition placement = top no viewport offset Should calculate the correct position" time="0.125" classname="Should calculate the correct position">
    </testcase>
    <testcase name="calculatePosition placement = top no viewport offset Should calculate the correct position when provider does not start at top of screen" time="0.09" classname="Should calculate the correct position when provider does not start at top of screen">
    </testcase>
  </testsuite>
  <testsuite name="viewport offset before" timestamp="2019-01-26T00:12:22" tests="2" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/calculatePosition.js" failures="0" time="0.18">
    <testcase name="calculatePosition placement = top viewport offset before Should calculate the correct position" time="0.085" classname="Should calculate the correct position">
    </testcase>
    <testcase name="calculatePosition placement = top viewport offset before Should calculate the correct position when provider does not start at top of screen" time="0.095" classname="Should calculate the correct position when provider does not start at top of screen">
    </testcase>
  </testsuite>
  <testsuite name="viewport offset after" timestamp="2019-01-26T00:12:22" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/calculatePosition.js" failures="0" time="0.085">
    <testcase name="calculatePosition placement = top viewport offset after Should calculate the correct position" time="0.085" classname="Should calculate the correct position">
    </testcase>
  </testsuite>
  <testsuite name="main axis offset" timestamp="2019-01-26T00:12:23" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/calculatePosition.js" failures="0" time="0.087">
    <testcase name="calculatePosition placement = top main axis offset Should calculate the correct position" time="0.087" classname="Should calculate the correct position">
    </testcase>
  </testsuite>
  <testsuite name="cross axis offset" timestamp="2019-01-26T00:12:23" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/calculatePosition.js" failures="0" time="0.085">
    <testcase name="calculatePosition placement = top cross axis offset Should calculate the correct position" time="0.085" classname="Should calculate the correct position">
    </testcase>
  </testsuite>
  <testsuite name="placement = top left" timestamp="2019-01-26T00:12:23" tests="0" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/calculatePosition.js" failures="0" time="0">
  </testsuite>
  <testsuite name="no viewport offset" timestamp="2019-01-26T00:12:23" tests="2" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/calculatePosition.js" failures="0" time="0.174">
    <testcase name="calculatePosition placement = top left no viewport offset Should calculate the correct position" time="0.089" classname="Should calculate the correct position">
    </testcase>
    <testcase name="calculatePosition placement = top left no viewport offset Should calculate the correct position when provider does not start at top of screen" time="0.085" classname="Should calculate the correct position when provider does not start at top of screen">
    </testcase>
  </testsuite>
  <testsuite name="viewport offset before" timestamp="2019-01-26T00:12:23" tests="2" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/calculatePosition.js" failures="0" time="0.174">
    <testcase name="calculatePosition placement = top left viewport offset before Should calculate the correct position" time="0.089" classname="Should calculate the correct position">
    </testcase>
    <testcase name="calculatePosition placement = top left viewport offset before Should calculate the correct position when provider does not start at top of screen" time="0.085" classname="Should calculate the correct position when provider does not start at top of screen">
    </testcase>
  </testsuite>
  <testsuite name="viewport offset after" timestamp="2019-01-26T00:12:23" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/calculatePosition.js" failures="0" time="0.09">
    <testcase name="calculatePosition placement = top left viewport offset after Should calculate the correct position" time="0.09" classname="Should calculate the correct position">
    </testcase>
  </testsuite>
  <testsuite name="main axis offset" timestamp="2019-01-26T00:12:23" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/calculatePosition.js" failures="0" time="0.086">
    <testcase name="calculatePosition placement = top left main axis offset Should calculate the correct position" time="0.086" classname="Should calculate the correct position">
    </testcase>
  </testsuite>
  <testsuite name="cross axis offset" timestamp="2019-01-26T00:12:23" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/calculatePosition.js" failures="0" time="0.089">
    <testcase name="calculatePosition placement = top left cross axis offset Should calculate the correct position" time="0.089" classname="Should calculate the correct position">
    </testcase>
  </testsuite>
  <testsuite name="placement = top right" timestamp="2019-01-26T00:12:23" tests="0" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/calculatePosition.js" failures="0" time="0">
  </testsuite>
  <testsuite name="no viewport offset" timestamp="2019-01-26T00:12:23" tests="2" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/calculatePosition.js" failures="0" time="0.175">
    <testcase name="calculatePosition placement = top right no viewport offset Should calculate the correct position" time="0.086" classname="Should calculate the correct position">
    </testcase>
    <testcase name="calculatePosition placement = top right no viewport offset Should calculate the correct position when provider does not start at top of screen" time="0.089" classname="Should calculate the correct position when provider does not start at top of screen">
    </testcase>
  </testsuite>
  <testsuite name="viewport offset before" timestamp="2019-01-26T00:12:24" tests="2" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/calculatePosition.js" failures="0" time="0.174">
    <testcase name="calculatePosition placement = top right viewport offset before Should calculate the correct position" time="0.086" classname="Should calculate the correct position">
    </testcase>
    <testcase name="calculatePosition placement = top right viewport offset before Should calculate the correct position when provider does not start at top of screen" time="0.088" classname="Should calculate the correct position when provider does not start at top of screen">
    </testcase>
  </testsuite>
  <testsuite name="viewport offset after" timestamp="2019-01-26T00:12:24" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/calculatePosition.js" failures="0" time="0.086">
    <testcase name="calculatePosition placement = top right viewport offset after Should calculate the correct position" time="0.086" classname="Should calculate the correct position">
    </testcase>
  </testsuite>
  <testsuite name="main axis offset" timestamp="2019-01-26T00:12:24" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/calculatePosition.js" failures="0" time="0.092">
    <testcase name="calculatePosition placement = top right main axis offset Should calculate the correct position" time="0.092" classname="Should calculate the correct position">
    </testcase>
  </testsuite>
  <testsuite name="cross axis offset" timestamp="2019-01-26T00:12:24" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/calculatePosition.js" failures="0" time="0.087">
    <testcase name="calculatePosition placement = top right cross axis offset Should calculate the correct position" time="0.087" classname="Should calculate the correct position">
    </testcase>
  </testsuite>
  <testsuite name="placement = bottom" timestamp="2019-01-26T00:12:24" tests="0" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/calculatePosition.js" failures="0" time="0">
  </testsuite>
  <testsuite name="no viewport offset" timestamp="2019-01-26T00:12:24" tests="2" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/calculatePosition.js" failures="0" time="0.178">
    <testcase name="calculatePosition placement = bottom no viewport offset Should calculate the correct position" time="0.091" classname="Should calculate the correct position">
    </testcase>
    <testcase name="calculatePosition placement = bottom no viewport offset Should calculate the correct position when provider does not start at top of screen" time="0.087" classname="Should calculate the correct position when provider does not start at top of screen">
    </testcase>
  </testsuite>
  <testsuite name="viewport offset before" timestamp="2019-01-26T00:12:24" tests="2" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/calculatePosition.js" failures="0" time="0.177">
    <testcase name="calculatePosition placement = bottom viewport offset before Should calculate the correct position" time="0.091" classname="Should calculate the correct position">
    </testcase>
    <testcase name="calculatePosition placement = bottom viewport offset before Should calculate the correct position when provider does not start at top of screen" time="0.086" classname="Should calculate the correct position when provider does not start at top of screen">
    </testcase>
  </testsuite>
  <testsuite name="viewport offset after" timestamp="2019-01-26T00:12:24" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/calculatePosition.js" failures="0" time="0.088">
    <testcase name="calculatePosition placement = bottom viewport offset after Should calculate the correct position" time="0.088" classname="Should calculate the correct position">
    </testcase>
  </testsuite>
  <testsuite name="main axis offset" timestamp="2019-01-26T00:12:24" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/calculatePosition.js" failures="0" time="0.085">
    <testcase name="calculatePosition placement = bottom main axis offset Should calculate the correct position" time="0.085" classname="Should calculate the correct position">
    </testcase>
  </testsuite>
  <testsuite name="cross axis offset" timestamp="2019-01-26T00:12:24" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/calculatePosition.js" failures="0" time="0.089">
    <testcase name="calculatePosition placement = bottom cross axis offset Should calculate the correct position" time="0.089" classname="Should calculate the correct position">
    </testcase>
  </testsuite>
  <testsuite name="placement = bottom left" timestamp="2019-01-26T00:12:25" tests="0" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/calculatePosition.js" failures="0" time="0">
  </testsuite>
  <testsuite name="no viewport offset" timestamp="2019-01-26T00:12:25" tests="2" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/calculatePosition.js" failures="0" time="0.175">
    <testcase name="calculatePosition placement = bottom left no viewport offset Should calculate the correct position" time="0.087" classname="Should calculate the correct position">
    </testcase>
    <testcase name="calculatePosition placement = bottom left no viewport offset Should calculate the correct position when provider does not start at top of screen" time="0.088" classname="Should calculate the correct position when provider does not start at top of screen">
    </testcase>
  </testsuite>
  <testsuite name="viewport offset before" timestamp="2019-01-26T00:12:25" tests="2" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/calculatePosition.js" failures="0" time="0.174">
    <testcase name="calculatePosition placement = bottom left viewport offset before Should calculate the correct position" time="0.086" classname="Should calculate the correct position">
    </testcase>
    <testcase name="calculatePosition placement = bottom left viewport offset before Should calculate the correct position when provider does not start at top of screen" time="0.088" classname="Should calculate the correct position when provider does not start at top of screen">
    </testcase>
  </testsuite>
  <testsuite name="viewport offset after" timestamp="2019-01-26T00:12:25" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/calculatePosition.js" failures="0" time="0.086">
    <testcase name="calculatePosition placement = bottom left viewport offset after Should calculate the correct position" time="0.086" classname="Should calculate the correct position">
    </testcase>
  </testsuite>
  <testsuite name="main axis offset" timestamp="2019-01-26T00:12:25" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/calculatePosition.js" failures="0" time="0.088">
    <testcase name="calculatePosition placement = bottom left main axis offset Should calculate the correct position" time="0.088" classname="Should calculate the correct position">
    </testcase>
  </testsuite>
  <testsuite name="cross axis offset" timestamp="2019-01-26T00:12:25" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/calculatePosition.js" failures="0" time="0.086">
    <testcase name="calculatePosition placement = bottom left cross axis offset Should calculate the correct position" time="0.086" classname="Should calculate the correct position">
    </testcase>
  </testsuite>
  <testsuite name="placement = bottom right" timestamp="2019-01-26T00:12:25" tests="0" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/calculatePosition.js" failures="0" time="0">
  </testsuite>
  <testsuite name="no viewport offset" timestamp="2019-01-26T00:12:25" tests="2" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/calculatePosition.js" failures="0" time="0.173">
    <testcase name="calculatePosition placement = bottom right no viewport offset Should calculate the correct position" time="0.088" classname="Should calculate the correct position">
    </testcase>
    <testcase name="calculatePosition placement = bottom right no viewport offset Should calculate the correct position when provider does not start at top of screen" time="0.085" classname="Should calculate the correct position when provider does not start at top of screen">
    </testcase>
  </testsuite>
  <testsuite name="viewport offset before" timestamp="2019-01-26T00:12:25" tests="2" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/calculatePosition.js" failures="0" time="0.174">
    <testcase name="calculatePosition placement = bottom right viewport offset before Should calculate the correct position" time="0.088" classname="Should calculate the correct position">
    </testcase>
    <testcase name="calculatePosition placement = bottom right viewport offset before Should calculate the correct position when provider does not start at top of screen" time="0.086" classname="Should calculate the correct position when provider does not start at top of screen">
    </testcase>
  </testsuite>
  <testsuite name="viewport offset after" timestamp="2019-01-26T00:12:26" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/calculatePosition.js" failures="0" time="0.089">
    <testcase name="calculatePosition placement = bottom right viewport offset after Should calculate the correct position" time="0.089" classname="Should calculate the correct position">
    </testcase>
  </testsuite>
  <testsuite name="main axis offset" timestamp="2019-01-26T00:12:26" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/calculatePosition.js" failures="0" time="0.086">
    <testcase name="calculatePosition placement = bottom right main axis offset Should calculate the correct position" time="0.086" classname="Should calculate the correct position">
    </testcase>
  </testsuite>
  <testsuite name="cross axis offset" timestamp="2019-01-26T00:12:26" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/calculatePosition.js" failures="0" time="0.089">
    <testcase name="calculatePosition placement = bottom right cross axis offset Should calculate the correct position" time="0.089" classname="Should calculate the correct position">
    </testcase>
  </testsuite>
  <testsuite name="placement = right" timestamp="2019-01-26T00:12:26" tests="0" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/calculatePosition.js" failures="0" time="0">
  </testsuite>
  <testsuite name="no viewport offset" timestamp="2019-01-26T00:12:26" tests="2" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/calculatePosition.js" failures="0" time="0.174">
    <testcase name="calculatePosition placement = right no viewport offset Should calculate the correct position" time="0.086" classname="Should calculate the correct position">
    </testcase>
    <testcase name="calculatePosition placement = right no viewport offset Should calculate the correct position when provider does not start at top of screen" time="0.088" classname="Should calculate the correct position when provider does not start at top of screen">
    </testcase>
  </testsuite>
  <testsuite name="viewport offset before" timestamp="2019-01-26T00:12:26" tests="2" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/calculatePosition.js" failures="0" time="0.176">
    <testcase name="calculatePosition placement = right viewport offset before Should calculate the correct position" time="0.087" classname="Should calculate the correct position">
    </testcase>
    <testcase name="calculatePosition placement = right viewport offset before Should calculate the correct position when provider does not start at top of screen" time="0.089" classname="Should calculate the correct position when provider does not start at top of screen">
    </testcase>
  </testsuite>
  <testsuite name="viewport offset after" timestamp="2019-01-26T00:12:26" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/calculatePosition.js" failures="0" time="0.086">
    <testcase name="calculatePosition placement = right viewport offset after Should calculate the correct position" time="0.086" classname="Should calculate the correct position">
    </testcase>
  </testsuite>
  <testsuite name="main axis offset" timestamp="2019-01-26T00:12:26" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/calculatePosition.js" failures="0" time="0.089">
    <testcase name="calculatePosition placement = right main axis offset Should calculate the correct position" time="0.089" classname="Should calculate the correct position">
    </testcase>
  </testsuite>
  <testsuite name="cross axis offset" timestamp="2019-01-26T00:12:26" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/calculatePosition.js" failures="0" time="0.086">
    <testcase name="calculatePosition placement = right cross axis offset Should calculate the correct position" time="0.086" classname="Should calculate the correct position">
    </testcase>
  </testsuite>
  <testsuite name="placement = right top" timestamp="2019-01-26T00:12:26" tests="0" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/calculatePosition.js" failures="0" time="0">
  </testsuite>
  <testsuite name="no viewport offset" timestamp="2019-01-26T00:12:26" tests="2" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/calculatePosition.js" failures="0" time="0.174">
    <testcase name="calculatePosition placement = right top no viewport offset Should calculate the correct position" time="0.088" classname="Should calculate the correct position">
    </testcase>
    <testcase name="calculatePosition placement = right top no viewport offset Should calculate the correct position when provider does not start at top of screen" time="0.086" classname="Should calculate the correct position when provider does not start at top of screen">
    </testcase>
  </testsuite>
  <testsuite name="viewport offset before" timestamp="2019-01-26T00:12:27" tests="2" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/calculatePosition.js" failures="0" time="0.175">
    <testcase name="calculatePosition placement = right top viewport offset before Should calculate the correct position" time="0.089" classname="Should calculate the correct position">
    </testcase>
    <testcase name="calculatePosition placement = right top viewport offset before Should calculate the correct position when provider does not start at top of screen" time="0.086" classname="Should calculate the correct position when provider does not start at top of screen">
    </testcase>
  </testsuite>
  <testsuite name="viewport offset after" timestamp="2019-01-26T00:12:27" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/calculatePosition.js" failures="0" time="0.089">
    <testcase name="calculatePosition placement = right top viewport offset after Should calculate the correct position" time="0.089" classname="Should calculate the correct position">
    </testcase>
  </testsuite>
  <testsuite name="main axis offset" timestamp="2019-01-26T00:12:27" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/calculatePosition.js" failures="0" time="0.086">
    <testcase name="calculatePosition placement = right top main axis offset Should calculate the correct position" time="0.086" classname="Should calculate the correct position">
    </testcase>
  </testsuite>
  <testsuite name="cross axis offset" timestamp="2019-01-26T00:12:27" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/calculatePosition.js" failures="0" time="0.088">
    <testcase name="calculatePosition placement = right top cross axis offset Should calculate the correct position" time="0.088" classname="Should calculate the correct position">
    </testcase>
  </testsuite>
  <testsuite name="placement = right bottom" timestamp="2019-01-26T00:12:27" tests="0" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/calculatePosition.js" failures="0" time="0">
  </testsuite>
  <testsuite name="no viewport offset" timestamp="2019-01-26T00:12:27" tests="2" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/calculatePosition.js" failures="0" time="0.174">
    <testcase name="calculatePosition placement = right bottom no viewport offset Should calculate the correct position" time="0.086" classname="Should calculate the correct position">
    </testcase>
    <testcase name="calculatePosition placement = right bottom no viewport offset Should calculate the correct position when provider does not start at top of screen" time="0.088" classname="Should calculate the correct position when provider does not start at top of screen">
    </testcase>
  </testsuite>
  <testsuite name="viewport offset before" timestamp="2019-01-26T00:12:27" tests="2" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/calculatePosition.js" failures="0" time="0.174">
    <testcase name="calculatePosition placement = right bottom viewport offset before Should calculate the correct position" time="0.086" classname="Should calculate the correct position">
    </testcase>
    <testcase name="calculatePosition placement = right bottom viewport offset before Should calculate the correct position when provider does not start at top of screen" time="0.088" classname="Should calculate the correct position when provider does not start at top of screen">
    </testcase>
  </testsuite>
  <testsuite name="viewport offset after" timestamp="2019-01-26T00:12:27" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/calculatePosition.js" failures="0" time="0.085">
    <testcase name="calculatePosition placement = right bottom viewport offset after Should calculate the correct position" time="0.085" classname="Should calculate the correct position">
    </testcase>
  </testsuite>
  <testsuite name="main axis offset" timestamp="2019-01-26T00:12:27" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/calculatePosition.js" failures="0" time="0.088">
    <testcase name="calculatePosition placement = right bottom main axis offset Should calculate the correct position" time="0.088" classname="Should calculate the correct position">
    </testcase>
  </testsuite>
  <testsuite name="cross axis offset" timestamp="2019-01-26T00:12:28" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/calculatePosition.js" failures="0" time="0.085">
    <testcase name="calculatePosition placement = right bottom cross axis offset Should calculate the correct position" time="0.085" classname="Should calculate the correct position">
    </testcase>
  </testsuite>
  <testsuite name="flip from left to right" timestamp="2019-01-26T00:12:28" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/calculatePosition.js" failures="0" time="0.088">
    <testcase name="calculatePosition flip from left to right Should calculate the correct position" time="0.088" classname="Should calculate the correct position">
    </testcase>
  </testsuite>
  <testsuite name="overlay smaller than target aligns in center" timestamp="2019-01-26T00:12:28" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/calculatePosition.js" failures="0" time="0.086">
    <testcase name="calculatePosition overlay smaller than target aligns in center Should calculate the correct position" time="0.086" classname="Should calculate the correct position">
    </testcase>
  </testsuite>
  <testsuite name="overlay target has margin" timestamp="2019-01-26T00:12:28" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/OverlayTrigger/calculatePosition.js" failures="0" time="0.114">
    <testcase name="calculatePosition overlay target has margin checks if overlay positions correctly" time="0.114" classname="checks if overlay positions correctly">
    </testcase>
  </testsuite>
  <testsuite name="Pagination" timestamp="2019-01-26T00:12:28" tests="5" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Pagination/Pagination.js" failures="0" time="0.014000000000000002">
    <testcase name="Pagination has correct defaults" time="0.004" classname="has correct defaults">
    </testcase>
    <testcase name="Pagination supports button:cta" time="0.002" classname="supports button:cta">
    </testcase>
    <testcase name="Pagination supports button:secondary" time="0.001" classname="supports button:secondary">
    </testcase>
    <testcase name="Pagination supports explicit variant" time="0.006" classname="supports explicit variant">
    </testcase>
    <testcase name="Pagination supports additional properties" time="0.001" classname="supports additional properties">
    </testcase>
  </testsuite>
  <testsuite name="events" timestamp="2019-01-26T00:12:28" tests="5" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Pagination/Pagination.js" failures="0" time="0.019">
    <testcase name="Pagination events onPrevious triggers" time="0.003" classname="onPrevious triggers">
    </testcase>
    <testcase name="Pagination events onNext triggers" time="0.002" classname="onNext triggers">
    </testcase>
    <testcase name="Pagination events onChange triggers" time="0.006" classname="onChange triggers">
    </testcase>
    <testcase name="Pagination events onChange not triggered when empty input" time="0.004" classname="onChange not triggered when empty input">
    </testcase>
    <testcase name="Pagination events onChange triggered with same pagenumber when invalid value is input" time="0.004" classname="onChange triggered with same pagenumber when invalid value is input">
    </testcase>
  </testsuite>
  <testsuite name="returns correct page" timestamp="2019-01-26T00:12:28" tests="4" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Pagination/Pagination.js" failures="0" time="0.019">
    <testcase name="Pagination returns correct page on keyDown" time="0.006" classname="on keyDown">
    </testcase>
    <testcase name="Pagination returns correct page on keyUp" time="0.005" classname="on keyUp">
    </testcase>
    <testcase name="Pagination returns correct page on keyDown when on firstPage" time="0.004" classname="on keyDown when on firstPage">
    </testcase>
    <testcase name="Pagination returns correct page on keyUp when on lastPage" time="0.004" classname="on keyUp when on lastPage">
    </testcase>
  </testsuite>
  <testsuite name="uncontrolled behavior" timestamp="2019-01-26T00:12:28" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Pagination/Pagination.js" failures="0" time="0.006">
    <testcase name="Pagination uncontrolled behavior does change page number when previous/next is clicked" time="0.006" classname="does change page number when previous/next is clicked">
    </testcase>
  </testsuite>
  <testsuite name="controlled behavior" timestamp="2019-01-26T00:12:28" tests="5" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Pagination/Pagination.js" failures="0" time="0.026">
    <testcase name="Pagination controlled behavior onPrevious/onNext is triggered when previous/next is clicked" time="0.004" classname="onPrevious/onNext is triggered when previous/next is clicked">
    </testcase>
    <testcase name="Pagination controlled behavior does not change page number when previous/next is clicked" time="0.004" classname="does not change page number when previous/next is clicked">
    </testcase>
    <testcase name="Pagination controlled behavior does change page number when currentPage prop is changed" time="0.004" classname="does change page number when currentPage prop is changed">
    </testcase>
    <testcase name="Pagination controlled behavior has correct state when currentPage prop is updated" time="0.009" classname="has correct state when currentPage prop is updated">
    </testcase>
    <testcase name="Pagination controlled behavior always triggers with currentIndex prop irrespective of internal actions" time="0.005" classname="always triggers with currentIndex prop irrespective of internal actions">
    </testcase>
  </testsuite>
  <testsuite name="Popover" timestamp="2019-01-26T00:12:28" tests="4" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Popover/Popover.js" failures="0" time="0.023">
    <testcase name="Popover supports different variants" time="0.001" classname="supports different variants">
    </testcase>
    <testcase name="Popover supports onKeyDown event handler" time="0.001" classname="supports onKeyDown event handler">
    </testcase>
    <testcase name="Popover supports onFocus event handler" time="0.001" classname="supports onFocus event handler">
    </testcase>
    <testcase name="Popover supports trapFocus" time="0.02" classname="supports trapFocus">
    </testcase>
  </testsuite>
  <testsuite name="PortalContainer" timestamp="2019-01-26T00:12:28" tests="4" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/PortalContainer/PortalContainer.js" failures="0" time="0.003">
    <testcase name="PortalContainer should safe render if no context is supplied" time="0" classname="should safe render if no context is supplied">
    </testcase>
    <testcase name="PortalContainer should unsafe render if context is supplied" time="0.001" classname="should unsafe render if context is supplied">
    </testcase>
    <testcase name="PortalContainer should reuse existing render same key is provided" time="0.001" classname="should reuse existing render same key is provided">
    </testcase>
    <testcase name="PortalContainer should reuse existing render same key is provided for context as well" time="0.001" classname="should reuse existing render same key is provided for context as well">
    </testcase>
  </testsuite>
  <testsuite name="Progress" timestamp="2019-01-26T00:12:28" tests="4" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Progress/Progress.js" failures="0" time="0.005">
    <testcase name="Progress default" time="0.004" classname="default">
    </testcase>
    <testcase name="Progress supports multiple sizes" time="0.001" classname="supports multiple sizes">
    </testcase>
    <testcase name="Progress supports additional classNames" time="0" classname="supports additional classNames">
    </testcase>
    <testcase name="Progress supports additional properties" time="0" classname="supports additional properties">
    </testcase>
  </testsuite>
  <testsuite name="value" timestamp="2019-01-26T00:12:28" tests="2" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Progress/Progress.js" failures="0" time="0.006">
    <testcase name="Progress value updates all the fields" time="0.002" classname="updates all the fields">
    </testcase>
    <testcase name="Progress value clamps values to 0-100" time="0.004" classname="clamps values to 0-100">
    </testcase>
  </testsuite>
  <testsuite name="label" timestamp="2019-01-26T00:12:28" tests="4" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Progress/Progress.js" failures="0" time="0.008">
    <testcase name="Progress label supports showPercent" time="0.003" classname="supports showPercent">
    </testcase>
    <testcase name="Progress label supports labelPosition" time="0" classname="supports labelPosition">
    </testcase>
    <testcase name="Progress label supports custom labels" time="0.003" classname="supports custom labels">
    </testcase>
    <testcase name="Progress label supports aria-label and aria-labelledby" time="0.002" classname="supports aria-label and aria-labelledby">
    </testcase>
  </testsuite>
  <testsuite name="Provider" timestamp="2019-01-26T00:12:28" tests="5" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Provider/Provider.js" failures="0" time="0.005">
    <testcase name="Provider has correct defaults" time="0.002" classname="has correct defaults">
    </testcase>
    <testcase name="Provider supports additional classNames" time="0" classname="supports additional classNames">
    </testcase>
    <testcase name="Provider supports additional properties" time="0.002" classname="supports additional properties">
    </testcase>
    <testcase name="Provider supports other themes" time="0" classname="supports other themes">
    </testcase>
    <testcase name="Provider supports scaling" time="0.001" classname="supports scaling">
    </testcase>
  </testsuite>
  <testsuite name="Radio" timestamp="2019-01-26T00:12:28" tests="5" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Radio/Radio.js" failures="0" time="0.002">
    <testcase name="Radio has correct defaults" time="0" classname="has correct defaults">
    </testcase>
    <testcase name="Radio supports labelBelow layout" time="0" classname="supports labelBelow layout">
    </testcase>
    <testcase name="Radio supports quiet" time="0" classname="supports quiet">
    </testcase>
    <testcase name="Radio supports additional classNames" time="0.001" classname="supports additional classNames">
    </testcase>
    <testcase name="Radio supports additional properties" time="0.001" classname="supports additional properties">
    </testcase>
  </testsuite>
  <testsuite name="RadioGroup" timestamp="2019-01-26T00:12:28" tests="5" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/RadioGroup/RadioGroup.js" failures="0" time="0.005">
    <testcase name="RadioGroup has correct defaults" time="0.002" classname="has correct defaults">
    </testcase>
    <testcase name="RadioGroup supports vertical layout" time="0.001" classname="supports vertical layout">
    </testcase>
    <testcase name="RadioGroup supports labelsBelow layout" time="0.001" classname="supports labelsBelow layout">
    </testcase>
    <testcase name="RadioGroup supports additional classNames" time="0.001" classname="supports additional classNames">
    </testcase>
    <testcase name="RadioGroup supports additional properties" time="0" classname="supports additional properties">
    </testcase>
  </testsuite>
  <testsuite name="selectedValue" timestamp="2019-01-26T00:12:28" tests="5" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/RadioGroup/RadioGroup.js" failures="0" time="0.007">
    <testcase name="RadioGroup selectedValue makes the child checked" time="0.002" classname="makes the child checked">
    </testcase>
    <testcase name="RadioGroup selectedValue makes the child checked with defaultSelectedValue" time="0.001" classname="makes the child checked with defaultSelectedValue">
    </testcase>
    <testcase name="RadioGroup selectedValue automatically sets selectedValue if a child is selected" time="0.001" classname="automatically sets selectedValue if a child is selected">
    </testcase>
    <testcase name="RadioGroup selectedValue dispatches onChange which is caught and redispatched by RadioGroup" time="0.002" classname="dispatches onChange which is caught and redispatched by RadioGroup">
    </testcase>
    <testcase name="RadioGroup selectedValue throws if child doesn&apos;t have a value prop" time="0.001" classname="throws if child doesn&apos;t have a value prop">
    </testcase>
  </testsuite>
  <testsuite name="Rating" timestamp="2019-01-26T00:12:28" tests="14" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Rating/Rating.js" failures="0" time="0.127">
    <testcase name="Rating renders a top level div and passes through className" time="0.003" classname="renders a top level div and passes through className">
    </testcase>
    <testcase name="Rating assigns id to input" time="0.019" classname="assigns id to input">
    </testcase>
    <testcase name="Rating provides default currentRating and max" time="0.001" classname="provides default currentRating and max">
    </testcase>
    <testcase name="Rating renders a max number of ratings" time="0.004" classname="renders a max number of ratings">
    </testcase>
    <testcase name="Rating renders a current number of ratings" time="0.003" classname="renders a current number of ratings">
    </testcase>
    <testcase name="Rating sends back the number of stars selected in props.onChange" time="0.007" classname="sends back the number of stars selected in props.onChange">
    </testcase>
    <testcase name="Rating Provides the ability to disable setting the star functionality" time="0.003" classname="Provides the ability to disable setting the star functionality">
    </testcase>
    <testcase name="Rating provides a hook to change a rating" time="0.003" classname="provides a hook to change a rating">
    </testcase>
    <testcase name="Rating does not update state in controlled mode" time="0.008" classname="does not update state in controlled mode">
    </testcase>
    <testcase name="Rating does not highlight if disabled" time="0.004" classname="does not highlight if disabled">
    </testcase>
    <testcase name="Rating Provides the ability to set rating to 0" time="0.007" classname="Provides the ability to set rating to 0">
    </testcase>
    <testcase name="Rating Clicking on rating icon sets focus to input" time="0.025" classname="Clicking on rating icon sets focus to input">
    </testcase>
    <testcase name="Rating Permits changing value by adjusting value of input slider" time="0.028" classname="Permits changing value by adjusting value of input slider">
    </testcase>
    <testcase name="Rating Keydown on rating icon does nothing" time="0.012" classname="Keydown on rating icon does nothing">
    </testcase>
  </testsuite>
  <testsuite name="Rule" timestamp="2019-01-26T00:12:28" tests="5" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Rule/Rule.js" failures="0" time="0">
    <testcase name="Rule should render an hr element" time="0" classname="should render an hr element">
    </testcase>
    <testcase name="Rule should render medium size" time="0" classname="should render medium size">
    </testcase>
    <testcase name="Rule should render small size" time="0" classname="should render small size">
    </testcase>
    <testcase name="Rule should allow custom classes" time="0" classname="should allow custom classes">
    </testcase>
    <testcase name="Rule should allow custom DOM props" time="0" classname="should allow custom DOM props">
    </testcase>
  </testsuite>
  <testsuite name="Search" timestamp="2019-01-26T00:12:28" tests="10" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Search/Search.js" failures="0" time="0.019000000000000003">
    <testcase name="Search default" time="0.004" classname="default">
    </testcase>
    <testcase name="Search should support custom icons" time="0.002" classname="should support custom icons">
    </testcase>
    <testcase name="Search should support no icon" time="0.001" classname="should support no icon">
    </testcase>
    <testcase name="Search shows clear button if text exists" time="0.002" classname="shows clear button if text exists">
    </testcase>
    <testcase name="Search supports disabled" time="0.002" classname="supports disabled">
    </testcase>
    <testcase name="Search supports additional classNames" time="0.001" classname="supports additional classNames">
    </testcase>
    <testcase name="Search supports additional properties" time="0.001" classname="supports additional properties">
    </testcase>
    <testcase name="Search supports overiding role of wrapping div" time="0" classname="supports overiding role of wrapping div">
    </testcase>
    <testcase name="Search restores focus to input when clear button is clicked" time="0.002" classname="restores focus to input when clear button is clicked">
    </testcase>
    <testcase name="Search has searchbox ref" time="0.004" classname="has searchbox ref">
    </testcase>
  </testsuite>
  <testsuite name="onSubmit" timestamp="2019-01-26T00:12:28" tests="2" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Search/Search.js" failures="0" time="0.004">
    <testcase name="Search onSubmit is called when enter is pressed" time="0.002" classname="is called when enter is pressed">
    </testcase>
    <testcase name="Search onSubmit is not called when enter is pressed if it is disabled" time="0.002" classname="is not called when enter is pressed if it is disabled">
    </testcase>
  </testsuite>
  <testsuite name="onChange" timestamp="2019-01-26T00:12:28" tests="9" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Search/Search.js" failures="0" time="0.025999999999999995">
    <testcase name="Search onChange is called when escape is pressed" time="0.004" classname="is called when escape is pressed">
    </testcase>
    <testcase name="Search onChange does not change value when escape is pressed (controlled)" time="0.004" classname="does not change value when escape is pressed (controlled)">
    </testcase>
    <testcase name="Search onChange is called when the clear button is pressed" time="0.003" classname="is called when the clear button is pressed">
    </testcase>
    <testcase name="Search onChange does not change value when the clear button is pressed (controlled)" time="0.003" classname="does not change value when the clear button is pressed (controlled)">
    </testcase>
    <testcase name="Search onChange is not called when escape is pressed if it is disabled" time="0.003" classname="is not called when escape is pressed if it is disabled">
    </testcase>
    <testcase name="Search onChange is not called when escape is pressed if value is empty" time="0.001" classname="is not called when escape is pressed if value is empty">
    </testcase>
    <testcase name="Search onChange is not called when the clear button is pressed if it is disabled" time="0.002" classname="is not called when the clear button is pressed if it is disabled">
    </testcase>
    <testcase name="Search onChange is called when text is entered" time="0.003" classname="is called when text is entered">
    </testcase>
    <testcase name="Search onChange does not change value when text is entered (controlled)" time="0.003" classname="does not change value when text is entered (controlled)">
    </testcase>
  </testsuite>
  <testsuite name="Search Within" timestamp="2019-01-26T00:12:28" tests="4" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/SearchWithin/SearchWithin.js" failures="0" time="0.01">
    <testcase name="Search Within default" time="0.004" classname="default">
    </testcase>
    <testcase name="Search Within supports labelling using aria-label" time="0.002" classname="supports labelling using aria-label">
    </testcase>
    <testcase name="Search Within supports labelling using aria-labelledby alone" time="0.002" classname="supports labelling using aria-labelledby alone">
    </testcase>
    <testcase name="Search Within supports labelling using both aria-labelledby and aria-label" time="0.002" classname="supports labelling using both aria-labelledby and aria-label">
    </testcase>
  </testsuite>
  <testsuite name="Select" timestamp="2019-01-26T00:12:28" tests="24" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Select/Select.js" failures="0" time="0.276">
    <testcase name="Select renders a dropdown" time="0.001" classname="renders a dropdown">
    </testcase>
    <testcase name="Select supports additional classNames" time="0" classname="supports additional classNames">
    </testcase>
    <testcase name="Select exposes menuClassName" time="0.001" classname="exposes menuClassName">
    </testcase>
    <testcase name="Select supports flip prop" time="0.001" classname="supports flip prop">
    </testcase>
    <testcase name="Select renders options" time="0.002" classname="renders options">
    </testcase>
    <testcase name="Select renders options with multiple select" time="0.002" classname="renders options with multiple select">
    </testcase>
    <testcase name="Select should set an initial value" time="0.002" classname="should set an initial value">
    </testcase>
    <testcase name="Select should set an initial value with multiple select" time="0.002" classname="should set an initial value with multiple select">
    </testcase>
    <testcase name="Select should set a default value" time="0.002" classname="should set a default value">
    </testcase>
    <testcase name="Select should update value if passed in" time="0.003" classname="should update value if passed in">
    </testcase>
    <testcase name="Select should handle selection" time="0.002" classname="should handle selection">
    </testcase>
    <testcase name="Select should not close menu if closeOnSelect is set to false" time="0.002" classname="should not close menu if closeOnSelect is set to false">
    </testcase>
    <testcase name="Select should not close menu if multiple selection is enabled" time="0.001" classname="should not close menu if multiple selection is enabled">
    </testcase>
    <testcase name="Select Labelling of the Select with parent FieldLabel is handled correctly" time="0.016" classname="Labelling of the Select with parent FieldLabel is handled correctly">
    </testcase>
    <testcase name="Select Labelling of the Select with aria-labelledby is handled correctly" time="0.005" classname="Labelling of the Select with aria-labelledby is handled correctly">
    </testcase>
    <testcase name="Select Labelling of the Select with aria-label is handled correctly" time="0.006" classname="Labelling of the Select with aria-label is handled correctly">
    </testcase>
    <testcase name="Select should pass aria-* properties and id to the button" time="0.005" classname="should pass aria-* properties and id to the button">
    </testcase>
    <testcase name="Select shound pass non-aria DOM properties to the dropdown" time="0.06" classname="shound pass non-aria DOM properties to the dropdown">
    </testcase>
    <testcase name="Select should not update state if value prop is passed" time="0.001" classname="should not update state if value prop is passed">
    </testcase>
    <testcase name="Select should trigger the menu on key press" time="0.002" classname="should trigger the menu on key press">
    </testcase>
    <testcase name="Select supports caching of width when componentDidUpdate is called" time="0.059" classname="supports caching of width when componentDidUpdate is called">
    </testcase>
    <testcase name="Select should not have a minimum width if noMinWidth prop is passed" time="0.001" classname="should not have a minimum width if noMinWidth prop is passed">
    </testcase>
    <testcase name="Select onClose restores focus to button and calls onClose method if defined" time="0.098" classname="onClose restores focus to button and calls onClose method if defined">
    </testcase>
    <testcase name="Select supports icons in items" time="0.002" classname="supports icons in items">
    </testcase>
  </testsuite>
  <testsuite name="SelectList" timestamp="2019-01-26T00:12:29" tests="12" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/SelectList/SelectList.js" failures="0" time="0.02500000000000001">
    <testcase name="SelectList supports additional classNames" time="0.001" classname="supports additional classNames">
    </testcase>
    <testcase name="SelectList supports a list of options" time="0.001" classname="supports a list of options">
    </testcase>
    <testcase name="SelectList supports an item being selected" time="0.001" classname="supports an item being selected">
    </testcase>
    <testcase name="SelectList supports an item being selected" time="0" classname="supports an item being selected">
    </testcase>
    <testcase name="SelectList supports multiple items being selected" time="0.001" classname="supports multiple items being selected">
    </testcase>
    <testcase name="SelectList aria-selected is set correctly when multiple items are selected" time="0.014" classname="aria-selected is set correctly when multiple items are selected">
    </testcase>
    <testcase name="SelectList supports all items being disabled" time="0.001" classname="supports all items being disabled">
    </testcase>
    <testcase name="SelectList supports an item being disabled" time="0.001" classname="supports an item being disabled">
    </testcase>
    <testcase name="SelectList supports selection being returned on selection change for single select" time="0.001" classname="supports selection being returned on selection change for single select">
    </testcase>
    <testcase name="SelectList supports selection being returned on selection add for multiple select" time="0.002" classname="supports selection being returned on selection add for multiple select">
    </testcase>
    <testcase name="SelectList supports selection being returned on selection remove for multiple select" time="0.001" classname="supports selection being returned on selection remove for multiple select">
    </testcase>
    <testcase name="SelectList supports additional properties" time="0.001" classname="supports additional properties">
    </testcase>
  </testsuite>
  <testsuite name="ShellHelp" timestamp="2019-01-26T00:12:29" tests="0" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Shell/ShellHelp.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Displays search results" timestamp="2019-01-26T00:12:29" tests="2" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Shell/ShellHelp.js" failures="0" time="0.001">
    <testcase name="ShellHelp Displays search results displays a link to click" time="0.001" classname="displays a link to click">
    </testcase>
    <testcase name="ShellHelp Displays search results supports onResultClick" time="0" classname="supports onResultClick">
    </testcase>
  </testsuite>
  <testsuite name="ShellOrgSwitcher" timestamp="2019-01-26T00:12:29" tests="0" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Shell/ShellOrgSwitcher.js" failures="0" time="0">
  </testsuite>
  <testsuite name="toggles between &quot;no organizations found&quot; and SelectList" timestamp="2019-01-26T00:12:29" tests="2" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Shell/ShellOrgSwitcher.js" failures="0" time="0.007">
    <testcase name="ShellOrgSwitcher toggles between &quot;no organizations found&quot; and SelectList displays &quot;no organizations found&quot; if searchTerm doesn&apos;t match any options" time="0.004" classname="displays &quot;no organizations found&quot; if searchTerm doesn&apos;t match any options">
    </testcase>
    <testcase name="ShellOrgSwitcher toggles between &quot;no organizations found&quot; and SelectList displays SelectList if searchTerm matches options" time="0.003" classname="displays SelectList if searchTerm matches options">
    </testcase>
  </testsuite>
  <testsuite name="value displayed in Button" timestamp="2019-01-26T00:12:29" tests="3" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Shell/ShellOrgSwitcher.js" failures="0" time="0.002">
    <testcase name="ShellOrgSwitcher value displayed in Button displays the label for the selected value" time="0.001" classname="displays the label for the selected value">
    </testcase>
    <testcase name="ShellOrgSwitcher value displayed in Button displays the value if the option doesn&apos;t exist" time="0" classname="displays the value if the option doesn&apos;t exist">
    </testcase>
    <testcase name="ShellOrgSwitcher value displayed in Button displays empty string is value isn&apos;t set" time="0.001" classname="displays empty string is value isn&apos;t set">
    </testcase>
  </testsuite>
  <testsuite name="SideNav" timestamp="2019-01-26T00:12:29" tests="8" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/SideNav/SideNav.js" failures="0" time="0.021">
    <testcase name="SideNav renders a nav &amp; ul with correct className" time="0.004" classname="renders a nav &amp; ul with correct className">
    </testcase>
    <testcase name="SideNav supports className as prop" time="0.002" classname="supports className as prop">
    </testcase>
    <testcase name="SideNav multiLevel variant is supported" time="0.004" classname="multiLevel variant is supported">
    </testcase>
    <testcase name="SideNav correct focusmanager selectors are set" time="0.002" classname="correct focusmanager selectors are set">
    </testcase>
    <testcase name="SideNav onSelect is triggered when clicked on any item" time="0.002" classname="onSelect is triggered when clicked on any item">
    </testcase>
    <testcase name="SideNav supports defaultValue" time="0.001" classname="supports defaultValue">
    </testcase>
    <testcase name="SideNav supports value" time="0.001" classname="supports value">
    </testcase>
    <testcase name="SideNav supports nested nav value" time="0.005" classname="supports nested nav value">
    </testcase>
  </testsuite>
  <testsuite name="SideNavHeading" timestamp="2019-01-26T00:12:29" tests="5" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/SideNav/SideNavHeading.js" failures="0" time="0.009000000000000001">
    <testcase name="SideNavHeading renders an li with correct className" time="0.004" classname="renders an li with correct className">
    </testcase>
    <testcase name="SideNavHeading supports className as prop" time="0.001" classname="supports className as prop">
    </testcase>
    <testcase name="SideNavHeading supports extra props" time="0.001" classname="supports extra props">
    </testcase>
    <testcase name="SideNavHeading label is shown correctly via label prop" time="0.001" classname="label is shown correctly via label prop">
    </testcase>
    <testcase name="SideNavHeading renders a nested sidenav" time="0.002" classname="renders a nested sidenav">
    </testcase>
  </testsuite>
  <testsuite name="SideNavItem" timestamp="2019-01-26T00:12:29" tests="10" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/SideNav/SideNavItem.js" failures="0" time="0.016000000000000004">
    <testcase name="SideNavItem renders a li with correct className" time="0.002" classname="renders a li with correct className">
    </testcase>
    <testcase name="SideNavItem supports className as prop" time="0.001" classname="supports className as prop">
    </testcase>
    <testcase name="SideNavItem supports extra props" time="0.001" classname="supports extra props">
    </testcase>
    <testcase name="SideNavItem supports updating props" time="0.001" classname="supports updating props">
    </testcase>
    <testcase name="SideNavItem supports disabled prop" time="0.002" classname="supports disabled prop">
    </testcase>
    <testcase name="SideNavItem label is shown correctly via label prop" time="0.002" classname="label is shown correctly via label prop">
    </testcase>
    <testcase name="SideNavItem label is shown correctly when passed as children" time="0.001" classname="label is shown correctly when passed as children">
    </testcase>
    <testcase name="SideNavItem renders correct class in case of an header item" time="0.002" classname="renders correct class in case of an header item">
    </testcase>
    <testcase name="SideNavItem onSelect is called when clicked on any item" time="0.003" classname="onSelect is called when clicked on any item">
    </testcase>
    <testcase name="SideNavItem renders a nested sidenav" time="0.001" classname="renders a nested sidenav">
    </testcase>
  </testsuite>
  <testsuite name="Accessibility" timestamp="2019-01-26T00:12:29" tests="0" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/SideNav/SideNavItem.js" failures="0" time="0">
  </testsuite>
  <testsuite name="ArrowRight" timestamp="2019-01-26T00:12:29" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/SideNav/SideNavItem.js" failures="0" time="0.012">
    <testcase name="SideNavItem Accessibility ArrowRight expands collapsed item" time="0.012" classname="expands collapsed item">
    </testcase>
  </testsuite>
  <testsuite name="ArrowLeft" timestamp="2019-01-26T00:12:29" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/SideNav/SideNavItem.js" failures="0" time="0.011">
    <testcase name="SideNavItem Accessibility ArrowLeft closes expanded item" time="0.011" classname="closes expanded item">
    </testcase>
  </testsuite>
  <testsuite name="Enter/Space" timestamp="2019-01-26T00:12:29" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/SideNav/SideNavItem.js" failures="0" time="0.007">
    <testcase name="SideNavItem Accessibility Enter/Space should click focused item" time="0.007" classname="should click focused item">
    </testcase>
  </testsuite>
  <testsuite name="onFocus" timestamp="2019-01-26T00:12:29" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/SideNav/SideNavItem.js" failures="0" time="0.005">
    <testcase name="SideNavItem Accessibility onFocus sets focused state to true" time="0.005" classname="sets focused state to true">
    </testcase>
  </testsuite>
  <testsuite name="onBlur" timestamp="2019-01-26T00:12:29" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/SideNav/SideNavItem.js" failures="0" time="0.008">
    <testcase name="SideNavItem Accessibility onBlur sets focused state to false" time="0.008" classname="sets focused state to false">
    </testcase>
  </testsuite>
  <testsuite name="onSelect" timestamp="2019-01-26T00:12:29" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/SideNav/SideNavItem.js" failures="0" time="0.01">
    <testcase name="SideNavItem Accessibility onSelect calls onSelect when a nested nav item is selected" time="0.01" classname="calls onSelect when a nested nav item is selected">
    </testcase>
  </testsuite>
  <testsuite name="Slider" timestamp="2019-01-26T00:12:29" tests="26" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Slider/Slider.js" failures="0" time="0.20900000000000002">
    <testcase name="Slider should render a basic slider" time="0.017" classname="should render a basic slider">
    </testcase>
    <testcase name="Slider should support setting a default value" time="0.004" classname="should support setting a default value">
    </testcase>
    <testcase name="Slider should support setting a min and max value" time="0.005" classname="should support setting a min and max value">
    </testcase>
    <testcase name="Slider should support vertical orientation" time="0.004" classname="should support vertical orientation">
    </testcase>
    <testcase name="Slider should support drag and drop to set the slider value" time="0.004" classname="should support drag and drop to set the slider value">
    </testcase>
    <testcase name="Slider should support clicking on the track to set the value" time="0.005" classname="should support clicking on the track to set the value">
    </testcase>
    <testcase name="Slider should support drag and drop to set the slider value with step" time="0.003" classname="should support drag and drop to set the slider value with step">
    </testcase>
    <testcase name="Slider should support drag and drop to set the slider value in vertical orientation" time="0.002" classname="should support drag and drop to set the slider value in vertical orientation">
    </testcase>
    <testcase name="Slider should not set state if value is controlled" time="0.003" classname="should not set state if value is controlled">
    </testcase>
    <testcase name="Slider should stop dragging on mouse up" time="0.025" classname="should stop dragging on mouse up">
    </testcase>
    <testcase name="Slider should support range slider" time="0.01" classname="should support range slider">
    </testcase>
    <testcase name="Slider should render a range slider with startValue and endValue" time="0.008" classname="should render a range slider with startValue and endValue">
    </testcase>
    <testcase name="Slider should not allow crossing of sliders for range slider" time="0.009" classname="should not allow crossing of sliders for range slider">
    </testcase>
    <testcase name="Slider should not set state if values are controlled in range slider" time="0.008" classname="should not set state if values are controlled in range slider">
    </testcase>
    <testcase name="Slider should set state if values are uncontrolled in range slider" time="0.009" classname="should set state if values are uncontrolled in range slider">
    </testcase>
    <testcase name="Slider should support disabled" time="0.01" classname="should support disabled">
    </testcase>
    <testcase name="Slider should support focus/blur states" time="0.006" classname="should support focus/blur states">
    </testcase>
    <testcase name="Slider should support changing value via input element using keyboard or assitive technology" time="0.011" classname="should support changing value via input element using keyboard or assitive technology">
    </testcase>
    <testcase name="Slider should support filled variant" time="0.001" classname="should support filled variant">
    </testcase>
    <testcase name="Slider should support ramp variant" time="0.001" classname="should support ramp variant">
    </testcase>
    <testcase name="Slider should support adding label, hidden by default, but still accessible" time="0.007" classname="should support adding label, hidden by default, but still accessible">
    </testcase>
    <testcase name="Slider should support adding label and aria-labelledby, hidden by default, but still accessible" time="0.008" classname="should support adding label and aria-labelledby, hidden by default, but still accessible">
    </testcase>
    <testcase name="Slider should support adding label and aria-labelledby with renderLabel" time="0.016" classname="should support adding label and aria-labelledby with renderLabel">
    </testcase>
    <testcase name="Slider should submit values when stopped dragging" time="0.017" classname="should submit values when stopped dragging">
    </testcase>
    <testcase name="Slider should set focus to input on mousedown" time="0.007" classname="should set focus to input on mousedown">
    </testcase>
    <testcase name="Slider should set focus to input on mouseup" time="0.009" classname="should set focus to input on mouseup">
    </testcase>
  </testsuite>
  <testsuite name="Range slider" timestamp="2019-01-26T00:12:29" tests="5" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Slider/Slider.js" failures="0" time="0.074">
    <testcase name="Slider Range slider should support clicking on the track to set the value of closest handle" time="0.016" classname="should support clicking on the track to set the value of closest handle">
    </testcase>
    <testcase name="Slider Range slider should support changing value via input element using keyboard or assitive technology" time="0.013" classname="should support changing value via input element using keyboard or assitive technology">
    </testcase>
    <testcase name="Slider Range slider should support setting a min and max value" time="0.012" classname="should support setting a min and max value">
    </testcase>
    <testcase name="Slider Range slider should support clicking on value label to focus appropriate slider input" time="0.022" classname="should support clicking on value label to focus appropriate slider input">
    </testcase>
    <testcase name="Slider Range slider should support aria-label on min and max inputs" time="0.011" classname="should support aria-label on min and max inputs">
    </testcase>
  </testsuite>
  <testsuite name="SplitButton" timestamp="2019-01-26T00:12:29" tests="5" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/SplitButton/SplitButton.js" failures="0" time="0.34500000000000003">
    <testcase name="SplitButton renders a default" time="0.049" classname="renders a default">
    </testcase>
    <testcase name="SplitButton has appropriate WAI-ARIA props to label group and buttons" time="0.047" classname="has appropriate WAI-ARIA props to label group and buttons">
    </testcase>
    <testcase name="SplitButton action button triggers click event" time="0.049" classname="action button triggers click event">
    </testcase>
    <testcase name="SplitButton toggles menu when trigger button is clicked" time="0.079" classname="toggles menu when trigger button is clicked">
    </testcase>
    <testcase name="SplitButton keydown event with &apos;ArrowDown&apos; or &apos;down&apos; expands menu" time="0.121" classname="keydown event with &apos;ArrowDown&apos; or &apos;down&apos; expands menu">
    </testcase>
  </testsuite>
  <testsuite name="SplitView" timestamp="2019-01-26T00:12:29" tests="5" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/SplitView/SplitView.js" failures="0" time="0.029000000000000005">
    <testcase name="SplitView should render a basic split view" time="0.017" classname="should render a basic split view">
    </testcase>
    <testcase name="SplitView should render a non-resizable split view" time="0.005" classname="should render a non-resizable split view">
    </testcase>
    <testcase name="SplitView should render a split view with a primary pane on the right" time="0.004" classname="should render a split view with a primary pane on the right">
    </testcase>
    <testcase name="SplitView should render a vertical split view" time="0.002" classname="should render a vertical split view">
    </testcase>
    <testcase name="SplitView should set the default size from primaryDefault" time="0.001" classname="should set the default size from primaryDefault">
    </testcase>
  </testsuite>
  <testsuite name="horizontal cursors" timestamp="2019-01-26T00:12:29" tests="6" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/SplitView/SplitView.js" failures="0" time="0.07299999999999998">
    <testcase name="SplitView horizontal cursors should set the cursor to e-resize when hovering over the splitter at the minimum" time="0.014" classname="should set the cursor to e-resize when hovering over the splitter at the minimum">
    </testcase>
    <testcase name="SplitView horizontal cursors should set the cursor to ew-resize when hovering over the splitter in the middle" time="0.013" classname="should set the cursor to ew-resize when hovering over the splitter in the middle">
    </testcase>
    <testcase name="SplitView horizontal cursors should set the cursor to w-resize when hovering over the splitter at the maximum" time="0.016" classname="should set the cursor to w-resize when hovering over the splitter at the maximum">
    </testcase>
    <testcase name="SplitView horizontal cursors should set the cursor to w-resize when hovering over the splitter at the minimum with primaryPane = 1" time="0.012" classname="should set the cursor to w-resize when hovering over the splitter at the minimum with primaryPane = 1">
    </testcase>
    <testcase name="SplitView horizontal cursors should set the cursor to ew-resize when hovering over the splitter in the middle with primaryPane = 1" time="0.009" classname="should set the cursor to ew-resize when hovering over the splitter in the middle with primaryPane = 1">
    </testcase>
    <testcase name="SplitView horizontal cursors should set the cursor to e-resize when hovering over the splitter at the maximum with primaryPane = 1" time="0.009" classname="should set the cursor to e-resize when hovering over the splitter at the maximum with primaryPane = 1">
    </testcase>
  </testsuite>
  <testsuite name="vertical cursors" timestamp="2019-01-26T00:12:29" tests="6" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/SplitView/SplitView.js" failures="0" time="0.059">
    <testcase name="SplitView vertical cursors should set the cursor to s-resize when hovering over the splitter at the minimum" time="0.009" classname="should set the cursor to s-resize when hovering over the splitter at the minimum">
    </testcase>
    <testcase name="SplitView vertical cursors should set the cursor to ns-resize when hovering over the splitter in the middle" time="0.009" classname="should set the cursor to ns-resize when hovering over the splitter in the middle">
    </testcase>
    <testcase name="SplitView vertical cursors should set the cursor to n-resize when hovering over the splitter at the maximum" time="0.01" classname="should set the cursor to n-resize when hovering over the splitter at the maximum">
    </testcase>
    <testcase name="SplitView vertical cursors should set the cursor to n-resize when hovering over the splitter at the minimum with primaryPane = 1" time="0.01" classname="should set the cursor to n-resize when hovering over the splitter at the minimum with primaryPane = 1">
    </testcase>
    <testcase name="SplitView vertical cursors should set the cursor to ns-resize when hovering over the splitter in the middle with primaryPane = 1" time="0.01" classname="should set the cursor to ns-resize when hovering over the splitter in the middle with primaryPane = 1">
    </testcase>
    <testcase name="SplitView vertical cursors should set the cursor to s-resize when hovering over the splitter at the maximum with primaryPane = 1" time="0.011" classname="should set the cursor to s-resize when hovering over the splitter at the maximum with primaryPane = 1">
    </testcase>
  </testsuite>
  <testsuite name="horizontal dragging" timestamp="2019-01-26T00:12:30" tests="5" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/SplitView/SplitView.js" failures="0" time="0.156">
    <testcase name="SplitView horizontal dragging should support dragging the splitter" time="0.033" classname="should support dragging the splitter">
    </testcase>
    <testcase name="SplitView horizontal dragging should stop dragging at the minimum" time="0.015" classname="should stop dragging at the minimum">
    </testcase>
    <testcase name="SplitView horizontal dragging should stop dragging at the maximum" time="0.015" classname="should stop dragging at the maximum">
    </testcase>
    <testcase name="SplitView horizontal dragging should stop snap to zero when collapsible" time="0.051" classname="should stop snap to zero when collapsible">
    </testcase>
    <testcase name="SplitView horizontal dragging should stop snap to zero when collapsible with primaryPane = 1" time="0.042" classname="should stop snap to zero when collapsible with primaryPane = 1">
    </testcase>
  </testsuite>
  <testsuite name="vertical dragging" timestamp="2019-01-26T00:12:30" tests="5" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/SplitView/SplitView.js" failures="0" time="0.11499999999999999">
    <testcase name="SplitView vertical dragging should support dragging the splitter" time="0.014" classname="should support dragging the splitter">
    </testcase>
    <testcase name="SplitView vertical dragging should stop dragging at the minimum" time="0.015" classname="should stop dragging at the minimum">
    </testcase>
    <testcase name="SplitView vertical dragging should stop dragging at the maximum" time="0.015" classname="should stop dragging at the maximum">
    </testcase>
    <testcase name="SplitView vertical dragging should stop snap to zero when collapsible" time="0.032" classname="should stop snap to zero when collapsible">
    </testcase>
    <testcase name="SplitView vertical dragging should stop snap to zero when collapsible with primaryPane = 1" time="0.039" classname="should stop snap to zero when collapsible with primaryPane = 1">
    </testcase>
  </testsuite>
  <testsuite name="keyboard interactions" timestamp="2019-01-26T00:12:30" tests="0" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/SplitView/SplitView.js" failures="0" time="0">
  </testsuite>
  <testsuite name="ArrowLeft" timestamp="2019-01-26T00:12:30" tests="4" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/SplitView/SplitView.js" failures="0" time="0.031">
    <testcase name="SplitView keyboard interactions ArrowLeft should move the splitter to the left when pressing the left arrow key" time="0.009" classname="should move the splitter to the left when pressing the left arrow key">
    </testcase>
    <testcase name="SplitView keyboard interactions ArrowLeft should move the splitter to the left when pressing the left arrow key with primaryPane = 1" time="0.008" classname="should move the splitter to the left when pressing the left arrow key with primaryPane = 1">
    </testcase>
    <testcase name="SplitView keyboard interactions ArrowLeft should not move to the left beyond the minimum" time="0.007" classname="should not move to the left beyond the minimum">
    </testcase>
    <testcase name="SplitView keyboard interactions ArrowLeft should not move to the left when orientation is vertical" time="0.007" classname="should not move to the left when orientation is vertical">
    </testcase>
  </testsuite>
  <testsuite name="ArrowRight" timestamp="2019-01-26T00:12:30" tests="3" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/SplitView/SplitView.js" failures="0" time="0.026000000000000002">
    <testcase name="SplitView keyboard interactions ArrowRight should move the splitter to the right when pressing the right arrow key" time="0.01" classname="should move the splitter to the right when pressing the right arrow key">
    </testcase>
    <testcase name="SplitView keyboard interactions ArrowRight should move the splitter to the right when pressing the right arrow key with primaryPane = 1" time="0.008" classname="should move the splitter to the right when pressing the right arrow key with primaryPane = 1">
    </testcase>
    <testcase name="SplitView keyboard interactions ArrowRight should not move to the right when orientation is vertical" time="0.008" classname="should not move to the right when orientation is vertical">
    </testcase>
  </testsuite>
  <testsuite name="ArrowUp" timestamp="2019-01-26T00:12:30" tests="4" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/SplitView/SplitView.js" failures="0" time="0.032">
    <testcase name="SplitView keyboard interactions ArrowUp should move the splitter up when pressing the up arrow key" time="0.008" classname="should move the splitter up when pressing the up arrow key">
    </testcase>
    <testcase name="SplitView keyboard interactions ArrowUp should move the splitter up when pressing the up arrow key with primaryPane = 1" time="0.009" classname="should move the splitter up when pressing the up arrow key with primaryPane = 1">
    </testcase>
    <testcase name="SplitView keyboard interactions ArrowUp should not move up beyond the minimum" time="0.008" classname="should not move up beyond the minimum">
    </testcase>
    <testcase name="SplitView keyboard interactions ArrowUp should not move up when orientation is horizontal" time="0.007" classname="should not move up when orientation is horizontal">
    </testcase>
  </testsuite>
  <testsuite name="ArrowDown" timestamp="2019-01-26T00:12:30" tests="3" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/SplitView/SplitView.js" failures="0" time="0.020999999999999998">
    <testcase name="SplitView keyboard interactions ArrowDown should move the splitter down when pressing the down arrow key" time="0.008" classname="should move the splitter down when pressing the down arrow key">
    </testcase>
    <testcase name="SplitView keyboard interactions ArrowDown should move the splitter down when pressing the down arrow key with primaryPane = 1" time="0.007" classname="should move the splitter down when pressing the down arrow key with primaryPane = 1">
    </testcase>
    <testcase name="SplitView keyboard interactions ArrowDown should not move down when orientation is horizontal" time="0.006" classname="should not move down when orientation is horizontal">
    </testcase>
  </testsuite>
  <testsuite name="Home" timestamp="2019-01-26T00:12:30" tests="2" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/SplitView/SplitView.js" failures="0" time="0.014">
    <testcase name="SplitView keyboard interactions Home should move the splitter to the minimum when pressing the home key in horizontal orientation" time="0.007" classname="should move the splitter to the minimum when pressing the home key in horizontal orientation">
    </testcase>
    <testcase name="SplitView keyboard interactions Home should move the splitter to the minimum when pressing the home key in vertical orientation" time="0.007" classname="should move the splitter to the minimum when pressing the home key in vertical orientation">
    </testcase>
  </testsuite>
  <testsuite name="End" timestamp="2019-01-26T00:12:30" tests="2" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/SplitView/SplitView.js" failures="0" time="0.016">
    <testcase name="SplitView keyboard interactions End should move the splitter to the maximum when pressing the end key in horizontal orientation" time="0.009" classname="should move the splitter to the maximum when pressing the end key in horizontal orientation">
    </testcase>
    <testcase name="SplitView keyboard interactions End should move the splitter to the maximum when pressing the end key in vertical orientation" time="0.007" classname="should move the splitter to the maximum when pressing the end key in vertical orientation">
    </testcase>
  </testsuite>
  <testsuite name="Enter" timestamp="2019-01-26T00:12:30" tests="6" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/SplitView/SplitView.js" failures="0" time="0.068">
    <testcase name="SplitView keyboard interactions Enter should collapse the split view when pressing the enter key in horizontal orientation" time="0.015" classname="should collapse the split view when pressing the enter key in horizontal orientation">
    </testcase>
    <testcase name="SplitView keyboard interactions Enter should collapse the split view when pressing the enter key in horizontal orientation with primaryPane = 1" time="0.009" classname="should collapse the split view when pressing the enter key in horizontal orientation with primaryPane = 1">
    </testcase>
    <testcase name="SplitView keyboard interactions Enter should collapse the split view when pressing the enter key in vertical orientation" time="0.01" classname="should collapse the split view when pressing the enter key in vertical orientation">
    </testcase>
    <testcase name="SplitView keyboard interactions Enter should collapse the split view when pressing the enter key in vertical orientation with primaryPane = 1" time="0.01" classname="should collapse the split view when pressing the enter key in vertical orientation with primaryPane = 1">
    </testcase>
    <testcase name="SplitView keyboard interactions Enter should restore the split view to its prior position when pressing the enter key when already collapsed" time="0.015" classname="should restore the split view to its prior position when pressing the enter key when already collapsed">
    </testcase>
    <testcase name="SplitView keyboard interactions Enter should restore the split view to the minimum position when pressing the enter key when collapsed by default" time="0.009" classname="should restore the split view to the minimum position when pressing the enter key when collapsed by default">
    </testcase>
  </testsuite>
  <testsuite name="StatusLight" timestamp="2019-01-26T00:12:30" tests="5" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/StatusLight/StatusLight.js" failures="0" time="0.002">
    <testcase name="StatusLight supports variants" time="0.001" classname="supports variants">
    </testcase>
    <testcase name="StatusLight supports a disabled state" time="0.001" classname="supports a disabled state">
    </testcase>
    <testcase name="StatusLight supports additional classNames" time="0" classname="supports additional classNames">
    </testcase>
    <testcase name="StatusLight supports additional properties" time="0" classname="supports additional properties">
    </testcase>
    <testcase name="StatusLight supports children" time="0" classname="supports children">
    </testcase>
  </testsuite>
  <testsuite name="StepList" timestamp="2019-01-26T00:12:30" tests="6" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/StepList/StepList.js" failures="0" time="0.010000000000000002">
    <testcase name="StepList has correct defaults" time="0.003" classname="has correct defaults">
    </testcase>
    <testcase name="StepList should support size" time="0" classname="should support size">
    </testcase>
    <testcase name="StepList should support interaction" time="0" classname="should support interaction">
    </testcase>
    <testcase name="StepList should pass the size property to the children" time="0.004" classname="should pass the size property to the children">
    </testcase>
    <testcase name="StepList should handle the complete prop for the children before selected" time="0.002" classname="should handle the complete prop for the children before selected">
    </testcase>
    <testcase name="StepList should disable the steps when not interactive" time="0.001" classname="should disable the steps when not interactive">
    </testcase>
  </testsuite>
  <testsuite name="Step" timestamp="2019-01-26T00:12:30" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/StepList/StepList.js" failures="0" time="0.003">
    <testcase name="StepList Step has correct defaults" time="0.003" classname="has correct defaults">
    </testcase>
  </testsuite>
  <testsuite name="Switch" timestamp="2019-01-26T00:12:30" tests="6" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Switch/Switch.js" failures="0" time="0.001">
    <testcase name="Switch has correct defaults" time="0.001" classname="has correct defaults">
    </testcase>
    <testcase name="Switch supports additional classNames" time="0" classname="supports additional classNames">
    </testcase>
    <testcase name="Switch supports additional properties" time="0" classname="supports additional properties">
    </testcase>
    <testcase name="Switch supports ab variant" time="0" classname="supports ab variant">
    </testcase>
    <testcase name="Switch supports quiet" time="0" classname="supports quiet">
    </testcase>
    <testcase name="Switch has appropriate WAI-ARIA role for a switch" time="0" classname="has appropriate WAI-ARIA role for a switch">
    </testcase>
  </testsuite>
  <testsuite name="SwitchBase" timestamp="2019-01-26T00:12:30" tests="18" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Switch/SwitchBase.js" failures="0" time="0.03300000000000001">
    <testcase name="SwitchBase has correct defaults" time="0.005" classname="has correct defaults">
    </testcase>
    <testcase name="SwitchBase uncontrolled switchBase will toggle" time="0.002" classname="uncontrolled switchBase will toggle">
    </testcase>
    <testcase name="SwitchBase controlled switchBase won&apos;t toggle" time="0.002" classname="controlled switchBase won&apos;t toggle">
    </testcase>
    <testcase name="SwitchBase supports defaultChecked and checked" time="0.003" classname="supports defaultChecked and checked">
    </testcase>
    <testcase name="SwitchBase supports setting checked state through props" time="0.001" classname="supports setting checked state through props">
    </testcase>
    <testcase name="SwitchBase supports name" time="0.001" classname="supports name">
    </testcase>
    <testcase name="SwitchBase supports disabled" time="0.002" classname="supports disabled">
    </testcase>
    <testcase name="SwitchBase supports required" time="0.002" classname="supports required">
    </testcase>
    <testcase name="SwitchBase supports readOnly" time="0.001" classname="supports readOnly">
    </testcase>
    <testcase name="SwitchBase supports invalid" time="0.001" classname="supports invalid">
    </testcase>
    <testcase name="SwitchBase supports children" time="0.001" classname="supports children">
    </testcase>
    <testcase name="SwitchBase supports additional classNames" time="0.001" classname="supports additional classNames">
    </testcase>
    <testcase name="SwitchBase supports additional properties" time="0.001" classname="supports additional properties">
    </testcase>
    <testcase name="SwitchBase supports not rendering a label" time="0.005" classname="supports not rendering a label">
    </testcase>
    <testcase name="SwitchBase supports aria-label" time="0.002" classname="supports aria-label">
    </testcase>
    <testcase name="SwitchBase supports overriding the input className" time="0.001" classname="supports overriding the input className">
    </testcase>
    <testcase name="SwitchBase supports overriding the mark className" time="0.001" classname="supports overriding the mark className">
    </testcase>
    <testcase name="SwitchBase supports overriding the label className" time="0.001" classname="supports overriding the label className">
    </testcase>
  </testsuite>
  <testsuite name="getInput" timestamp="2019-01-26T00:12:30" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Switch/SwitchBase.js" failures="0" time="0.004">
    <testcase name="SwitchBase getInput returns ref for input element" time="0.004" classname="returns ref for input element">
    </testcase>
  </testsuite>
  <testsuite name="receives focus" timestamp="2019-01-26T00:12:30" tests="2" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Switch/SwitchBase.js" failures="0" time="0.008">
    <testcase name="SwitchBase receives focus on mouse down" time="0.005" classname="on mouse down">
    </testcase>
    <testcase name="SwitchBase receives focus on mouse up" time="0.003" classname="on mouse up">
    </testcase>
  </testsuite>
  <testsuite name="Tab" timestamp="2019-01-26T00:12:30" tests="11" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/TabList/Tab.js" failures="0" time="0.011000000000000003">
    <testcase name="Tab has correct defaults" time="0.001" classname="has correct defaults">
    </testcase>
    <testcase name="Tab supports selected" time="0.001" classname="supports selected">
    </testcase>
    <testcase name="Tab support invalid" time="0.001" classname="support invalid">
    </testcase>
    <testcase name="Tab supports icon" time="0.004" classname="supports icon">
    </testcase>
    <testcase name="Tab supports onClick" time="0.001" classname="supports onClick">
    </testcase>
    <testcase name="Tab supports keyboard activation with Enter or Space " time="0.001" classname="supports keyboard activation with Enter or Space ">
    </testcase>
    <testcase name="Tab supports disabled" time="0" classname="supports disabled">
    </testcase>
    <testcase name="Tab supports additional classNames" time="0.001" classname="supports additional classNames">
    </testcase>
    <testcase name="Tab supports additional properties" time="0" classname="supports additional properties">
    </testcase>
    <testcase name="Tab stops from rendering the props.children as tab content if prop is set" time="0.001" classname="stops from rendering the props.children as tab content if prop is set">
    </testcase>
    <testcase name="Tab renders the props.children as tab content if no label" time="0" classname="renders the props.children as tab content if no label">
    </testcase>
  </testsuite>
  <testsuite name="TabList" timestamp="2019-01-26T00:12:30" tests="20" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/TabList/TabList.js" failures="0" time="0.061">
    <testcase name="TabList has correct defaults" time="0.002" classname="has correct defaults">
    </testcase>
    <testcase name="TabList supports vertical orientation" time="0" classname="supports vertical orientation">
    </testcase>
    <testcase name="TabList renders normally when anchored is passed" time="0.001" classname="renders normally when anchored is passed">
    </testcase>
    <testcase name="TabList renders normally when panel is passed" time="0" classname="renders normally when panel is passed">
    </testcase>
    <testcase name="TabList renders compact when page is passed" time="0.001" classname="renders compact when page is passed">
    </testcase>
    <testcase name="TabList supports compact variant" time="0" classname="supports compact variant">
    </testcase>
    <testcase name="TabList supports quiet variant" time="0.001" classname="supports quiet variant">
    </testcase>
    <testcase name="TabList supports quiet compact variant" time="0" classname="supports quiet compact variant">
    </testcase>
    <testcase name="TabList supports additional classNames" time="0" classname="supports additional classNames">
    </testcase>
    <testcase name="TabList supports additional properties" time="0.001" classname="supports additional properties">
    </testcase>
    <testcase name="TabList supports children" time="0.001" classname="supports children">
    </testcase>
    <testcase name="TabList can be changed" time="0.002" classname="can be changed">
    </testcase>
    <testcase name="TabList does not control state if selectedIndex is defined" time="0.002" classname="does not control state if selectedIndex is defined">
    </testcase>
    <testcase name="TabList supports defaultSelectedIndex" time="0.002" classname="supports defaultSelectedIndex">
    </testcase>
    <testcase name="TabList does not call onChange if descendant input is changed" time="0.002" classname="does not call onChange if descendant input is changed">
    </testcase>
    <testcase name="TabList supports dynamic setting of props" time="0.013" classname="supports dynamic setting of props">
    </testcase>
    <testcase name="TabList supports selectedIndex by setting selected on child" time="0.015" classname="supports selectedIndex by setting selected on child">
    </testcase>
    <testcase name="TabList supports mousedown/mouseup on child" time="0.003" classname="supports mousedown/mouseup on child">
    </testcase>
    <testcase name="TabList supports onClick on child" time="0.002" classname="supports onClick on child">
    </testcase>
    <testcase name="TabList supports selection on focus when keyboardActivation=&quot;automatic&quot;" time="0.013" classname="supports selection on focus when keyboardActivation=&quot;automatic&quot;">
    </testcase>
  </testsuite>
  <testsuite name="selectedKey" timestamp="2019-01-26T00:12:30" tests="2" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/TabList/TabList.js" failures="0" time="0.004">
    <testcase name="TabList selectedKey supports string index" time="0.002" classname="supports string index">
    </testcase>
    <testcase name="TabList selectedKey supports integer index" time="0.002" classname="supports integer index">
    </testcase>
  </testsuite>
  <testsuite name="TabView" timestamp="2019-01-26T00:12:30" tests="5" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/TabView/TabView.js" failures="0" time="0.015">
    <testcase name="TabView renders a tab list and the selected tab body" time="0.004" classname="renders a tab list and the selected tab body">
    </testcase>
    <testcase name="TabView clicking on a tab changes the tab body" time="0.004" classname="clicking on a tab changes the tab body">
    </testcase>
    <testcase name="TabView does not change state in controlled mode" time="0.004" classname="does not change state in controlled mode">
    </testcase>
    <testcase name="TabView changing the children resets the selected index" time="0.002" classname="changing the children resets the selected index">
    </testcase>
    <testcase name="TabView children should have renderChildren prop and allow null in children" time="0.001" classname="children should have renderChildren prop and allow null in children">
    </testcase>
  </testsuite>
  <testsuite name="TBody" timestamp="2019-01-26T00:12:30" tests="3" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Table/TBody.js" failures="0" time="0.001">
    <testcase name="TBody supports additional classNames" time="0.001" classname="supports additional classNames">
    </testcase>
    <testcase name="TBody supports additional properties" time="0" classname="supports additional properties">
    </testcase>
    <testcase name="TBody supports children" time="0" classname="supports children">
    </testcase>
  </testsuite>
  <testsuite name="TD" timestamp="2019-01-26T00:12:30" tests="4" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Table/TD.js" failures="0" time="0.002">
    <testcase name="TD supports dividers" time="0.001" classname="supports dividers">
    </testcase>
    <testcase name="TD supports additional classNames" time="0" classname="supports additional classNames">
    </testcase>
    <testcase name="TD supports additional properties" time="0" classname="supports additional properties">
    </testcase>
    <testcase name="TD supports children" time="0.001" classname="supports children">
    </testcase>
  </testsuite>
  <testsuite name="TH" timestamp="2019-01-26T00:12:30" tests="3" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Table/TH.js" failures="0" time="0.001">
    <testcase name="TH supports additional classNames" time="0" classname="supports additional classNames">
    </testcase>
    <testcase name="TH supports additional properties" time="0.001" classname="supports additional properties">
    </testcase>
    <testcase name="TH supports children" time="0" classname="supports children">
    </testcase>
  </testsuite>
  <testsuite name="THead" timestamp="2019-01-26T00:12:30" tests="3" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Table/THead.js" failures="0" time="0.002">
    <testcase name="THead supports additional classNames" time="0.001" classname="supports additional classNames">
    </testcase>
    <testcase name="THead supports additional properties" time="0" classname="supports additional properties">
    </testcase>
    <testcase name="THead supports children" time="0.001" classname="supports children">
    </testcase>
  </testsuite>
  <testsuite name="TR" timestamp="2019-01-26T00:12:30" tests="3" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Table/TR.js" failures="0" time="0.001">
    <testcase name="TR supports additional classNames" time="0" classname="supports additional classNames">
    </testcase>
    <testcase name="TR supports additional properties" time="0.001" classname="supports additional properties">
    </testcase>
    <testcase name="TR supports children" time="0" classname="supports children">
    </testcase>
  </testsuite>
  <testsuite name="Table" timestamp="2019-01-26T00:12:30" tests="4" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Table/Table.js" failures="0" time="0.002">
    <testcase name="Table supports quiet" time="0.001" classname="supports quiet">
    </testcase>
    <testcase name="Table supports additional classNames" time="0.001" classname="supports additional classNames">
    </testcase>
    <testcase name="Table supports additional properties" time="0" classname="supports additional properties">
    </testcase>
    <testcase name="Table supports children" time="0" classname="supports children">
    </testcase>
  </testsuite>
  <testsuite name="TableCell" timestamp="2019-01-26T00:12:30" tests="13" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/TableView/TableCell.js" failures="0" time="0.012000000000000004">
    <testcase name="TableCell should render a header cell" time="0.003" classname="should render a header cell">
    </testcase>
    <testcase name="TableCell should render a sortable header cell" time="0.001" classname="should render a sortable header cell">
    </testcase>
    <testcase name="TableCell should render a sorted desc header cell" time="0.001" classname="should render a sorted desc header cell">
    </testcase>
    <testcase name="TableCell should render a sorted asc header cell" time="0.001" classname="should render a sorted asc header cell">
    </testcase>
    <testcase name="TableCell should call onClick event on Enter or Space keypress" time="0.002" classname="should call onClick event on Enter or Space keypress">
    </testcase>
    <testcase name="TableCell should render a body cell" time="0.001" classname="should render a body cell">
    </testcase>
    <testcase name="TableCell should render a body cell with a divider" time="0" classname="should render a body cell with a divider">
    </testcase>
    <testcase name="TableCell should render a body cell aligned center" time="0.001" classname="should render a body cell aligned center">
    </testcase>
    <testcase name="TableCell should render a body cell aligned right" time="0" classname="should render a body cell aligned right">
    </testcase>
    <testcase name="TableCell should set a static width on a cell" time="0.001" classname="should set a static width on a cell">
    </testcase>
    <testcase name="TableCell should set a static minimum width on a cell" time="0" classname="should set a static minimum width on a cell">
    </testcase>
    <testcase name="TableCell should set a static maximum width on a cell" time="0" classname="should set a static maximum width on a cell">
    </testcase>
    <testcase name="TableCell should pass through a custom class name" time="0.001" classname="should pass through a custom class name">
    </testcase>
  </testsuite>
  <testsuite name="TableRow" timestamp="2019-01-26T00:12:30" tests="11" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/TableView/TableRow.js" failures="0" time="0.03">
    <testcase name="TableRow should render a header row" time="0.01" classname="should render a header row">
    </testcase>
    <testcase name="TableRow should render a body row" time="0.001" classname="should render a body row">
    </testcase>
    <testcase name="TableRow should render a selectable body row" time="0.002" classname="should render a selectable body row">
    </testcase>
    <testcase name="TableRow should render a selected body row" time="0.001" classname="should render a selected body row">
    </testcase>
    <testcase name="TableRow should render a drop target row" time="0.002" classname="should render a drop target row">
    </testcase>
    <testcase name="TableRow should trigger onSelectChange when the checkbox value changes" time="0.003" classname="should trigger onSelectChange when the checkbox value changes">
    </testcase>
    <testcase name="TableRow should trigger onCellClick when clicking on a cell" time="0.002" classname="should trigger onCellClick when clicking on a cell">
    </testcase>
    <testcase name="TableRow should trigger onCellDoubleClick when double clicking on a cell" time="0.001" classname="should trigger onCellDoubleClick when double clicking on a cell">
    </testcase>
    <testcase name="TableRow should update focused state when focused prop changes" time="0.003" classname="should update focused state when focused prop changes">
    </testcase>
    <testcase name="TableRow click on checkbox following a mouseup event should not toggle selection" time="0.003" classname="click on checkbox following a mouseup event should not toggle selection">
    </testcase>
    <testcase name="TableRow should set header row checkbox to indeterminate when multiple items, but not all, are selected" time="0.002" classname="should set header row checkbox to indeterminate when multiple items, but not all, are selected">
    </testcase>
  </testsuite>
  <testsuite name="focus" timestamp="2019-01-26T00:12:30" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/TableView/TableRow.js" failures="0" time="0.001">
    <testcase name="TableRow focus should call focus on row element" time="0.001" classname="should call focus on row element">
    </testcase>
  </testsuite>
  <testsuite name="onFocus" timestamp="2019-01-26T00:12:30" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/TableView/TableRow.js" failures="0" time="0.003">
    <testcase name="TableRow onFocus should set focused state of row element to true" time="0.003" classname="should set focused state of row element to true">
    </testcase>
  </testsuite>
  <testsuite name="onBlur" timestamp="2019-01-26T00:12:30" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/TableView/TableRow.js" failures="0" time="0.002">
    <testcase name="TableRow onBlur should set focused state of row element to false" time="0.002" classname="should set focused state of row element to false">
    </testcase>
  </testsuite>
  <testsuite name="onKeyDown" timestamp="2019-01-26T00:12:30" tests="4" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/TableView/TableRow.js" failures="0" time="0.062">
    <testcase name="TableRow onKeyDown should enable horizontal navigation of focusable descendants" time="0.022" classname="should enable horizontal navigation of focusable descendants">
    </testcase>
    <testcase name="TableRow onKeyDown should select all on Ctrl+A or Meta+A" time="0.003" classname="should select all on Ctrl+A or Meta+A">
    </testcase>
    <testcase name="TableRow onKeyDown should clear selection on Escape key" time="0.003" classname="should clear selection on Escape key">
    </testcase>
    <testcase name="TableRow onKeyDown should permit vertical navigation between the header and first item row" time="0.034" classname="should permit vertical navigation between the header and first item row">
    </testcase>
  </testsuite>
  <testsuite name="TableView old API" timestamp="2019-01-26T00:12:30" tests="14" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/TableView/TableView-old.js" failures="0" time="0.093">
    <testcase name="TableView old API should render a table view" time="0.005" classname="should render a table view">
    </testcase>
    <testcase name="TableView old API should render a quiet table view" time="0.001" classname="should render a quiet table view">
    </testcase>
    <testcase name="TableView old API should pass correct props to collectionview" time="0.003" classname="should pass correct props to collectionview">
    </testcase>
    <testcase name="TableView old API should return Itemview row with props" time="0.001" classname="should return Itemview row with props">
    </testcase>
    <testcase name="TableView old API should return renderColumnHeader row prop defined header" time="0.002" classname="should return renderColumnHeader row prop defined header">
    </testcase>
    <testcase name="TableView old API should return renderColumnHeader row with props" time="0.001" classname="should return renderColumnHeader row with props">
    </testcase>
    <testcase name="TableView old API should call props.renderCell in renderCell" time="0.002" classname="should call props.renderCell in renderCell">
    </testcase>
    <testcase name="TableView old API should call internal sort if column prop is set" time="0.041" classname="should call internal sort if column prop is set">
    </testcase>
    <testcase name="TableView old API should call selectionChange if prop is set" time="0.019" classname="should call selectionChange if prop is set">
    </testcase>
    <testcase name="TableView old API setSelectAll should call selectAll or clearSelection method of collection" time="0.002" classname="setSelectAll should call selectAll or clearSelection method of collection">
    </testcase>
    <testcase name="TableView old API should have collection ref when mounted" time="0.015" classname="should have collection ref when mounted">
    </testcase>
    <testcase name="TableView old API should allow a row height override" time="0" classname="should allow a row height override">
    </testcase>
    <testcase name="TableView old API should have a row height ceiling of 72" time="0" classname="should have a row height ceiling of 72">
    </testcase>
    <testcase name="TableView old API should have a row height floor of 48" time="0.001" classname="should have a row height floor of 48">
    </testcase>
  </testsuite>
  <testsuite name="TableView" timestamp="2019-01-26T00:12:30" tests="16" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/TableView/TableView.js" failures="0" time="0.5890000000000001">
    <testcase name="TableView should render a table view" time="0.001" classname="should render a table view">
    </testcase>
    <testcase name="TableView should render a quiet table view" time="0.001" classname="should render a quiet table view">
    </testcase>
    <testcase name="TableView should pass correct props to collectionview" time="0.002" classname="should pass correct props to collectionview">
    </testcase>
    <testcase name="TableView should return Itemview row with props" time="0.001" classname="should return Itemview row with props">
    </testcase>
    <testcase name="TableView should return renderColumnHeader row prop defined header" time="0.002" classname="should return renderColumnHeader row prop defined header">
    </testcase>
    <testcase name="TableView should return renderColumnHeader row with props" time="0.001" classname="should return renderColumnHeader row with props">
    </testcase>
    <testcase name="TableView should call props.renderCell in renderCell" time="0.001" classname="should call props.renderCell in renderCell">
    </testcase>
    <testcase name="TableView should call internal sort if column prop is set" time="0.176" classname="should call internal sort if column prop is set">
    </testcase>
    <testcase name="TableView should sort using the passed props (controlled)" time="0.135" classname="should sort using the passed props (controlled)">
    </testcase>
    <testcase name="TableView should sort using the passed props (uncontrolled)" time="0.206" classname="should sort using the passed props (uncontrolled)">
    </testcase>
    <testcase name="TableView should call selectionChange if prop is set" time="0.029" classname="should call selectionChange if prop is set">
    </testcase>
    <testcase name="TableView setSelectAll should call selectAll or clearSelection method of collection" time="0.001" classname="setSelectAll should call selectAll or clearSelection method of collection">
    </testcase>
    <testcase name="TableView should have collection ref when mounted" time="0.031" classname="should have collection ref when mounted">
    </testcase>
    <testcase name="TableView should allow a row height override" time="0.001" classname="should allow a row height override">
    </testcase>
    <testcase name="TableView should have a row height ceiling of 72" time="0.001" classname="should have a row height ceiling of 72">
    </testcase>
    <testcase name="TableView should have a row height floor of 48" time="0" classname="should have a row height floor of 48">
    </testcase>
  </testsuite>
  <testsuite name="TableViewDataSource" timestamp="2019-01-26T00:12:31" tests="11" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/TableView/TableViewDataSource.js" failures="0" time="0.008">
    <testcase name="TableViewDataSource should require getColumns to be implemented" time="0.001" classname="should require getColumns to be implemented">
    </testcase>
    <testcase name="TableViewDataSource should require getNumberOfRows to be implemented" time="0.001" classname="should require getNumberOfRows to be implemented">
    </testcase>
    <testcase name="TableViewDataSource should require getCell to be implemented" time="0" classname="should require getCell to be implemented">
    </testcase>
    <testcase name="TableViewDataSource should require sort to be implemented" time="0.001" classname="should require sort to be implemented">
    </testcase>
    <testcase name="TableViewDataSource should getColumns during initialization" time="0" classname="should getColumns during initialization">
    </testcase>
    <testcase name="TableViewDataSource getNumberOfSections should return 1 by default" time="0" classname="getNumberOfSections should return 1 by default">
    </testcase>
    <testcase name="TableViewDataSource getSectionLength should return the number of rows" time="0" classname="getSectionLength should return the number of rows">
    </testcase>
    <testcase name="TableViewDataSource getSectionHeader should return null by default" time="0.001" classname="getSectionHeader should return null by default">
    </testcase>
    <testcase name="TableViewDataSource getItem should return data for all cells in a row" time="0" classname="getItem should return data for all cells in a row">
    </testcase>
    <testcase name="TableViewDataSource should call the sort method when performing a sort" time="0.003" classname="should call the sort method when performing a sort">
    </testcase>
    <testcase name="TableViewDataSource reloadData should emit reloadSection" time="0.001" classname="reloadData should emit reloadSection">
    </testcase>
  </testsuite>
  <testsuite name="TableViewLayout" timestamp="2019-01-26T00:12:31" tests="6" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/TableView/TableViewLayout.js" failures="0" time="0.002">
    <testcase name="TableViewLayout should get a drop insertion indicator" time="0" classname="should get a drop insertion indicator">
    </testcase>
    <testcase name="TableViewLayout should not get a drop insertion indicator if the table is empty" time="0" classname="should not get a drop insertion indicator if the table is empty">
    </testcase>
    <testcase name="TableViewLayout should get a drop target with dropPosition=&quot;on&quot;" time="0.001" classname="should get a drop target with dropPosition=&quot;on&quot;">
    </testcase>
    <testcase name="TableViewLayout should get a drop target on the whole table with dropPosition=&quot;on&quot;" time="0" classname="should get a drop target on the whole table with dropPosition=&quot;on&quot;">
    </testcase>
    <testcase name="TableViewLayout should get a drop target with dropPosition=&quot;between&quot;" time="0.001" classname="should get a drop target with dropPosition=&quot;between&quot;">
    </testcase>
    <testcase name="TableViewLayout should get a drop target at the end with dropPosition=&quot;between&quot;" time="0" classname="should get a drop target at the end with dropPosition=&quot;between&quot;">
    </testcase>
  </testsuite>
  <testsuite name="TagField" timestamp="2019-01-26T00:12:31" tests="14" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/TagField/TagField.js" failures="0" time="0.082">
    <testcase name="TagField should render a textfield when empty" time="0.002" classname="should render a textfield when empty">
    </testcase>
    <testcase name="TagField should render classnames for states" time="0.001" classname="should render classnames for states">
    </testcase>
    <testcase name="TagField should render tags when a value is given" time="0.001" classname="should render tags when a value is given">
    </testcase>
    <testcase name="TagField should allow entering tags" time="0.004" classname="should allow entering tags">
    </testcase>
    <testcase name="TagField should allow check if the option is string or  array of object tags" time="0.002" classname="should allow check if the option is string or  array of object tags">
    </testcase>
    <testcase name="TagField should not allow empty tags" time="0" classname="should not allow empty tags">
    </testcase>
    <testcase name="TagField should allowCreate prop to false in Autocomplete" time="0.001" classname="should allowCreate prop to false in Autocomplete">
    </testcase>
    <testcase name="TagField should allow tags creation by default" time="0.001" classname="should allow tags creation by default">
    </testcase>
    <testcase name="TagField should not allow duplicates by default" time="0.002" classname="should not allow duplicates by default">
    </testcase>
    <testcase name="TagField should allow duplicates with allowDuplicates prop" time="0.002" classname="should allow duplicates with allowDuplicates prop">
    </testcase>
    <testcase name="TagField should allow removing tags" time="0.002" classname="should allow removing tags">
    </testcase>
    <testcase name="TagField should not set state in controlled mode" time="0.002" classname="should not set state in controlled mode">
    </testcase>
    <testcase name="TagField focus should not be lost when deleting the last indexed value" time="0.037" classname="focus should not be lost when deleting the last indexed value">
    </testcase>
    <testcase name="TagField focus should not be lost when removing the last indexed value when controlled" time="0.025" classname="focus should not be lost when removing the last indexed value when controlled">
    </testcase>
  </testsuite>
  <testsuite name="Tag" timestamp="2019-01-26T00:12:31" tests="15" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/TagList/Tag.js" failures="0" time="0.024000000000000007">
    <testcase name="Tag default" time="0.001" classname="default">
    </testcase>
    <testcase name="Tag supports additional classNames" time="0" classname="supports additional classNames">
    </testcase>
    <testcase name="Tag supports being closable" time="0.002" classname="supports being closable">
    </testcase>
    <testcase name="Tag supports being disabled" time="0.002" classname="supports being disabled">
    </testcase>
    <testcase name="Tag supports being selected" time="0" classname="supports being selected">
    </testcase>
    <testcase name="Tag supports a value" time="0.001" classname="supports a value">
    </testcase>
    <testcase name="Tag supports an onClose event" time="0.002" classname="supports an onClose event">
    </testcase>
    <testcase name="Tag supports keyboard for onClose" time="0.008" classname="supports keyboard for onClose">
    </testcase>
    <testcase name="Tag child button has a valid aria-label" time="0.001" classname="child button has a valid aria-label">
    </testcase>
    <testcase name="Tag supports additional classNames" time="0" classname="supports additional classNames">
    </testcase>
    <testcase name="Tag supports additional properties" time="0.001" classname="supports additional properties">
    </testcase>
    <testcase name="Tag supports an icon" time="0.001" classname="supports an icon">
    </testcase>
    <testcase name="Tag supports an avatar" time="0.002" classname="supports an avatar">
    </testcase>
    <testcase name="Tag adds focus styles correctly when focused" time="0.001" classname="adds focus styles correctly when focused">
    </testcase>
    <testcase name="Tag removes focus styles correctly when blurred" time="0.002" classname="removes focus styles correctly when blurred">
    </testcase>
  </testsuite>
  <testsuite name="TagList" timestamp="2019-01-26T00:12:31" tests="11" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/TagList/TagList.js" failures="0" time="0.008">
    <testcase name="TagList has correct classname when disabled" time="0.001" classname="has correct classname when disabled">
    </testcase>
    <testcase name="TagList has spectrum class" time="0.001" classname="has spectrum class">
    </testcase>
    <testcase name="TagList passes in a custom class" time="0" classname="passes in a custom class">
    </testcase>
    <testcase name="TagList sets the role" time="0.001" classname="sets the role">
    </testcase>
    <testcase name="TagList sets the name" time="0" classname="sets the name">
    </testcase>
    <testcase name="TagList sets the aria-disabled" time="0.001" classname="sets the aria-disabled">
    </testcase>
    <testcase name="TagList sets the aria-invalid" time="0.001" classname="sets the aria-invalid">
    </testcase>
    <testcase name="TagList sets readOnly" time="0" classname="sets readOnly">
    </testcase>
    <testcase name="TagList sets disabled on the element" time="0.001" classname="sets disabled on the element">
    </testcase>
    <testcase name="TagList sets focused state when onFocus" time="0.001" classname="sets focused state when onFocus">
    </testcase>
    <testcase name="TagList removes focused state when onBlur" time="0.001" classname="removes focused state when onBlur">
    </testcase>
  </testsuite>
  <testsuite name="Children" timestamp="2019-01-26T00:12:31" tests="12" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/TagList/TagList.js" failures="0" time="0.027000000000000003">
    <testcase name="TagList Children supports inline" time="0.004" classname="supports inline">
    </testcase>
    <testcase name="TagList Children sets selected when focused and selectedIndex exists" time="0.002" classname="sets selected when focused and selectedIndex exists">
    </testcase>
    <testcase name="TagList Children sets tab index when selectedIndex matches index" time="0.002" classname="sets tab index when selectedIndex matches index">
    </testcase>
    <testcase name="TagList Children doesn&apos;t set tab index when disabled" time="0.002" classname="doesn&apos;t set tab index when disabled">
    </testcase>
    <testcase name="TagList Children sets closable" time="0.002" classname="sets closable">
    </testcase>
    <testcase name="TagList Children doest set closable when readOnly" time="0.002" classname="doest set closable when readOnly">
    </testcase>
    <testcase name="TagList Children sets the role" time="0.002" classname="sets the role">
    </testcase>
    <testcase name="TagList Children passes down the onClose" time="0.003" classname="passes down the onClose">
    </testcase>
    <testcase name="TagList Children supports values" time="0.002" classname="supports values">
    </testcase>
    <testcase name="TagList Children doesnt render passed children with values" time="0.002" classname="doesnt render passed children with values">
    </testcase>
    <testcase name="TagList Children sets the value" time="0.002" classname="sets the value">
    </testcase>
    <testcase name="TagList Children sets the text" time="0.002" classname="sets the text">
    </testcase>
  </testsuite>
  <testsuite name="Keyboard navigation" timestamp="2019-01-26T00:12:31" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/TagList/TagList.js" failures="0" time="0.009">
    <testcase name="TagList Children Keyboard navigation when ArrowRight key is pressed, focus next tag, ArrowLeft Focuses previous" time="0.009" classname="when ArrowRight key is pressed, focus next tag, ArrowLeft Focuses previous">
    </testcase>
  </testsuite>
  <testsuite name="Textarea" timestamp="2019-01-26T00:12:31" tests="12" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Textarea/Textarea.js" failures="0" time="0.029">
    <testcase name="Textarea should render a Textfield with multiLine = true" time="0.001" classname="should render a Textfield with multiLine = true">
    </testcase>
    <testcase name="Textarea should render a textarea" time="0" classname="should render a textarea">
    </testcase>
    <testcase name="Textarea supports quiet variation" time="0.001" classname="supports quiet variation">
    </testcase>
    <testcase name="Textarea supports name" time="0" classname="supports name">
    </testcase>
    <testcase name="Textarea supports disabled" time="0.001" classname="supports disabled">
    </testcase>
    <testcase name="Textarea supports required" time="0" classname="supports required">
    </testcase>
    <testcase name="Textarea supports readOnly" time="0" classname="supports readOnly">
    </testcase>
    <testcase name="Textarea supports invalid" time="0.001" classname="supports invalid">
    </testcase>
    <testcase name="Textarea supports additional classNames" time="0" classname="supports additional classNames">
    </testcase>
    <testcase name="Textarea supports additional properties" time="0.001" classname="supports additional properties">
    </testcase>
    <testcase name="Textarea supports autoFocus" time="0.021" classname="supports autoFocus">
    </testcase>
    <testcase name="Textarea supports onChange event handler" time="0.003" classname="supports onChange event handler">
    </testcase>
  </testsuite>
  <testsuite name="growing quiet variant" timestamp="2019-01-26T00:12:31" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Textarea/Textarea.js" failures="0" time="0">
    <testcase name="Textarea growing quiet variant height should equal scrollHeight" time="0" classname="height should equal scrollHeight">
    </testcase>
  </testsuite>
  <testsuite name="Textfield" timestamp="2019-01-26T00:12:31" tests="12" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Textfield/Textfield.js" failures="0" time="0.027000000000000003">
    <testcase name="Textfield default" time="0.001" classname="default">
    </testcase>
    <testcase name="Textfield supports quiet variation" time="0" classname="supports quiet variation">
    </testcase>
    <testcase name="Textfield supports name" time="0.001" classname="supports name">
    </testcase>
    <testcase name="Textfield supports disabled" time="0" classname="supports disabled">
    </testcase>
    <testcase name="Textfield supports required" time="0.001" classname="supports required">
    </testcase>
    <testcase name="Textfield supports readOnly" time="0" classname="supports readOnly">
    </testcase>
    <testcase name="Textfield supports invalid" time="0.001" classname="supports invalid">
    </testcase>
    <testcase name="Textfield supports validationState" time="0.001" classname="supports validationState">
    </testcase>
    <testcase name="Textfield supports additional classNames" time="0" classname="supports additional classNames">
    </testcase>
    <testcase name="Textfield supports additional properties" time="0" classname="supports additional properties">
    </testcase>
    <testcase name="Textfield supports autoFocus" time="0.02" classname="supports autoFocus">
    </testcase>
    <testcase name="Textfield supports onChange event handler" time="0.002" classname="supports onChange event handler">
    </testcase>
  </testsuite>
  <testsuite name="Toast" timestamp="2019-01-26T00:12:31" tests="8" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Toast/Toast.js" failures="0" time="0.008">
    <testcase name="Toast should render a toast" time="0.002" classname="should render a toast">
    </testcase>
    <testcase name="Toast should render a close button" time="0.002" classname="should render a close button">
    </testcase>
    <testcase name="Toast should render an action button" time="0.002" classname="should render an action button">
    </testcase>
    <testcase name="Toast should render a success variant" time="0" classname="should render a success variant">
    </testcase>
    <testcase name="Toast should render a info variant" time="0.001" classname="should render a info variant">
    </testcase>
    <testcase name="Toast should render a help variant" time="0" classname="should render a help variant">
    </testcase>
    <testcase name="Toast should render a warning variant" time="0.001" classname="should render a warning variant">
    </testcase>
    <testcase name="Toast should render a error variant" time="0" classname="should render a error variant">
    </testcase>
  </testsuite>
  <testsuite name="events" timestamp="2019-01-26T00:12:31" tests="2" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Toast/Toast.js" failures="0" time="0.003">
    <testcase name="Toast events onAction is triggered on clicking upon action" time="0.002" classname="onAction is triggered on clicking upon action">
    </testcase>
    <testcase name="Toast events onClose is triggered on closing toast" time="0.001" classname="onClose is triggered on closing toast">
    </testcase>
  </testsuite>
  <testsuite name="ToastContainer" timestamp="2019-01-26T00:12:31" tests="13" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Toast/ToastContainer.js" failures="0" time="0.6150000000000001">
    <testcase name="ToastContainer should render toasts" time="0.004" classname="should render toasts">
    </testcase>
    <testcase name="ToastContainer should render toasts" time="0.009" classname="should render toasts">
    </testcase>
    <testcase name="ToastContainer should pause timer to remove toast when in focus" time="0.008" classname="should pause timer to remove toast when in focus">
    </testcase>
    <testcase name="ToastContainer should resume timer to remove toast when focus goes out" time="0.014" classname="should resume timer to remove toast when focus goes out">
    </testcase>
    <testcase name="ToastContainer should never remove a toast with timeout 0" time="0.005" classname="should never remove a toast with timeout 0">
    </testcase>
    <testcase name="ToastContainer should remove toasts when the remove button is clicked" time="0.001" classname="should remove toasts when the remove button is clicked">
    </testcase>
    <testcase name="ToastContainer should render a global toast container" time="0.513" classname="should render a global toast container">
    </testcase>
    <testcase name="ToastContainer should render a toast inside custom container" time="0.007" classname="should render a toast inside custom container">
    </testcase>
    <testcase name="ToastContainer should render a success toast" time="0.011" classname="should render a success toast">
    </testcase>
    <testcase name="ToastContainer should render a warning toast" time="0.01" classname="should render a warning toast">
    </testcase>
    <testcase name="ToastContainer should render an error toast" time="0.011" classname="should render an error toast">
    </testcase>
    <testcase name="ToastContainer should render an info toast" time="0.012" classname="should render an info toast">
    </testcase>
    <testcase name="ToastContainer should render a help toast" time="0.01" classname="should render a help toast">
    </testcase>
  </testsuite>
  <testsuite name="Tooltip" timestamp="2019-01-26T00:12:32" tests="5" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Tooltip/Tooltip.js" failures="0" time="0.004">
    <testcase name="Tooltip supports different placements" time="0.001" classname="supports different placements">
    </testcase>
    <testcase name="Tooltip supports different variants" time="0.001" classname="supports different variants">
    </testcase>
    <testcase name="Tooltip supports additional classNames" time="0" classname="supports additional classNames">
    </testcase>
    <testcase name="Tooltip supports children" time="0.002" classname="supports children">
    </testcase>
    <testcase name="Tooltip has WAI-ARIA role=&quot;tooltip&quot;" time="0" classname="has WAI-ARIA role=&quot;tooltip&quot;">
    </testcase>
  </testsuite>
  <testsuite name="TreeDataSource" timestamp="2019-01-26T00:12:32" tests="8" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/TreeDataSource/TreeDataSource.js" failures="0" time="0.012">
    <testcase name="TreeDataSource should emit startTransaction" time="0.003" classname="should emit startTransaction">
    </testcase>
    <testcase name="TreeDataSource should emit endTransaction" time="0.001" classname="should emit endTransaction">
    </testcase>
    <testcase name="TreeDataSource should emit insertChild" time="0.001" classname="should emit insertChild">
    </testcase>
    <testcase name="TreeDataSource should emit removeItem" time="0.002" classname="should emit removeItem">
    </testcase>
    <testcase name="TreeDataSource should emit moveItem" time="0.001" classname="should emit moveItem">
    </testcase>
    <testcase name="TreeDataSource should emit reloadItem" time="0.001" classname="should emit reloadItem">
    </testcase>
    <testcase name="TreeDataSource should insert items by default on drop" time="0.002" classname="should insert items by default on drop">
    </testcase>
    <testcase name="TreeDataSource should move items by default on drag and drop move" time="0.001" classname="should move items by default on drag and drop move">
    </testcase>
  </testsuite>
  <testsuite name="TreeItem" timestamp="2019-01-26T00:12:32" tests="9" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/TreeView/TreeItem.js" failures="0" time="0.019000000000000003">
    <testcase name="TreeItem should render a non-toggleable item" time="0.004" classname="should render a non-toggleable item">
    </testcase>
    <testcase name="TreeItem should render a toggleable item" time="0.003" classname="should render a toggleable item">
    </testcase>
    <testcase name="TreeItem should render an open item" time="0.003" classname="should render an open item">
    </testcase>
    <testcase name="TreeItem should render a selected item" time="0.002" classname="should render a selected item">
    </testcase>
    <testcase name="TreeItem should render a drop-target item" time="0.001" classname="should render a drop-target item">
    </testcase>
    <testcase name="TreeItem should pass tree item as a second argument to renderItem" time="0.001" classname="should pass tree item as a second argument to renderItem">
    </testcase>
    <testcase name="TreeItem should support clicking anywhere on the item to toggle it if selection is not enabled" time="0.002" classname="should support clicking anywhere on the item to toggle it if selection is not enabled">
    </testcase>
    <testcase name="TreeItem should support clicking only on the chevron to toggle if selection is enabled" time="0.002" classname="should support clicking only on the chevron to toggle if selection is enabled">
    </testcase>
    <testcase name="TreeItem should stop propagation on mouse down on the chevron so selection does not occur" time="0.001" classname="should stop propagation on mouse down on the chevron so selection does not occur">
    </testcase>
  </testsuite>
  <testsuite name="focus" timestamp="2019-01-26T00:12:32" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/TreeView/TreeItem.js" failures="0" time="0.001">
    <testcase name="TreeItem focus should call focus on treeitem ref" time="0.001" classname="should call focus on treeitem ref">
    </testcase>
  </testsuite>
  <testsuite name="TreeViewDataSource" timestamp="2019-01-26T00:12:32" tests="9" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/TreeView/TreeView.js" failures="0" time="0.016">
    <testcase name="TreeViewDataSource should load data from a datasource" time="0.001" classname="should load data from a datasource">
    </testcase>
    <testcase name="TreeViewDataSource should emit event after load" time="0" classname="should emit event after load">
    </testcase>
    <testcase name="TreeViewDataSource should getTreeItem" time="0.002" classname="should getTreeItem">
    </testcase>
    <testcase name="TreeViewDataSource should expand an item" time="0.003" classname="should expand an item">
    </testcase>
    <testcase name="TreeViewDataSource should expand an item using isItemEqual comparator" time="0.003" classname="should expand an item using isItemEqual comparator">
    </testcase>
    <testcase name="TreeViewDataSource should collapse an item" time="0.002" classname="should collapse an item">
    </testcase>
    <testcase name="TreeViewDataSource should collapse an item using isItemEqual comparator" time="0.001" classname="should collapse an item using isItemEqual comparator">
    </testcase>
    <testcase name="TreeViewDataSource should show expanded children when parent is collapsed and expanded" time="0.002" classname="should show expanded children when parent is collapsed and expanded">
    </testcase>
    <testcase name="TreeViewDataSource should toggle an item" time="0.002" classname="should toggle an item">
    </testcase>
  </testsuite>
  <testsuite name="insertChild" timestamp="2019-01-26T00:12:32" tests="5" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/TreeView/TreeView.js" failures="0" time="0.004">
    <testcase name="TreeViewDataSource insertChild should do nothing if children not yet loaded" time="0.001" classname="should do nothing if children not yet loaded">
    </testcase>
    <testcase name="TreeViewDataSource insertChild should insert a child" time="0.001" classname="should insert a child">
    </testcase>
    <testcase name="TreeViewDataSource insertChild should append a child" time="0.001" classname="should append a child">
    </testcase>
    <testcase name="TreeViewDataSource insertChild should insert into an empty item" time="0.001" classname="should insert into an empty item">
    </testcase>
    <testcase name="TreeViewDataSource insertChild should append to the root" time="0" classname="should append to the root">
    </testcase>
  </testsuite>
  <testsuite name="removeChild" timestamp="2019-01-26T00:12:32" tests="4" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/TreeView/TreeView.js" failures="0" time="0.003">
    <testcase name="TreeViewDataSource removeChild should do nothing if children not yet loaded" time="0" classname="should do nothing if children not yet loaded">
    </testcase>
    <testcase name="TreeViewDataSource removeChild should remove a child" time="0.001" classname="should remove a child">
    </testcase>
    <testcase name="TreeViewDataSource removeChild should remove all nested children" time="0.001" classname="should remove all nested children">
    </testcase>
    <testcase name="TreeViewDataSource removeChild should update disclosure indicator if removing last child" time="0.001" classname="should update disclosure indicator if removing last child">
    </testcase>
  </testsuite>
  <testsuite name="removeItem" timestamp="2019-01-26T00:12:32" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/TreeView/TreeView.js" failures="0" time="0.003">
    <testcase name="TreeViewDataSource removeItem should remove an item" time="0.003" classname="should remove an item">
    </testcase>
  </testsuite>
  <testsuite name="moveChild" timestamp="2019-01-26T00:12:32" tests="5" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/TreeView/TreeView.js" failures="0" time="0.007">
    <testcase name="TreeViewDataSource moveChild should move an item" time="0.002" classname="should move an item">
    </testcase>
    <testcase name="TreeViewDataSource moveChild should reload source parent when moving the last item" time="0.002" classname="should reload source parent when moving the last item">
    </testcase>
    <testcase name="TreeViewDataSource moveChild should reload destination parent when inserting the first item" time="0.001" classname="should reload destination parent when inserting the first item">
    </testcase>
    <testcase name="TreeViewDataSource moveChild should insert into destination if source is not expanded" time="0.001" classname="should insert into destination if source is not expanded">
    </testcase>
    <testcase name="TreeViewDataSource moveChild should remove from source if destination is not expanded" time="0.001" classname="should remove from source if destination is not expanded">
    </testcase>
  </testsuite>
  <testsuite name="moveItem" timestamp="2019-01-26T00:12:32" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/TreeView/TreeView.js" failures="0" time="0.001">
    <testcase name="TreeViewDataSource moveItem should move an item" time="0.001" classname="should move an item">
    </testcase>
  </testsuite>
  <testsuite name="TreeView" timestamp="2019-01-26T00:12:32" tests="3" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/TreeView/TreeView.js" failures="0" time="0.213">
    <testcase name="TreeView should render an EditableCollectionView" time="0.007" classname="should render an EditableCollectionView">
    </testcase>
    <testcase name="TreeView should render some items" time="0.103" classname="should render some items">
    </testcase>
    <testcase name="TreeView should work with a TreeDataSource" time="0.103" classname="should work with a TreeDataSource">
    </testcase>
  </testsuite>
  <testsuite name="Accessibility implementation" timestamp="2019-01-26T00:12:32" tests="3" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/TreeView/TreeView.js" failures="0" time="0.068">
    <testcase name="TreeView Accessibility implementation should have role=&quot;tree&quot;" time="0.001" classname="should have role=&quot;tree&quot;">
    </testcase>
    <testcase name="TreeView Accessibility implementation should include aria-multiselectable prop when allowsSelection and allowsMultipleSelection are true" time="0.004" classname="should include aria-multiselectable prop when allowsSelection and allowsMultipleSelection are true">
    </testcase>
    <testcase name="TreeView Accessibility implementation should render items when mounted" time="0.063" classname="should render items when mounted">
    </testcase>
  </testsuite>
  <testsuite name="renderItemView" timestamp="2019-01-26T00:12:32" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/TreeView/TreeView.js" failures="0" time="0.002">
    <testcase name="TreeView renderItemView should render a toggleable tree item" time="0.002" classname="should render a toggleable tree item">
    </testcase>
  </testsuite>
  <testsuite name="getDropTarget" timestamp="2019-01-26T00:12:32" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/TreeView/TreeView.js" failures="0" time="0.003">
    <testcase name="TreeView getDropTarget should call the delegate shouldAcceptDrop function" time="0.003" classname="should call the delegate shouldAcceptDrop function">
    </testcase>
  </testsuite>
  <testsuite name="onToggle event callback" timestamp="2019-01-26T00:12:32" tests="2" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/TreeView/TreeView.js" failures="0" time="0.011">
    <testcase name="TreeView onToggle event callback should fire for items with isToggleable: true &amp;&amp; hasChildren: true" time="0.008" classname="should fire for items with isToggleable: true &amp;&amp; hasChildren: true">
    </testcase>
    <testcase name="TreeView onToggle event callback should not fire for items with isToggleable: false || hasChildren: false" time="0.003" classname="should not fire for items with isToggleable: false || hasChildren: false">
    </testcase>
  </testsuite>
  <testsuite name="onKeyDown event callback" timestamp="2019-01-26T00:12:32" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/TreeView/TreeView.js" failures="0" time="0.108">
    <testcase name="TreeView onKeyDown event callback should fire for items" time="0.108" classname="should fire for items">
    </testcase>
  </testsuite>
  <testsuite name="TreeViewDelegate" timestamp="2019-01-26T00:12:33" tests="9" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/TreeView/TreeViewDelegate.js" failures="0" time="0.010000000000000002">
    <testcase name="TreeViewDelegate should proxy shouldSelectItem" time="0.001" classname="should proxy shouldSelectItem">
    </testcase>
    <testcase name="TreeViewDelegate should proxy shouldDrag" time="0.001" classname="should proxy shouldDrag">
    </testcase>
    <testcase name="TreeViewDelegate should proxy getAllowedDropOperations" time="0.002" classname="should proxy getAllowedDropOperations">
    </testcase>
    <testcase name="TreeViewDelegate should proxy prepareDragData" time="0.001" classname="should proxy prepareDragData">
    </testcase>
    <testcase name="TreeViewDelegate should set default drag data in prepareDragData" time="0.001" classname="should set default drag data in prepareDragData">
    </testcase>
    <testcase name="TreeViewDelegate should support shouldAcceptDrop" time="0.001" classname="should support shouldAcceptDrop">
    </testcase>
    <testcase name="TreeViewDelegate should proxy getDropOperation" time="0.001" classname="should proxy getDropOperation">
    </testcase>
    <testcase name="TreeViewDelegate should proxy itemsForDrop" time="0.001" classname="should proxy itemsForDrop">
    </testcase>
    <testcase name="TreeViewDelegate should proxy shouldDeleteItems" time="0.001" classname="should proxy shouldDeleteItems">
    </testcase>
  </testsuite>
  <testsuite name="Wait" timestamp="2019-01-26T00:12:33" tests="13" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Wait/Wait.js" failures="0" time="0.019">
    <testcase name="Wait default" time="0.001" classname="default">
    </testcase>
    <testcase name="Wait accessibility props" time="0" classname="accessibility props">
    </testcase>
    <testcase name="Wait accessibility props determinate" time="0" classname="accessibility props determinate">
    </testcase>
    <testcase name="Wait shows none of the circle for 0%" time="0.004" classname="shows none of the circle for 0%">
    </testcase>
    <testcase name="Wait shows quarter of the circle for 25%" time="0.003" classname="shows quarter of the circle for 25%">
    </testcase>
    <testcase name="Wait shows half the circle for 50%" time="0.003" classname="shows half the circle for 50%">
    </testcase>
    <testcase name="Wait shows quarter of the circle for 75%" time="0.003" classname="shows quarter of the circle for 75%">
    </testcase>
    <testcase name="Wait shows all of the circle for 100%" time="0.003" classname="shows all of the circle for 100%">
    </testcase>
    <testcase name="Wait supports size L" time="0" classname="supports size L">
    </testcase>
    <testcase name="Wait supports size S" time="0.001" classname="supports size S">
    </testcase>
    <testcase name="Wait supports centered" time="0" classname="supports centered">
    </testcase>
    <testcase name="Wait supports additional classNames" time="0.001" classname="supports additional classNames">
    </testcase>
    <testcase name="Wait supports additional properties" time="0" classname="supports additional properties">
    </testcase>
  </testsuite>
  <testsuite name="Well" timestamp="2019-01-26T00:12:33" tests="3" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/Well/Well.js" failures="0" time="0.001">
    <testcase name="Well supports additional classNames" time="0.001" classname="supports additional classNames">
    </testcase>
    <testcase name="Well supports additional properties" time="0" classname="supports additional properties">
    </testcase>
    <testcase name="Well supports children" time="0" classname="supports children">
    </testcase>
  </testsuite>
  <testsuite name="CollectionView" timestamp="2019-01-26T00:12:33" tests="18" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/utils/CollectionView.js" failures="0" time="1.3719999999999999">
    <testcase name="CollectionView should pass correct props to EditableCollectionView" time="0.002" classname="should pass correct props to EditableCollectionView">
    </testcase>
    <testcase name="CollectionView should render an item view using props" time="0.001" classname="should render an item view using props">
    </testcase>
    <testcase name="CollectionView should render a loading-indicator supplementary view" time="0" classname="should render a loading-indicator supplementary view">
    </testcase>
    <testcase name="CollectionView should render a empty-view supplementary view using renderEmptyView prop" time="0.001" classname="should render a empty-view supplementary view using renderEmptyView prop">
    </testcase>
    <testcase name="CollectionView should render other supplementary views using a prop" time="0.001" classname="should render other supplementary views using a prop">
    </testcase>
    <testcase name="CollectionView should reload an empty-view on update" time="0.001" classname="should reload an empty-view on update">
    </testcase>
    <testcase name="CollectionView should call performLoad on mount" time="0.108" classname="should call performLoad on mount">
    </testcase>
    <testcase name="CollectionView should call performLoad when the data source changes" time="0.206" classname="should call performLoad when the data source changes">
    </testcase>
    <testcase name="CollectionView should call performLoad when the reloadData event is emitted by the data source" time="0.205" classname="should call performLoad when the reloadData event is emitted by the data source">
    </testcase>
    <testcase name="CollectionView should call performSort on the data source when sortDescriptor prop changes" time="0.41" classname="should call performSort on the data source when sortDescriptor prop changes">
    </testcase>
    <testcase name="CollectionView should have collection ref when mounted" time="0.011" classname="should have collection ref when mounted">
    </testcase>
    <testcase name="CollectionView should render an infiniteScroll collection view" time="0.208" classname="should render an infiniteScroll collection view">
    </testcase>
    <testcase name="CollectionView should support dragging rows" time="0.105" classname="should support dragging rows">
    </testcase>
    <testcase name="CollectionView should pass the correct theme to the drag view from the context" time="0.104" classname="should pass the correct theme to the drag view from the context">
    </testcase>
    <testcase name="CollectionView should support custom drag views" time="0.003" classname="should support custom drag views">
    </testcase>
    <testcase name="CollectionView should support drag and drop onto the collection view with dropPosition=&quot;on&quot;" time="0.002" classname="should support drag and drop onto the collection view with dropPosition=&quot;on&quot;">
    </testcase>
    <testcase name="CollectionView should not highlight the collection view with dropPosition=&quot;between&quot;" time="0.001" classname="should not highlight the collection view with dropPosition=&quot;between&quot;">
    </testcase>
    <testcase name="CollectionView should highlight the collection view if empty with dropPosition=&quot;between&quot;" time="0.003" classname="should highlight the collection view if empty with dropPosition=&quot;between&quot;">
    </testcase>
  </testsuite>
  <testsuite name="FocusManager" timestamp="2019-01-26T00:12:34" tests="8" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/utils/FocusManager.js" failures="0" time="0.08700000000000001">
    <testcase name="FocusManager when ArrowDown key is pressed, focus next not disabled item" time="0.01" classname="when ArrowDown key is pressed, focus next not disabled item">
    </testcase>
    <testcase name="FocusManager when ArrowDown key is pressed on last item, focus first not disabled item" time="0.016" classname="when ArrowDown key is pressed on last item, focus first not disabled item">
    </testcase>
    <testcase name="FocusManager when ArrowUp key is pressed, focus previous not disabled item" time="0.007" classname="when ArrowUp key is pressed, focus previous not disabled item">
    </testcase>
    <testcase name="FocusManager when ArrowUp key is pressed on first item, focus last not disabled item" time="0.005" classname="when ArrowUp key is pressed on first item, focus last not disabled item">
    </testcase>
    <testcase name="FocusManager when End key is pressed, focus last not disabled item" time="0.003" classname="when End key is pressed, focus last not disabled item">
    </testcase>
    <testcase name="FocusManager when Home key is pressed, focus first not disabled item" time="0.002" classname="when Home key is pressed, focus first not disabled item">
    </testcase>
    <testcase name="FocusManager when PageDown/PageUp key is pressed, focus first item on next/previous page" time="0.041" classname="when PageDown/PageUp key is pressed, focus first item on next/previous page">
    </testcase>
    <testcase name="FocusManager should not add event handlers if disabled" time="0.003" classname="should not add event handlers if disabled">
    </testcase>
  </testsuite>
  <testsuite name="orientation=&quot;horizontal&quot;" timestamp="2019-01-26T00:12:34" tests="4" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/utils/FocusManager.js" failures="0" time="0.02">
    <testcase name="FocusManager orientation=&quot;horizontal&quot; when ArrowRight key is pressed with orientation=&quot;horizontal&quot;, focus next not disabled item" time="0.007" classname="when ArrowRight key is pressed with orientation=&quot;horizontal&quot;, focus next not disabled item">
    </testcase>
    <testcase name="FocusManager orientation=&quot;horizontal&quot; when ArrowRight key is pressed on last item, focus first not disabled item" time="0.004" classname="when ArrowRight key is pressed on last item, focus first not disabled item">
    </testcase>
    <testcase name="FocusManager orientation=&quot;horizontal&quot; when ArrowLeft key is pressed, focus previous not disabled item" time="0.006" classname="when ArrowLeft key is pressed, focus previous not disabled item">
    </testcase>
    <testcase name="FocusManager orientation=&quot;horizontal&quot; when ArrowLeft key is pressed on first item, focus last not disabled item" time="0.003" classname="when ArrowLeft key is pressed on first item, focus last not disabled item">
    </testcase>
  </testsuite>
  <testsuite name="ignorePageUpPageDown = true" timestamp="2019-01-26T00:12:34" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/utils/FocusManager.js" failures="0" time="0.006">
    <testcase name="FocusManager ignorePageUpPageDown = true should ignore PageUp and PageDown events" time="0.006" classname="should ignore PageUp and PageDown events">
    </testcase>
  </testsuite>
  <testsuite name="ignorePageUpPageDown = true" timestamp="2019-01-26T00:12:34" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/utils/FocusManager.js" failures="0" time="0.006">
    <testcase name="FocusManager ignorePageUpPageDown = true should ignore PageUp and PageDown events" time="0.006" classname="should ignore PageUp and PageDown events">
    </testcase>
  </testsuite>
  <testsuite name="onFocus" timestamp="2019-01-26T00:12:34" tests="2" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/utils/FocusManager.js" failures="0" time="0.004">
    <testcase name="FocusManager onFocus should support default manageTabIndex=true when items receive focus" time="0.002" classname="should support default manageTabIndex=true when items receive focus">
    </testcase>
    <testcase name="FocusManager onFocus should not change tabIndex when items receive focus if manageTabIndex=false" time="0.002" classname="should not change tabIndex when items receive focus if manageTabIndex=false">
    </testcase>
  </testsuite>
  <testsuite name="onBlur" timestamp="2019-01-26T00:12:34" tests="2" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/utils/FocusManager.js" failures="0" time="0.008">
    <testcase name="FocusManager onBlur should support default manageTabIndex=true when items lose focus" time="0.006" classname="should support default manageTabIndex=true when items lose focus">
    </testcase>
    <testcase name="FocusManager onBlur should not change tabIndex when items lose focus if manageTabIndex=false" time="0.002" classname="should not change tabIndex when items lose focus if manageTabIndex=false">
    </testcase>
  </testsuite>
  <testsuite name="autoFocus" timestamp="2019-01-26T00:12:34" tests="2" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/utils/FocusManager.js" failures="0" time="0.079">
    <testcase name="FocusManager autoFocus should set focus the first item by default when component mounts" time="0.023" classname="should set focus the first item by default when component mounts">
    </testcase>
    <testcase name="FocusManager autoFocus should set focus the first selected item when component mounts if selectedItemSelector is defined" time="0.056" classname="should set focus the first selected item when component mounts if selectedItemSelector is defined">
    </testcase>
  </testsuite>
  <testsuite name="typeToSelect" timestamp="2019-01-26T00:12:34" tests="3" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/utils/FocusManager.js" failures="0" time="1.053">
    <testcase name="FocusManager typeToSelect should be false by default" time="0.001" classname="should be false by default">
    </testcase>
    <testcase name="FocusManager typeToSelect should add onKeyPress event handler if true" time="0.002" classname="should add onKeyPress event handler if true">
    </testcase>
    <testcase name="FocusManager typeToSelect should navigate between items when characters are typed" time="1.05" classname="should navigate between items when characters are typed">
    </testcase>
  </testsuite>
  <testsuite name="stopPropagation of events" timestamp="2019-01-26T00:12:35" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/utils/FocusManager.js" failures="0" time="0.012">
    <testcase name="FocusManager stopPropagation of events should not execute FocusManager event handlers" time="0.012" classname="should not execute FocusManager event handlers">
    </testcase>
  </testsuite>
  <testsuite name="includeSelf" timestamp="2019-01-26T00:12:35" tests="4" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/utils/FocusManager.js" failures="0" time="0.022">
    <testcase name="FocusManager includeSelf when ArrowRight key is pressed with orientation=&quot;horizontal&quot;, focus next not disabled item" time="0.008" classname="when ArrowRight key is pressed with orientation=&quot;horizontal&quot;, focus next not disabled item">
    </testcase>
    <testcase name="FocusManager includeSelf when ArrowRight key is pressed on last item, focus first not disabled item" time="0.004" classname="when ArrowRight key is pressed on last item, focus first not disabled item">
    </testcase>
    <testcase name="FocusManager includeSelf when ArrowLeft key is pressed, focus previous not disabled item" time="0.007" classname="when ArrowLeft key is pressed, focus previous not disabled item">
    </testcase>
    <testcase name="FocusManager includeSelf when ArrowLeft key is pressed on first item, focus last not disabled item" time="0.003" classname="when ArrowLeft key is pressed on first item, focus last not disabled item">
    </testcase>
  </testsuite>
  <testsuite name="LiveRegionAnnouncer" timestamp="2019-01-26T00:12:35" tests="2" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/utils/LiveRegionAnnouncer.js" failures="0" time="0.011">
    <testcase name="LiveRegionAnnouncer should set polite messages" time="0.005" classname="should set polite messages">
    </testcase>
    <testcase name="LiveRegionAnnouncer should set assertive messages" time="0.006" classname="should set assertive messages">
    </testcase>
  </testsuite>
  <testsuite name="LiveRegionAnnouncer" timestamp="2019-01-26T00:12:35" tests="0" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/utils/LiveRegionAnnouncer.js" failures="0" time="0">
  </testsuite>
  <testsuite name="static method getInstance" timestamp="2019-01-26T00:12:35" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/utils/LiveRegionAnnouncer.js" failures="0" time="0.003">
    <testcase name="LiveRegionAnnouncer static method getInstance should create a LiveRegionAnnouncer instance" time="0.003" classname="should create a LiveRegionAnnouncer instance">
    </testcase>
  </testsuite>
  <testsuite name="static method destroyInstance" timestamp="2019-01-26T00:12:35" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/utils/LiveRegionAnnouncer.js" failures="0" time="0.05">
    <testcase name="LiveRegionAnnouncer static method destroyInstance should destroy a LiveRegionAnnouncer instance" time="0.05" classname="should destroy a LiveRegionAnnouncer instance">
    </testcase>
  </testsuite>
  <testsuite name="LiveRegionMessage" timestamp="2019-01-26T00:12:35" tests="7" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/utils/LiveRegionAnnouncer.js" failures="0" time="0.016">
    <testcase name="LiveRegionMessage should announce assertive messages on mount" time="0.002" classname="should announce assertive messages on mount">
    </testcase>
    <testcase name="LiveRegionMessage should announce assertive messages on update" time="0.003" classname="should announce assertive messages on update">
    </testcase>
    <testcase name="LiveRegionMessage should announce polite messages on mount" time="0.001" classname="should announce polite messages on mount">
    </testcase>
    <testcase name="LiveRegionMessage should announce polite messages on update" time="0.002" classname="should announce polite messages on update">
    </testcase>
    <testcase name="LiveRegionMessage should broadcast clearall message if clearOnUnmount is set to true" time="0.004" classname="should broadcast clearall message if clearOnUnmount is set to true">
    </testcase>
    <testcase name="LiveRegionMessage should not broadcast clearall message if clearOnUnmount is set to false" time="0.002" classname="should not broadcast clearall message if clearOnUnmount is set to false">
    </testcase>
    <testcase name="LiveRegionMessage should not broadcast clearall message if clearOnUnmount is omitted" time="0.002" classname="should not broadcast clearall message if clearOnUnmount is omitted">
    </testcase>
  </testsuite>
  <testsuite name="LiveRegion" timestamp="2019-01-26T00:12:35" tests="3" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/utils/LiveRegionAnnouncer.js" failures="0" time="0.008">
    <testcase name="LiveRegion should render LiveRegion containing 4 MessageBlocks" time="0.001" classname="should render LiveRegion containing 4 MessageBlocks">
    </testcase>
    <testcase name="LiveRegion should alternate assertive messages" time="0.003" classname="should alternate assertive messages">
    </testcase>
    <testcase name="LiveRegion should alternate polite messages" time="0.004" classname="should alternate polite messages">
    </testcase>
  </testsuite>
  <testsuite name="array utils" timestamp="2019-01-26T00:12:35" tests="0" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/utils/array.js" failures="0" time="0">
  </testsuite>
  <testsuite name="arraysEqual" timestamp="2019-01-26T00:12:35" tests="2" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/utils/array.js" failures="0" time="0.002">
    <testcase name="array utils arraysEqual should return true when the arrays are equal" time="0.002" classname="should return true when the arrays are equal">
    </testcase>
    <testcase name="array utils arraysEqual should return false when the arrays are not equal" time="0" classname="should return false when the arrays are not equal">
    </testcase>
  </testsuite>
  <testsuite name="interpretKeyboardEvent" timestamp="2019-01-26T00:12:35" tests="0" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/utils/events.js" failures="0" time="0">
  </testsuite>
  <testsuite name="keydown" timestamp="2019-01-26T00:12:35" tests="0" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/utils/events.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Enter" timestamp="2019-01-26T00:12:35" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/utils/events.js" failures="0" time="0.001">
    <testcase name="interpretKeyboardEvent keydown Enter should call onSelectFocused" time="0.001" classname="should call onSelectFocused">
    </testcase>
  </testsuite>
  <testsuite name="Space" timestamp="2019-01-26T00:12:35" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/utils/events.js" failures="0" time="0">
    <testcase name="interpretKeyboardEvent keydown Space should call onSelectFocused" time="0" classname="should call onSelectFocused">
    </testcase>
  </testsuite>
  <testsuite name="Tab" timestamp="2019-01-26T00:12:35" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/utils/events.js" failures="0" time="0.001">
    <testcase name="interpretKeyboardEvent keydown Tab should call onTab" time="0.001" classname="should call onTab">
    </testcase>
  </testsuite>
  <testsuite name="PageUp" timestamp="2019-01-26T00:12:35" tests="2" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/utils/events.js" failures="0" time="0.001">
    <testcase name="interpretKeyboardEvent keydown PageUp should call onPageUp" time="0" classname="should call onPageUp">
    </testcase>
    <testcase name="interpretKeyboardEvent keydown PageUp or should call onFocusFirst when onPageUp is undefined" time="0.001" classname="or should call onFocusFirst when onPageUp is undefined">
    </testcase>
  </testsuite>
  <testsuite name="PageDown" timestamp="2019-01-26T00:12:36" tests="2" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/utils/events.js" failures="0" time="0">
    <testcase name="interpretKeyboardEvent keydown PageDown should call onPageDown" time="0" classname="should call onPageDown">
    </testcase>
    <testcase name="interpretKeyboardEvent keydown PageDown or should call onFocusLast when onPageDown is undefined" time="0" classname="or should call onFocusLast when onPageDown is undefined">
    </testcase>
  </testsuite>
  <testsuite name="Home" timestamp="2019-01-26T00:12:36" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/utils/events.js" failures="0" time="0">
    <testcase name="interpretKeyboardEvent keydown Home should call onFocusFirst" time="0" classname="should call onFocusFirst">
    </testcase>
  </testsuite>
  <testsuite name="End" timestamp="2019-01-26T00:12:36" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/utils/events.js" failures="0" time="0">
    <testcase name="interpretKeyboardEvent keydown End should call onFocusLast" time="0" classname="should call onFocusLast">
    </testcase>
  </testsuite>
  <testsuite name="ArrowUp" timestamp="2019-01-26T00:12:36" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/utils/events.js" failures="0" time="0.001">
    <testcase name="interpretKeyboardEvent keydown ArrowUp should call onFocusPrevious" time="0.001" classname="should call onFocusPrevious">
    </testcase>
  </testsuite>
  <testsuite name="with orientation === &quot;both&quot;" timestamp="2019-01-26T00:12:36" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/utils/events.js" failures="0" time="0">
    <testcase name="interpretKeyboardEvent keydown ArrowUp with orientation === &quot;both&quot; should call onFocusPrevious" time="0" classname="should call onFocusPrevious">
    </testcase>
  </testsuite>
  <testsuite name="with orientation === &quot;horizontal&quot;" timestamp="2019-01-26T00:12:36" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/utils/events.js" failures="0" time="0">
    <testcase name="interpretKeyboardEvent keydown ArrowUp with orientation === &quot;horizontal&quot; should not call onFocusPrevious" time="0" classname="should not call onFocusPrevious">
    </testcase>
  </testsuite>
  <testsuite name="with altKey" timestamp="2019-01-26T00:12:36" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/utils/events.js" failures="0" time="0.001">
    <testcase name="interpretKeyboardEvent keydown ArrowUp with altKey should call onAltArrowUp" time="0.001" classname="should call onAltArrowUp">
    </testcase>
  </testsuite>
  <testsuite name="Up" timestamp="2019-01-26T00:12:36" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/utils/events.js" failures="0" time="0">
    <testcase name="interpretKeyboardEvent keydown Up should call onFocusPrevious" time="0" classname="should call onFocusPrevious">
    </testcase>
  </testsuite>
  <testsuite name="with orientation === &quot;both&quot;" timestamp="2019-01-26T00:12:36" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/utils/events.js" failures="0" time="0">
    <testcase name="interpretKeyboardEvent keydown Up with orientation === &quot;both&quot; should call onFocusPrevious" time="0" classname="should call onFocusPrevious">
    </testcase>
  </testsuite>
  <testsuite name="with orientation === &quot;horizontal&quot;" timestamp="2019-01-26T00:12:36" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/utils/events.js" failures="0" time="0">
    <testcase name="interpretKeyboardEvent keydown Up with orientation === &quot;horizontal&quot; should not call onFocusPrevious" time="0" classname="should not call onFocusPrevious">
    </testcase>
  </testsuite>
  <testsuite name="with altKey" timestamp="2019-01-26T00:12:36" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/utils/events.js" failures="0" time="0">
    <testcase name="interpretKeyboardEvent keydown Up with altKey should call onAltArrowUp" time="0" classname="should call onAltArrowUp">
    </testcase>
  </testsuite>
  <testsuite name="ArrowDown" timestamp="2019-01-26T00:12:36" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/utils/events.js" failures="0" time="0">
    <testcase name="interpretKeyboardEvent keydown ArrowDown should call onFocusNext" time="0" classname="should call onFocusNext">
    </testcase>
  </testsuite>
  <testsuite name="with orientation === &quot;both&quot;" timestamp="2019-01-26T00:12:36" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/utils/events.js" failures="0" time="0">
    <testcase name="interpretKeyboardEvent keydown ArrowDown with orientation === &quot;both&quot; should call onFocusNext" time="0" classname="should call onFocusNext">
    </testcase>
  </testsuite>
  <testsuite name="with orientation === &quot;horizontal&quot;" timestamp="2019-01-26T00:12:36" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/utils/events.js" failures="0" time="0">
    <testcase name="interpretKeyboardEvent keydown ArrowDown with orientation === &quot;horizontal&quot; should not call onFocusNext" time="0" classname="should not call onFocusNext">
    </testcase>
  </testsuite>
  <testsuite name="with altKey" timestamp="2019-01-26T00:12:36" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/utils/events.js" failures="0" time="0">
    <testcase name="interpretKeyboardEvent keydown ArrowDown with altKey should call onAltArrowDown" time="0" classname="should call onAltArrowDown">
    </testcase>
  </testsuite>
  <testsuite name="Down" timestamp="2019-01-26T00:12:36" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/utils/events.js" failures="0" time="0">
    <testcase name="interpretKeyboardEvent keydown Down should call onFocusNext" time="0" classname="should call onFocusNext">
    </testcase>
  </testsuite>
  <testsuite name="with orientation === &quot;both&quot;" timestamp="2019-01-26T00:12:36" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/utils/events.js" failures="0" time="0">
    <testcase name="interpretKeyboardEvent keydown Down with orientation === &quot;both&quot; should call onFocusNext" time="0" classname="should call onFocusNext">
    </testcase>
  </testsuite>
  <testsuite name="with orientation === &quot;horizontal&quot;" timestamp="2019-01-26T00:12:36" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/utils/events.js" failures="0" time="0">
    <testcase name="interpretKeyboardEvent keydown Down with orientation === &quot;horizontal&quot; should not call onFocusNext" time="0" classname="should not call onFocusNext">
    </testcase>
  </testsuite>
  <testsuite name="with altKey" timestamp="2019-01-26T00:12:36" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/utils/events.js" failures="0" time="0">
    <testcase name="interpretKeyboardEvent keydown Down with altKey should call onAltArrowDown" time="0" classname="should call onAltArrowDown">
    </testcase>
  </testsuite>
  <testsuite name="ArrowLeft" timestamp="2019-01-26T00:12:36" tests="0" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/utils/events.js" failures="0" time="0">
  </testsuite>
  <testsuite name="with orientation === &quot;vertical&quot;" timestamp="2019-01-26T00:12:36" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/utils/events.js" failures="0" time="0">
    <testcase name="interpretKeyboardEvent keydown ArrowLeft with orientation === &quot;vertical&quot; should not call onFocusPrevious" time="0" classname="should not call onFocusPrevious">
    </testcase>
  </testsuite>
  <testsuite name="with orientation === &quot;both&quot;" timestamp="2019-01-26T00:12:36" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/utils/events.js" failures="0" time="0">
    <testcase name="interpretKeyboardEvent keydown ArrowLeft with orientation === &quot;both&quot; should call onFocusPrevious" time="0" classname="should call onFocusPrevious">
    </testcase>
  </testsuite>
  <testsuite name="with orientation === &quot;horizontal&quot;" timestamp="2019-01-26T00:12:36" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/utils/events.js" failures="0" time="0">
    <testcase name="interpretKeyboardEvent keydown ArrowLeft with orientation === &quot;horizontal&quot; should call onFocusPrevious" time="0" classname="should call onFocusPrevious">
    </testcase>
  </testsuite>
  <testsuite name="Left" timestamp="2019-01-26T00:12:36" tests="0" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/utils/events.js" failures="0" time="0">
  </testsuite>
  <testsuite name="with orientation === &quot;vertical&quot;" timestamp="2019-01-26T00:12:36" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/utils/events.js" failures="0" time="0">
    <testcase name="interpretKeyboardEvent keydown Left with orientation === &quot;vertical&quot; should not call onFocusPrevious" time="0" classname="should not call onFocusPrevious">
    </testcase>
  </testsuite>
  <testsuite name="with orientation === &quot;both&quot;" timestamp="2019-01-26T00:12:36" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/utils/events.js" failures="0" time="0">
    <testcase name="interpretKeyboardEvent keydown Left with orientation === &quot;both&quot; should call onFocusPrevious" time="0" classname="should call onFocusPrevious">
    </testcase>
  </testsuite>
  <testsuite name="with orientation === &quot;horizontal&quot;" timestamp="2019-01-26T00:12:36" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/utils/events.js" failures="0" time="0">
    <testcase name="interpretKeyboardEvent keydown Left with orientation === &quot;horizontal&quot; should call onFocusPrevious" time="0" classname="should call onFocusPrevious">
    </testcase>
  </testsuite>
  <testsuite name="ArrowRight" timestamp="2019-01-26T00:12:36" tests="0" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/utils/events.js" failures="0" time="0">
  </testsuite>
  <testsuite name="with orientation === &quot;vertical&quot;" timestamp="2019-01-26T00:12:36" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/utils/events.js" failures="0" time="0">
    <testcase name="interpretKeyboardEvent keydown ArrowRight with orientation === &quot;vertical&quot; should not call onFocusNext" time="0" classname="should not call onFocusNext">
    </testcase>
  </testsuite>
  <testsuite name="with orientation === &quot;both&quot;" timestamp="2019-01-26T00:12:36" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/utils/events.js" failures="0" time="0">
    <testcase name="interpretKeyboardEvent keydown ArrowRight with orientation === &quot;both&quot; should call onFocusNext" time="0" classname="should call onFocusNext">
    </testcase>
  </testsuite>
  <testsuite name="with orientation === &quot;horizontal&quot;" timestamp="2019-01-26T00:12:36" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/utils/events.js" failures="0" time="0">
    <testcase name="interpretKeyboardEvent keydown ArrowRight with orientation === &quot;horizontal&quot; should call onFocusNext" time="0" classname="should call onFocusNext">
    </testcase>
  </testsuite>
  <testsuite name="Right" timestamp="2019-01-26T00:12:36" tests="0" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/utils/events.js" failures="0" time="0">
  </testsuite>
  <testsuite name="with orientation === &quot;vertical&quot;" timestamp="2019-01-26T00:12:36" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/utils/events.js" failures="0" time="0.001">
    <testcase name="interpretKeyboardEvent keydown Right with orientation === &quot;vertical&quot; should not call onFocusNext" time="0.001" classname="should not call onFocusNext">
    </testcase>
  </testsuite>
  <testsuite name="with orientation === &quot;both&quot;" timestamp="2019-01-26T00:12:36" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/utils/events.js" failures="0" time="0">
    <testcase name="interpretKeyboardEvent keydown Right with orientation === &quot;both&quot; should call onFocusNext" time="0" classname="should call onFocusNext">
    </testcase>
  </testsuite>
  <testsuite name="with orientation === &quot;horizontal&quot;" timestamp="2019-01-26T00:12:36" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/utils/events.js" failures="0" time="0">
    <testcase name="interpretKeyboardEvent keydown Right with orientation === &quot;horizontal&quot; should call onFocusNext" time="0" classname="should call onFocusNext">
    </testcase>
  </testsuite>
  <testsuite name="Escape" timestamp="2019-01-26T00:12:36" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/utils/events.js" failures="0" time="0.001">
    <testcase name="interpretKeyboardEvent keydown Escape should call onEscape" time="0.001" classname="should call onEscape">
    </testcase>
  </testsuite>
  <testsuite name="Esc" timestamp="2019-01-26T00:12:36" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/utils/events.js" failures="0" time="0">
    <testcase name="interpretKeyboardEvent keydown Esc should call onEscape" time="0" classname="should call onEscape">
    </testcase>
  </testsuite>
  <testsuite name="focusRing" timestamp="2019-01-26T00:12:36" tests="3" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/utils/focusRing.js" failures="0" time="0.013000000000000001">
    <testcase name="focusRing Calls super component lifecycle methods" time="0.006" classname="Calls super component lifecycle methods">
    </testcase>
    <testcase name="focusRing Restores focus-ring class to focused element when rendering after a prop or state change" time="0.004" classname="Restores focus-ring class to focused element when rendering after a prop or state change">
    </testcase>
    <testcase name="focusRing Restores focus-ring class to focused descendant element when rendering after a prop or state change" time="0.003" classname="Restores focus-ring class to focused descendant element when rendering after a prop or state change">
    </testcase>
  </testsuite>
  <testsuite name="intl utils" timestamp="2019-01-26T00:12:36" tests="6" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/utils/intl.js" failures="0" time="0.004">
    <testcase name="intl utils should default to the current browser locale" time="0" classname="should default to the current browser locale">
    </testcase>
    <testcase name="intl utils should set the locale" time="0" classname="should set the locale">
    </testcase>
    <testcase name="intl utils should setup a message formatter and get a message in the current locale" time="0.003" classname="should setup a message formatter and get a message in the current locale">
    </testcase>
    <testcase name="intl utils should fall back to english" time="0" classname="should fall back to english">
    </testcase>
    <testcase name="intl utils should format a message with variables" time="0.001" classname="should format a message with variables">
    </testcase>
    <testcase name="intl utils should throw if a string is not available" time="0" classname="should throw if a string is not available">
    </testcase>
  </testsuite>
  <testsuite name="loadingLayout" timestamp="2019-01-26T00:12:36" tests="3" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/utils/loadingLayout.js" failures="0" time="0">
    <testcase name="loadingLayout should get an empty view if the table is empty" time="0" classname="should get an empty view if the table is empty">
    </testcase>
    <testcase name="loadingLayout should get a loading indicator if the table is loading and empty" time="0" classname="should get a loading indicator if the table is loading and empty">
    </testcase>
    <testcase name="loadingLayout should get a loading indicator at the bottom if the table is loading more" time="0" classname="should get a loading indicator at the bottom if the table is loading more">
    </testcase>
  </testsuite>
  <testsuite name="moment" timestamp="2019-01-26T00:12:36" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/utils/moment-test.js" failures="0" time="0">
    <testcase name="moment isDateInRange" time="0" classname="isDateInRange">
    </testcase>
  </testsuite>
  <testsuite name="toMoment" timestamp="2019-01-26T00:12:36" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/utils/moment-test.js" failures="0" time="0.001">
    <testcase name="moment toMoment returns current date if &apos;today&apos; is specified" time="0.001" classname="returns current date if &apos;today&apos; is specified">
    </testcase>
  </testsuite>
  <testsuite name="accepts moment object" timestamp="2019-01-26T00:12:36" tests="3" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/utils/moment-test.js" failures="0" time="0">
    <testcase name="moment toMoment accepts moment object if moment is valid, returns clone" time="0" classname="if moment is valid, returns clone">
    </testcase>
    <testcase name="moment toMoment accepts moment object if moment is not valid, returns null" time="0" classname="if moment is not valid, returns null">
    </testcase>
    <testcase name="moment toMoment accepts moment object converts a date object into moment" time="0" classname="converts a date object into moment">
    </testcase>
  </testsuite>
  <testsuite name="clamp" timestamp="2019-01-26T00:12:36" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/utils/number.js" failures="0" time="0">
    <testcase name="clamp should constrain value between min and max" time="0" classname="should constrain value between min and max">
    </testcase>
  </testsuite>
  <testsuite name="snapValueToStep" timestamp="2019-01-26T00:12:36" tests="1" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/utils/number.js" failures="0" time="0.001">
    <testcase name="snapValueToStep should snap value to nearest step based on min and max" time="0.001" classname="should snap value to nearest step based on min and max">
    </testcase>
  </testsuite>
  <testsuite name="string" timestamp="2019-01-26T00:12:36" tests="2" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/utils/string-test.js" failures="0" time="0.002">
    <testcase name="string removeDiacritics" time="0" classname="removeDiacritics">
    </testcase>
    <testcase name="string getTextFromReact" time="0.002" classname="getTextFromReact">
    </testcase>
  </testsuite>
  <testsuite name="isUrl" timestamp="2019-01-26T00:12:36" tests="2" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/utils/string-test.js" failures="0" time="0.001">
    <testcase name="string isUrl matches urls" time="0.001" classname="matches urls">
    </testcase>
    <testcase name="string isUrl doesn&apos;t match icon types" time="0" classname="doesn&apos;t match icon types">
    </testcase>
  </testsuite>
  <testsuite name="normalize" timestamp="2019-01-26T00:12:36" tests="4" file="/var/jenkins_home/workspace/React_react-spectrum_master-RKFXGNGLHKJMF3ICO67FMFS2DMVIZLHJ52M35I5VIRQBWPKYCKLQ/test/utils/string-test.js" failures="0" time="0">
    <testcase name="string normalize Default: Canonically-composed form (NFC)" time="0" classname="Default: Canonically-composed form (NFC)">
    </testcase>
    <testcase name="string normalize Canonically-decomposed form (NFD)" time="0" classname="Canonically-decomposed form (NFD)">
    </testcase>
    <testcase name="string normalize Compatibly-composed (NFKC)" time="0" classname="Compatibly-composed (NFKC)">
    </testcase>
    <testcase name="string normalize Compatibly-composed (NFKD)" time="0" classname="Compatibly-composed (NFKD)">
    </testcase>
  </testsuite>
</testsuites>