'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class;

var _autobindDecorator = require('autobind-decorator');

var _autobindDecorator2 = _interopRequireDefault(_autobindDecorator);

var _number = require('../../utils/number');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _createId = require('../../utils/createId');

var _createId2 = _interopRequireDefault(_createId);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

if (process.env.SCALE_MEDIUM && process.env.SCALE_LARGE) {
  require('../../spectrum-css/slider/index.css');

  require('../../spectrum-css/slider/index-diff.css');
} else if (process.env.SCALE_LARGE) {
  require('../../spectrum-css/slider/index-lg.css');
} else {
  require('../../spectrum-css/slider/index.css');
}

if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHT) require('../../spectrum-css/slider/multiStops/light.css');
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARK) require('../../spectrum-css/slider/multiStops/dark.css');
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHTEST) require('../../spectrum-css/slider/multiStops/lightest.css');
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARKEST) require('../../spectrum-css/slider/multiStops/darkest.css');


var LABEL_POSTFIX = '-label';
var DRAGGED_BODY_CLASS_NAME = 'u-isGrabbing';

var Dial = (0, _autobindDecorator2.default)(_class = function (_React$Component) {
  _inherits(Dial, _React$Component);

  function Dial(props) {
    _classCallCheck(this, Dial);

    var _this = _possibleConstructorReturn(this, (Dial.__proto__ || Object.getPrototypeOf(Dial)).call(this, props));

    _this.state = {
      isDragging: false,
      isFocused: false
    };

    _this.dialId = (0, _createId2.default)();
    _this.state.startValue = _this.getStartValueFromProps(props);
    return _this;
  }

  _createClass(Dial, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(props) {
      var startValue = this.getStartValueFromProps(props);
      if (startValue != null) {
        this.setState({ startValue: startValue });
      }
    }
  }, {
    key: 'getStartValueFromProps',
    value: function getStartValueFromProps(props) {
      // For single slider
      var startValue = props.value == null ? props.defaultValue : props.value;
      if (startValue == null && (this.state.startValue == null || this.props.max !== props.max || this.props.min !== props.min)) {
        startValue = props.min + (props.max - props.min) / 2;
      }
      return startValue;
    }
  }, {
    key: 'onMouseDown',
    value: function onMouseDown(e) {
      // stop propagation of event up to .spectrum-Dial-controls
      e.stopPropagation();

      if (this.input) {
        this.input.focus();
      }

      this.setState({
        sliderHandle: null,
        isMouseUp: false,
        isDragging: true
      });

      window.addEventListener('mouseup', this.onMouseUp);
      window.addEventListener('mousemove', this.onMouseMove);

      document.body.classList.add(DRAGGED_BODY_CLASS_NAME);
    }
  }, {
    key: 'onMouseUp',
    value: function onMouseUp(e) {
      var _this2 = this;

      var isDragging = this.state.isDragging;

      // Blur the input so that focused styling is removed with mouse/touch interaction.

      if (this.input && isDragging) {
        this.input.blur();
      }

      this.setState({
        isMouseUp: true,
        isDragging: false
      }, function () {
        // Restore focus to the input so that keyboard interaction will continue to work.
        if (_this2.input) {
          _this2.input.focus();
        }
      });

      if (this.props.onChangeEnd) {
        this.props.onChangeEnd(this.state.startValue);
      }

      window.removeEventListener('mouseup', this.onMouseUp);
      window.removeEventListener('mousemove', this.onMouseMove);

      document.body.classList.remove(DRAGGED_BODY_CLASS_NAME);
    }
  }, {
    key: 'calculateHandlePosition',
    value: function calculateHandlePosition(e) {
      var _props = this.props,
          min = _props.min,
          max = _props.max,
          step = _props.step;


      var rect = this.dom.getBoundingClientRect();
      var minOffset = rect.top;
      var offset = e.clientY;
      var size = rect.height;

      // Compute percentage
      var percent = (offset - minOffset) / size;
      percent = 1 - (0, _number.clamp)(percent, 0, 1);

      // Compute real value based in min and max, and snap to nearest step.
      var value = min + (max - min) * percent;
      if (step) {
        value = Math.round(value / step) * step;
      }

      return value;
    }
  }, {
    key: 'onMouseMove',
    value: function onMouseMove(e) {
      e.preventDefault();

      var value = this.calculateHandlePosition(e);
      this.updateValues(value);
    }
  }, {
    key: 'updateValues',
    value: function updateValues(startValue) {
      var _props2 = this.props,
          min = _props2.min,
          max = _props2.max,
          step = _props2.step,
          onChange = _props2.onChange;


      startValue = (0, _number.snapValueToStep)(startValue, min, max, step);

      if (onChange && startValue !== this.state.startValue) {
        onChange(startValue);
      }

      // If value is not set in props (uncontrolled component), set state
      if (this.props.value == null) {
        this.setState({ startValue: startValue, isFocused: !this.state.isMouseUp });
      }
    }
  }, {
    key: 'onChange',
    value: function onChange(e) {
      var startValue = this.state.startValue;

      var inputValue = +e.target.value;
      if (inputValue !== startValue) {
        this.updateValues(inputValue);
      }
    }
  }, {
    key: 'onFocus',
    value: function onFocus() {
      this.setState({
        isFocused: !this.state.isMouseUp,
        isMouseUp: false
      });
    }
  }, {
    key: 'onBlur',
    value: function onBlur() {
      this.setState({
        isFocused: false
      });
    }
  }, {
    key: 'onClickValue',
    value: function onClickValue() {
      if (this.input) {
        this.input.focus();
      }
    }
  }, {
    key: 'getLabelId',
    value: function getLabelId() {
      return this.dialId + LABEL_POSTFIX;
    }
  }, {
    key: 'getInputId',
    value: function getInputId() {
      var _props$id = this.props.id,
          id = _props$id === undefined ? this.dialId : _props$id;

      return id;
    }
  }, {
    key: 'getAriaLabelledby',
    value: function getAriaLabelledby() {
      var label = this.props.label;
      var ariaLabelledby = this.props['aria-labelledby'];
      var ariaLabel = this.props['aria-label'];
      var ids = [];

      if (ariaLabelledby) {
        ids.push(ariaLabelledby);
      }

      if (label || ariaLabel) {
        ids.push(this.getLabelId());
      }

      return ids.join(' ');
    }
  }, {
    key: 'renderHandle',
    value: function renderHandle() {
      var _this3 = this;

      var _props3 = this.props,
          disabled = _props3.disabled,
          max = _props3.max,
          min = _props3.min,
          step = _props3.step,
          otherProps = _objectWithoutProperties(_props3, ['disabled', 'max', 'min', 'step']);

      var _state = this.state,
          isDragging = _state.isDragging,
          isFocused = _state.isFocused,
          startValue = _state.startValue;

      var value = startValue;
      var percent = (value - min) / (max - min);
      var ariaLabel = otherProps['aria-label'];

      return _react2.default.createElement(
        'div',
        {
          className: (0, _classnames2.default)('spectrum-Dial-handle', {
            'is-dragged': isDragging,
            'is-focused': isFocused
          }),
          style: {
            'transform': 'rotate(' + (percent * 270 - 45) + 'deg)'
          },
          role: 'presentation' },
        _react2.default.createElement('input', {
          id: this.getInputId(),
          ref: function ref(i) {
            return _this3.input = i;
          },
          type: 'range',
          className: 'spectrum-Dial-input',
          step: step,
          max: max,
          min: min,
          disabled: disabled,
          'aria-orientation': 'vertical',
          'aria-label': ariaLabel || null,
          'aria-labelledby': this.getAriaLabelledby(),
          'aria-describedby': otherProps['aria-describedby'] || null,
          'aria-valuemin': min,
          'aria-valuemax': max,
          'aria-valuetext': value,
          value: value,
          onChange: !disabled ? this.onChange : null,
          onFocus: !disabled ? this.onFocus : null,
          onBlur: !disabled ? this.onBlur : null })
      );
    }
  }, {
    key: 'render',
    value: function render() {
      var _this4 = this;

      var _props4 = this.props,
          disabled = _props4.disabled,
          _props4$id = _props4.id,
          id = _props4$id === undefined ? this.dialId : _props4$id,
          label = _props4.label,
          renderLabel = _props4.renderLabel,
          size = _props4.size,
          otherProps = _objectWithoutProperties(_props4, ['disabled', 'id', 'label', 'renderLabel', 'size']);

      var startValue = this.state.startValue;

      var sliderClasses = (0, _classnames2.default)('spectrum-Dial', this.props.className, {
        'spectrum-Dial--small': size === 'S',
        'is-disabled': disabled
      });
      var shouldRenderLabel = renderLabel && label;
      var ariaLabel = otherProps['aria-label'];
      var ariaLabelledby = this.getAriaLabelledby();
      var labelValue = startValue;

      return _react2.default.createElement(
        'div',
        {
          className: sliderClasses,
          ref: function ref(d) {
            return _this4.dom = d;
          },
          role: 'presentation' },
        (shouldRenderLabel || label && ariaLabelledby || ariaLabel) && _react2.default.createElement(
          'div',
          { className: 'spectrum-Dial-labelContainer' },
          _react2.default.createElement(
            'label',
            {
              id: this.getLabelId(),
              className: 'spectrum-Dial-label',
              htmlFor: id,
              hidden: !shouldRenderLabel || null,
              'aria-label': !otherProps['aria-labelledby'] ? ariaLabel : null },
            label
          ),
          shouldRenderLabel && _react2.default.createElement(
            'div',
            { className: 'spectrum-Dial-value', role: 'textbox', 'aria-readonly': 'true', 'aria-labelledby': ariaLabelledby, onClick: !disabled ? this.onClickValue : null },
            labelValue
          )
        ),
        _react2.default.createElement(
          'div',
          {
            className: 'spectrum-Dial-controls',
            role: 'presentation',
            onMouseDown: !disabled ? this.onMouseDown : null },
          this.renderHandle()
        )
      );
    }
  }]);

  return Dial;
}(_react2.default.Component)) || _class;

Dial.propTypes = {
  id: _propTypes2.default.string,
  min: _propTypes2.default.number,
  max: _propTypes2.default.number,
  step: _propTypes2.default.number,
  disabled: _propTypes2.default.bool,
  renderLabel: _propTypes2.default.bool,
  label: _propTypes2.default.node,
  size: _propTypes2.default.oneOf([null, 'S', 'L']),
  onChange: _propTypes2.default.func
};
Dial.defaultProps = {
  min: 0,
  max: 100,
  step: 0,
  disabled: false,
  renderLabel: false,
  label: null,
  size: null,
  onChange: function onChange() {}
};
exports.default = Dial;