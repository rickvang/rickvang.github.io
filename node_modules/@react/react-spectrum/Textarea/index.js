'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class;

var _autobindDecorator = require('autobind-decorator');

var _autobindDecorator2 = _interopRequireDefault(_autobindDecorator);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Textfield = require('../Textfield');

var _Textfield2 = _interopRequireDefault(_Textfield);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Textarea = (0, _autobindDecorator2.default)(_class = function (_Component) {
  _inherits(Textarea, _Component);

  function Textarea() {
    _classCallCheck(this, Textarea);

    return _possibleConstructorReturn(this, (Textarea.__proto__ || Object.getPrototypeOf(Textarea)).apply(this, arguments));
  }

  _createClass(Textarea, [{
    key: 'handleHeightChange',
    value: function handleHeightChange(value, e) {
      var _props = this.props,
          quiet = _props.quiet,
          onChange = _props.onChange;


      if (typeof onChange === 'function') {
        onChange(value, e);
      }

      if (quiet) {
        e.target.style.height = 'auto';
        e.target.style.height = e.target.scrollHeight + 'px';
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          quiet = _props2.quiet,
          otherProps = _objectWithoutProperties(_props2, ['quiet']);

      return _react2.default.createElement(_Textfield2.default, _extends({}, otherProps, {
        multiLine: true,
        quiet: quiet,
        onChange: this.handleHeightChange }));
    }
  }]);

  return Textarea;
}(_react.Component)) || _class;

Textarea.propTypes = {
  /** Custom CSS class to add to the textarea */
  className: _propTypes2.default.string,

  /** Whether to disable the textarea */
  disabled: _propTypes2.default.bool,

  /** Whether to show the warning icon and red border */
  invalid: _propTypes2.default.bool,

  /** Function called when focus is taken away from the textarea */
  onBlur: _propTypes2.default.func,

  /** Function called when the textarea value is changed */
  onChange: _propTypes2.default.func,

  /** Function called when focus is put on the textarea */
  onFocus: _propTypes2.default.func,

  /** String to show in the textarea when nothing has been input */
  placeholder: _propTypes2.default.string,

  /** Whether the textarea should render using a quiet variant */
  quiet: _propTypes2.default.bool,

  /** Whether the textarea can only be read */
  readOnly: _propTypes2.default.bool,

  /** Whether the textarea requires user input (shows warning if empty) */
  required: _propTypes2.default.bool
};
Textarea.defaultProps = {
  disabled: false,
  invalid: false,
  quiet: false,
  readOnly: false,
  required: false
};
exports.default = Textarea;