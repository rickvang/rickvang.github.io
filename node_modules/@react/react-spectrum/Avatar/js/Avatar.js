'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = Avatar;

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _filterDOMProps = require('../../utils/filterDOMProps');

var _filterDOMProps2 = _interopRequireDefault(_filterDOMProps);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

if (process.env.SCALE_MEDIUM && process.env.SCALE_LARGE) {
  require('../../spectrum-css/avatar/index.css');

  require('../../spectrum-css/avatar/index-diff.css');
} else if (process.env.SCALE_LARGE) {
  require('../../spectrum-css/avatar/index-lg.css');
} else {
  require('../../spectrum-css/avatar/index.css');
}

if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHT) require('../../spectrum-css/avatar/multiStops/light.css');
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARK) require('../../spectrum-css/avatar/multiStops/dark.css');
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHTEST) require('../../spectrum-css/avatar/multiStops/lightest.css');
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARKEST) require('../../spectrum-css/avatar/multiStops/darkest.css');
function Avatar(_ref) {
  var src = _ref.src,
      alt = _ref.alt,
      disabled = _ref.disabled,
      className = _ref.className,
      otherProps = _objectWithoutProperties(_ref, ['src', 'alt', 'disabled', 'className']);

  className = (0, _classnames2.default)('spectrum-Avatar', {
    'is-disabled': disabled
  }, className);

  return _react2.default.createElement('img', _extends({}, (0, _filterDOMProps2.default)(otherProps), {
    src: src,
    alt: alt,
    className: className }));
}

Avatar.propTypes = {
  /**
   * url of image to load, same that any html <img> tag would accept
   */
  src: _propTypes2.default.string,

  /**
   * alt text to display for screen readers or if the image doesn't load
   */
  alt: _propTypes2.default.string,

  /**
   * Greys out the avatar
   */
  disabled: _propTypes2.default.bool,

  /**
   * String of custom class names to add to the top level dom element of Avatar
   */
  className: _propTypes2.default.string
};

Avatar.defaultProps = {
  alt: ''
};