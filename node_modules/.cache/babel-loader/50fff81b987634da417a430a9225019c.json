{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _events = require('events');\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar KEY = 0;\n\nvar View = function (_EventEmitter) {\n  _inherits(View, _EventEmitter);\n\n  function View() {\n    _classCallCheck(this, View);\n\n    var _this = _possibleConstructorReturn(this, (View.__proto__ || Object.getPrototypeOf(View)).call(this));\n\n    _this.style = {};\n    _this.attrs = {};\n    _this.events = new Map();\n    _this.classes = new Set();\n    _this.children = new Set();\n    _this.key = KEY++;\n    _this.dirty = true;\n    _this.backendView = null;\n    return _this;\n  }\n\n  _createClass(View, [{\n    key: 'onEvent',\n    value: function onEvent(event, fn) {\n      if (!this.events.has(event)) {\n        this.events.set(event, new Set());\n      }\n\n      this.events.get(event).add(fn);\n    }\n  }, {\n    key: 'offEvent',\n    value: function offEvent(event, fn) {\n      if (this.events.has(event)) {\n        var handlers = this.events.get(event);\n        handlers.delete(fn);\n\n        if (handlers.size === 0) {\n          this.events.delete(event);\n        }\n      }\n    }\n  }, {\n    key: 'setAttribute',\n    value: function setAttribute(attribute, value) {\n      if (this.attrs[attribute] !== value) {\n        this.attrs = Object.assign({}, this.attrs, _defineProperty({}, attribute, value));\n        this.flushUpdates();\n      }\n    }\n  }, {\n    key: 'removeAttribute',\n    value: function removeAttribute(attribute) {\n      if (this.attrs[attribute] != null) {\n        this.attrs = Object.assign({}, this.attrs);\n        delete this.attrs[attribute];\n        this.flushUpdates();\n      }\n    }\n  }, {\n    key: 'css',\n    value: function css() {\n      var style = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.style = Object.assign({}, this.style, style);\n      this.flushUpdates();\n    }\n  }, {\n    key: 'addChild',\n    value: function addChild(view) {\n      this.dirty = true;\n      this.children.add(view);\n    }\n  }, {\n    key: 'removeChild',\n    value: function removeChild(view) {\n      this.dirty = true;\n      this.children.delete(view);\n    }\n  }, {\n    key: 'replaceChildren',\n    value: function replaceChildren(view) {\n      this.dirty = true;\n      this.children.clear();\n      this.children.add(view);\n    }\n  }, {\n    key: 'addClass',\n    value: function addClass() {\n      var className = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = className.split(' ')[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var name = _step.value;\n          this.classes.add(name);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      this.flushUpdates();\n    }\n  }, {\n    key: 'removeClass',\n    value: function removeClass() {\n      var className = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = className.split(' ')[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var name = _step2.value;\n          this.classes.delete(name);\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      this.flushUpdates();\n    }\n  }, {\n    key: 'getClassName',\n    value: function getClassName() {\n      return Array.from(this.classes).join(' ');\n    }\n  }, {\n    key: 'renderBackendView',\n    value: function renderBackendView(backend) {\n      if (!this.backendView) {\n        this.backendView = backend.createView(this);\n      }\n\n      this._updateChildren();\n\n      return this.backendView.render(backend);\n    }\n  }, {\n    key: 'renderChildren',\n    value: function renderChildren(context) {// Do nothing by default\n    }\n  }, {\n    key: '_updateChildren',\n    value: function _updateChildren() {\n      if (this.backendView && this.dirty) {\n        this.renderChildren(this.backendView.getRenderContext());\n      }\n    }\n  }, {\n    key: 'flushUpdates',\n    value: function flushUpdates(fn) {\n      this.dirty = true;\n\n      if (this.backendView) {\n        this._updateChildren();\n\n        this.backendView.flushUpdates(fn);\n      } else if (fn) {\n        // The view is not mounted anywhere yet, but we should\n        // still call the callback. Mostly for testing.\n        setTimeout(fn, 0);\n      }\n    }\n  }, {\n    key: 'forceStyleUpdate',\n    value: function forceStyleUpdate() {\n      if (this.backendView) {\n        this.backendView.forceStyleUpdate();\n      }\n    }\n  }, {\n    key: 'getRect',\n    value: function getRect() {\n      return this.backendView.getRect();\n    }\n  }, {\n    key: 'getSize',\n    value: function getSize() {\n      return this.backendView.getSize();\n    }\n  }, {\n    key: 'getDOMNode',\n    value: function getDOMNode() {\n      return this.backendView.getDOMNode();\n    }\n  }, {\n    key: 'triggerEvent',\n    value: function triggerEvent(event) {\n      if (this.backendView) {\n        this.backendView.triggerEvent(event);\n      }\n    }\n    /**\n     * Sets focus to backendView DOM element if it is focusable.\n     */\n\n  }, {\n    key: 'focus',\n    value: function focus() {\n      var node = this.getDOMNode();\n\n      if (node && typeof node.focus === 'function') {\n        node.focus();\n      }\n    }\n  }]);\n\n  return View;\n}(_events.EventEmitter);\n\nexports.default = View;","map":null,"metadata":{},"sourceType":"script"}