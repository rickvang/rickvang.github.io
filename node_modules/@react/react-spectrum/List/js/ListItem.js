'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class;

var _autobindDecorator = require('autobind-decorator');

var _autobindDecorator2 = _interopRequireDefault(_autobindDecorator);

var _CheckmarkMedium = require('../../Icon/core/CheckmarkMedium');

var _CheckmarkMedium2 = _interopRequireDefault(_CheckmarkMedium);

var _ChevronRightMedium = require('../../Icon/core/ChevronRightMedium');

var _ChevronRightMedium2 = _interopRequireDefault(_ChevronRightMedium);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _icon = require('../../utils/icon');

var _filterDOMProps = require('../../utils/filterDOMProps');

var _filterDOMProps2 = _interopRequireDefault(_filterDOMProps);

var _events = require('../../utils/events');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * An item in a list
 */
var ListItem = (0, _autobindDecorator2.default)(_class = function (_Component) {
  _inherits(ListItem, _Component);

  function ListItem() {
    _classCallCheck(this, ListItem);

    return _possibleConstructorReturn(this, (ListItem.__proto__ || Object.getPrototypeOf(ListItem)).apply(this, arguments));
  }

  _createClass(ListItem, [{
    key: 'handleMouseEnter',
    value: function handleMouseEnter(e) {
      if (this.props.onMouseEnter) {
        this.props.onMouseEnter(e);
      } else {
        e.currentTarget.focus();
      }
    }
  }, {
    key: 'handleFocus',
    value: function handleFocus(e) {
      if (this.props.onFocus) {
        this.props.onFocus(e);
      }
    }
  }, {
    key: 'handleBlur',
    value: function handleBlur(e) {
      if (this.props.onBlur) {
        this.props.onBlur(e);
      }
    }
  }, {
    key: 'onSelectFocused',
    value: function onSelectFocused(e) {
      e.preventDefault();

      if (this.props.onClick) {
        this.props.onClick(e);
      }

      if (this.props.onSelect) {
        this.props.onSelect(this.props.value, e);
      }
    }
  }, {
    key: 'onKeyDown',
    value: function onKeyDown(e) {
      var _props = this.props,
          onKeyDown = _props.onKeyDown,
          disabled = _props.disabled;

      if (onKeyDown) {
        onKeyDown(e);
      }
      if (!disabled) {
        _events.interpretKeyboardEvent.call(this, e);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          icon = _props2.icon,
          label = _props2.label,
          className = _props2.className,
          children = _props2.children,
          selected = _props2.selected,
          disabled = _props2.disabled,
          focused = _props2.focused,
          hasNestedMenu = _props2.hasNestedMenu,
          _props2$tabIndex = _props2.tabIndex,
          tabIndex = _props2$tabIndex === undefined ? 0 : _props2$tabIndex,
          _props2$role = _props2.role,
          role = _props2$role === undefined ? 'option' : _props2$role,
          otherProps = _objectWithoutProperties(_props2, ['icon', 'label', 'className', 'children', 'selected', 'disabled', 'focused', 'hasNestedMenu', 'tabIndex', 'role']);

      delete otherProps.value;

      return _react2.default.createElement(
        'li',
        _extends({}, (0, _filterDOMProps2.default)(otherProps), {
          className: (0, _classnames2.default)('spectrum-Menu-item', {
            'is-selected': selected,
            'is-disabled': disabled,
            'is-focused': focused
          }, className),
          onKeyDown: this.onKeyDown,
          onMouseEnter: disabled ? null : this.handleMouseEnter,
          onFocus: disabled ? null : this.handleFocus,
          onClick: disabled ? null : this.onSelectFocused,
          onBlur: this.handleBlur,
          tabIndex: !disabled ? tabIndex : null,
          role: role,
          'aria-checked': role === 'menuitemcheckbox' || role === 'menuitemradio' ? !!selected : null,
          'aria-selected': role === 'option' ? !!selected || !!focused : null,
          'aria-disabled': disabled || null }),
        (0, _icon.cloneIcon)(icon, {
          size: 'S'
        }),
        _react2.default.createElement(
          'span',
          { className: 'spectrum-Menu-itemLabel' },
          label || children
        ),
        selected && _react2.default.createElement(_CheckmarkMedium2.default, { size: null, className: 'spectrum-Menu-checkmark' }),
        hasNestedMenu && _react2.default.createElement(_ChevronRightMedium2.default, { className: 'spectrum-Menu-chevron' })
      );
    }
  }]);

  return ListItem;
}(_react.Component)) || _class;

ListItem.defaultProps = {
  selected: false,
  disabled: false,
  onSelect: function onSelect() {}
};
exports.default = ListItem;