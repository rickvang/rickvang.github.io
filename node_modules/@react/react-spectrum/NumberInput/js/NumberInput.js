'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class;

var _autobindDecorator = require('autobind-decorator');

var _autobindDecorator2 = _interopRequireDefault(_autobindDecorator);

var _Button = require('../../Button');

var _Button2 = _interopRequireDefault(_Button);

var _events = require('../../utils/events');

var _ChevronDownSmall = require('../../Icon/core/ChevronDownSmall');

var _ChevronDownSmall2 = _interopRequireDefault(_ChevronDownSmall);

var _ChevronUpSmall = require('../../Icon/core/ChevronUpSmall');

var _ChevronUpSmall2 = _interopRequireDefault(_ChevronUpSmall);

var _number = require('../../utils/number');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _createId = require('../../utils/createId');

var _createId2 = _interopRequireDefault(_createId);

var _filterDOMProps = require('../../utils/filterDOMProps');

var _filterDOMProps2 = _interopRequireDefault(_filterDOMProps);

var _InputGroup = require('../../InputGroup');

var _InputGroup2 = _interopRequireDefault(_InputGroup);

var _LiveRegionAnnouncer = require('../../utils/LiveRegionAnnouncer');

var _LiveRegionAnnouncer2 = _interopRequireDefault(_LiveRegionAnnouncer);

var _intl = require('../../utils/intl');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _Textfield = require('../../Textfield');

var _Textfield2 = _interopRequireDefault(_Textfield);

require('../../utils/style/index.css');

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var intlMessages = {
  'cs-CZ': _interopRequireDefault(require('./../intl/cs-CZ.json')).default,
  'da-DK': _interopRequireDefault(require('./../intl/da-DK.json')).default,
  'de-DE': _interopRequireDefault(require('./../intl/de-DE.json')).default,
  'en-US': _interopRequireDefault(require('./../intl/en-US.json')).default,
  'es-ES': _interopRequireDefault(require('./../intl/es-ES.json')).default,
  'fi-FI': _interopRequireDefault(require('./../intl/fi-FI.json')).default,
  'fr-FR': _interopRequireDefault(require('./../intl/fr-FR.json')).default,
  'it-IT': _interopRequireDefault(require('./../intl/it-IT.json')).default,
  'ja-JP': _interopRequireDefault(require('./../intl/ja-JP.json')).default,
  'ko-KR': _interopRequireDefault(require('./../intl/ko-KR.json')).default,
  'nb-NO': _interopRequireDefault(require('./../intl/nb-NO.json')).default,
  'nl-NL': _interopRequireDefault(require('./../intl/nl-NL.json')).default,
  'pl-PL': _interopRequireDefault(require('./../intl/pl-PL.json')).default,
  'pt-BR': _interopRequireDefault(require('./../intl/pt-BR.json')).default,
  'ru-RU': _interopRequireDefault(require('./../intl/ru-RU.json')).default,
  'sv-SE': _interopRequireDefault(require('./../intl/sv-SE.json')).default,
  'tr-TR': _interopRequireDefault(require('./../intl/tr-TR.json')).default,
  'zh-CN': _interopRequireDefault(require('./../intl/zh-CN.json')).default,
  'zh-TW': _interopRequireDefault(require('./../intl/zh-TW.json')).default
};

if (process.env.SCALE_MEDIUM && process.env.SCALE_LARGE) {
  require('../../spectrum-css/stepper/index.css');

  require('../../spectrum-css/stepper/index-diff.css');
} else if (process.env.SCALE_LARGE) {
  require('../../spectrum-css/stepper/index-lg.css');
} else {
  require('../../spectrum-css/stepper/index.css');
}

if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHT) require('../../spectrum-css/stepper/multiStops/light.css');
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARK) require('../../spectrum-css/stepper/multiStops/dark.css');
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHTEST) require('../../spectrum-css/stepper/multiStops/lightest.css');
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARKEST) require('../../spectrum-css/stepper/multiStops/darkest.css');


var formatMessage = (0, _intl.messageFormatter)(intlMessages);

var NumberInput = (0, _autobindDecorator2.default)(_class = function (_Component) {
  _inherits(NumberInput, _Component);

  function NumberInput(props) {
    _classCallCheck(this, NumberInput);

    var _this = _possibleConstructorReturn(this, (NumberInput.__proto__ || Object.getPrototypeOf(NumberInput)).call(this, props));

    var id = props.id,
        value = props.value,
        defaultValue = props.defaultValue;


    _this.state = {
      focused: false,
      valueInvalid: false,
      inputId: id || (0, _createId2.default)(),
      value: value || defaultValue || ''
    };
    return _this;
  }

  _createClass(NumberInput, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if ('value' in nextProps) {
        this.setState({
          value: nextProps.value || '',
          valueInvalid: this.isInputValueInvalid(nextProps.value)
        });
      }

      if ('defaultValue' in nextProps) {
        this.setState({
          valueInvalid: this.isInputValueInvalid(nextProps.defaultValue)
        });
      }
    }
  }, {
    key: 'onMouseDown',
    value: function onMouseDown(e) {
      e.preventDefault();

      // Don't shift focus to textfield when increment/decrement button is pressed on a mobile device.
      !this.flagTouchStart && this.textfield.focus();
    }

    /**
    * Keep track of when increment/decrement button is pressed on a mobile device.
    */

  }, {
    key: 'onTouchStart',
    value: function onTouchStart() {
      this.flagTouchStart = true;
    }
  }, {
    key: 'handleDecrementButtonClick',
    value: function handleDecrementButtonClick(e) {
      e.preventDefault();

      this.decrementValue();
    }
  }, {
    key: 'handleIncrementButtonClick',
    value: function handleIncrementButtonClick(e) {
      e.preventDefault();

      this.incrementValue();
    }
  }, {
    key: 'handleFocus',
    value: function handleFocus() {
      this.setState({ focused: true });
    }
  }, {
    key: 'handleBlur',
    value: function handleBlur() {
      this.flagTouchStart = false;
      this.setState({ focused: false });
      _LiveRegionAnnouncer2.default.clearMessage();
    }
  }, {
    key: 'handleInputKeyDown',
    value: function handleInputKeyDown(e) {
      switch (e.keyCode) {
        case 38: // up arrow
        case 33:
          // page up
          e.preventDefault();
          this.incrementValue();
          break;
        case 40: // down arrow
        case 34:
          // page down
          e.preventDefault();
          this.decrementValue();
          break;
        case 35:
          // end
          e.preventDefault();
          this.decrementToMinValue();
          break;
        case 36:
          // home
          e.preventDefault();
          this.incrementToMaxValue();
          break;
        default:
        // do nothing
      }
    }
  }, {
    key: 'handleInputScrollWheel',
    value: function handleInputScrollWheel(e) {
      e.preventDefault();

      // If the input isn't supposed to receive input, do nothing.
      if (this.isInactive()) {
        return;
      }

      if (e.deltaY < 0) {
        this.incrementValue();
      } else {
        this.decrementValue();
      }
    }
  }, {
    key: 'handleInputChange',
    value: function handleInputChange(value, e) {
      e.stopPropagation();

      var onChange = this.props.onChange;

      var valueAsNumber = value === '' ? null : +value;
      var numeric = !isNaN(valueAsNumber);

      // They may be starting to type a negative number, we don't want to broadcast this to
      // the onChange handler, but we do want to update the value state.
      var resemblesNumber = numeric || value === '-' || value === '';

      // Only dispatch a change event if it's an actual number
      if (numeric || value === '') {
        onChange(valueAsNumber);
      }

      if (resemblesNumber) {
        this.setState({
          value: value,
          valueInvalid: this.isInputValueInvalid(value)
        });
      }
    }

    /**
     * @private
     * Returns true if the Textfield cannot receive any input.
     */

  }, {
    key: 'isInactive',
    value: function isInactive() {
      var _props = this.props,
          disabled = _props.disabled,
          readOnly = _props.readOnly;
      var focused = this.state.focused;


      return disabled || readOnly || !focused;
    }

    /**
     * @private
     * Adds step number to the value number so long as it stays within min/max (if they are defined).
     * If value is undefined, sets it to the step.
     */

  }, {
    key: 'incrementValue',
    value: function incrementValue() {
      var _props2 = this.props,
          min = _props2.min,
          max = _props2.max,
          step = _props2.step;
      var value = this.state.value;


      if (isNaN(step)) {
        step = 1;
      }

      var newValue = +value;
      if (isNaN(newValue)) {
        newValue = max != null ? Math.min(step, max) : step;
      } else {
        newValue = (0, _number.clamp)((0, _number.handleDecimalOperation)('+', newValue, step), min, max);
      }

      this.triggerChange(newValue);
    }

    /**
     * @private
     * If max is defined, sets value to the max value.
     */

  }, {
    key: 'incrementToMaxValue',
    value: function incrementToMaxValue() {
      var max = this.props.max;

      // If the input isn't supposed to receive input, do nothing.

      if (this.isInactive()) {
        return;
      }

      if (max != null) {
        this.triggerChange(max);
      }
    }

    /**
     * @private
     * Subtracts step number from the value number so long as it stays within min/max (if they are
     * defined). If value is undefined, sets it to the step.
     */

  }, {
    key: 'decrementValue',
    value: function decrementValue() {
      var _props3 = this.props,
          min = _props3.min,
          max = _props3.max,
          step = _props3.step;
      var value = this.state.value;


      if (isNaN(step)) {
        step = 1;
      }

      var newValue = +value;
      if (isNaN(newValue)) {
        newValue = min != null ? Math.max(-step, min) : -step;
      } else {
        newValue = (0, _number.clamp)((0, _number.handleDecimalOperation)('-', newValue, step), min, max);
      }

      this.triggerChange(newValue);
    }

    /**
     * @private
     * If min is defined, sets value to the max value.
     */

  }, {
    key: 'decrementToMinValue',
    value: function decrementToMinValue() {
      var min = this.props.min;

      // If the input isn't supposed to receive input, do nothing.

      if (this.isInactive()) {
        return;
      }

      if (min != null) {
        this.triggerChange(min);
      }
    }

    /**
     * @private
     * Updates state to the new value and notifies the onChange handler.
     */

  }, {
    key: 'triggerChange',
    value: function triggerChange(newValue) {
      var onChange = this.props.onChange;
      var value = this.state.value;

      // Only trigger change event and setState if the value changed

      if (value !== newValue) {

        // Announce new value using a live region
        _LiveRegionAnnouncer2.default.announceAssertive(newValue.toString());

        this.setState({
          value: newValue,
          valueInvalid: this.isInputValueInvalid(newValue)
        });
        onChange(newValue);
      }
    }

    /**
     * @private
     * If true, the input's value is currently invalid.
     */

  }, {
    key: 'isInputValueInvalid',
    value: function isInputValueInvalid(value) {
      var _props4 = this.props,
          max = _props4.max,
          min = _props4.min;


      return value !== '' && isNaN(+value) || max !== null && value > max || min !== null && value < min;
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props5 = this.props,
          defaultValue = _props5.defaultValue,
          _props5$placeholder = _props5.placeholder,
          placeholder = _props5$placeholder === undefined ? formatMessage('Enter a number') : _props5$placeholder,
          min = _props5.min,
          max = _props5.max,
          step = _props5.step,
          _props5$decrementTitl = _props5.decrementTitle,
          decrementTitle = _props5$decrementTitl === undefined ? formatMessage('Decrement') : _props5$decrementTitl,
          _props5$incrementTitl = _props5.incrementTitle,
          incrementTitle = _props5$incrementTitl === undefined ? formatMessage('Increment') : _props5$incrementTitl,
          invalid = _props5.invalid,
          disabled = _props5.disabled,
          quiet = _props5.quiet,
          className = _props5.className,
          readOnly = _props5.readOnly,
          otherProps = _objectWithoutProperties(_props5, ['defaultValue', 'placeholder', 'min', 'max', 'step', 'decrementTitle', 'incrementTitle', 'invalid', 'disabled', 'quiet', 'className', 'readOnly']);

      var _state = this.state,
          focused = _state.focused,
          value = _state.value,
          valueInvalid = _state.valueInvalid,
          inputId = _state.inputId;


      return _react2.default.createElement(
        _InputGroup2.default,
        {
          focused: focused,
          invalid: invalid,
          quiet: quiet,
          disabled: disabled,
          className: (0, _classnames2.default)('spectrum-Stepper', 'react-spectrum-Stepper', { 'spectrum-Stepper--quiet': quiet }, className),
          role: 'group',
          'aria-label': otherProps['aria-label'] || null,
          'aria-labelledby': otherProps['aria-labelledby'] || null },
        _react2.default.createElement(_Textfield2.default, _extends({}, (0, _filterDOMProps2.default)(otherProps), {
          ref: function ref(t) {
            return _this2.textfield = t;
          },
          className: 'spectrum-Stepper-input',
          id: inputId,
          value: value,
          defaultValue: defaultValue,
          role: 'spinbutton',
          type: 'number',
          autoComplete: 'off',
          'aria-label': otherProps['aria-label'] || null,
          'aria-labelledby': otherProps['aria-labelledby'] || null,
          'aria-valuenow': value || null,
          'aria-valuetext': value || null,
          'aria-valuemin': min,
          'aria-valuemax': max,
          invalid: invalid || valueInvalid,
          step: step,
          placeholder: placeholder,
          disabled: disabled,
          readOnly: readOnly,
          quiet: quiet,
          onKeyDown: (0, _events.chain)(otherProps.onKeyDown, this.handleInputKeyDown),
          onWheel: (0, _events.chain)(otherProps.onWheel, this.handleInputScrollWheel),
          onFocus: (0, _events.chain)(otherProps.onFocus, this.handleFocus),
          onBlur: (0, _events.chain)(otherProps.onBlur, this.handleBlur),
          onChange: this.handleInputChange })),
        _react2.default.createElement(
          'span',
          {
            className: 'spectrum-Stepper-buttons',
            role: 'presentation',
            onMouseDown: this.onMouseDown,
            onMouseUp: this.onMouseUp,
            onTouchStart: this.onTouchStart },
          _react2.default.createElement(
            _Button2.default,
            {
              className: 'spectrum-Stepper-stepUp',
              type: 'button',
              tabIndex: '-1',
              'aria-controls': inputId,
              variant: 'action',
              quiet: quiet,
              title: incrementTitle,
              'aria-label': incrementTitle,
              disabled: disabled || max != null && value >= max || readOnly,
              onClick: this.handleIncrementButtonClick,
              onMouseDown: function onMouseDown(e) {
                return e.preventDefault();
              },
              onMouseUp: function onMouseUp(e) {
                return e.preventDefault();
              },
              onFocus: this.handleFocus,
              onBlur: this.handleBlur },
            _react2.default.createElement(_ChevronUpSmall2.default, { size: null, className: 'spectrum-Stepper-stepUpIcon' })
          ),
          _react2.default.createElement(
            _Button2.default,
            {
              className: 'spectrum-Stepper-stepDown',
              type: 'button',
              tabIndex: '-1',
              'aria-controls': inputId,
              variant: 'action',
              quiet: quiet,
              title: decrementTitle,
              'aria-label': decrementTitle,
              disabled: disabled || min != null && value <= min || readOnly,
              onClick: this.handleDecrementButtonClick,
              onMouseDown: function onMouseDown(e) {
                return e.preventDefault();
              },
              onMouseUp: function onMouseUp(e) {
                return e.preventDefault();
              },
              onFocus: this.handleFocus,
              onBlur: this.handleBlur },
            _react2.default.createElement(_ChevronDownSmall2.default, { size: null, className: 'spectrum-Stepper-stepDownIcon' })
          )
        )
      );
    }
  }]);

  return NumberInput;
}(_react.Component)) || _class;

NumberInput.propTypes = {
  /**
   * The default value.
   */
  defaultValue: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),

  /**
   * The input value.
   */
  value: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),

  /**
   * The minimal value.
   */
  min: _propTypes2.default.number,

  /**
   * The maximum value.
   */
  max: _propTypes2.default.number,

  /**
   * The placeholder.
   */
  placeholder: _propTypes2.default.string,

  /**
   * Increment/decrement by step based on the current value. This differs from the w3 spec,
   * which will increment/decrement to the next multiple of the current step, regardless of current value.
   */
  step: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.oneOf(['any'])]),

  /**
   * Whether the input is disabled.
   */
  disabled: _propTypes2.default.bool,

  /**
   * Whether the input is invalid. Will display a red border around the input.
   */
  invalid: _propTypes2.default.bool,

  /**
   * Whether the input is read only.
   */
  readOnly: _propTypes2.default.bool,

  /**
   * Should be a localized string, it's the tooltip and what a screenreader will announce for the decrement button.
   */
  decrementTitle: _propTypes2.default.string,

  /**
   * Should be a localized string, it's the tooltip and what a screenreader will announce for the increment button.
   */
  incrementTitle: _propTypes2.default.string,

  /**
   * The callback function when the input number is changed.
   */
  onChange: _propTypes2.default.func
};
NumberInput.defaultProps = {
  placeholder: formatMessage('Enter a number'),
  step: 1,
  disabled: false,
  invalid: false,
  readOnly: false,
  decrementTitle: formatMessage('Decrement'),
  incrementTitle: formatMessage('Increment'),
  onChange: function onChange() {}
};
exports.default = NumberInput;