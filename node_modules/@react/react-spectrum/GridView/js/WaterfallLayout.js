'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _BaseLayout2 = require('./BaseLayout');

var _BaseLayout3 = _interopRequireDefault(_BaseLayout2);

var _collectionView = require('@react/collection-view');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * A WaterfallLayout displays items with variable heights in equal-width columns,
 * similar to Pinterest.
 */
var WaterfallLayout = function (_BaseLayout) {
  _inherits(WaterfallLayout, _BaseLayout);

  function WaterfallLayout() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, WaterfallLayout);

    /** 
     * The minimum item size
     * @type {Size}
     * @default 240 x 136
     */
    var _this = _possibleConstructorReturn(this, (WaterfallLayout.__proto__ || Object.getPrototypeOf(WaterfallLayout)).call(this));

    _this.minItemSize = options.minItemSize || new _collectionView.Size(240, 136);

    /** 
     * The maximum item size.
     * @type {Size}
     * @default Infinity
     */
    _this.maxItemSize = options.maxItemSize || new _collectionView.Size(Infinity, Infinity);

    /** 
     * The margin around the grid view between the edges and the items
     * @type {Size}
     * @default 24
     */
    _this.margin = 24;

    /**
     * The minimum space required between items
     * @type {Size}
     * @default 24 x 24
     */
    _this.minSpace = options.minSpace || new _collectionView.Size(24, 24);

    /**
     * The maximum number of columns. Default is infinity.
     * @type {number}
     * @default Infinity
     */
    _this.maxColumns = options.maxColumns || Infinity;

    /**
     * The vertical padding for an item
     * @type {number}
     * @default 56
     */
    _this.itemPadding = options.itemPadding != null ? options.itemPadding : 56;

    _this.itemWidth = 0;
    _this.numColumns = 0;
    _this.layoutInfos = [];
    _this.cardType = 'standard';
    return _this;
  }

  _createClass(WaterfallLayout, [{
    key: 'getLayoutInfo',
    value: function getLayoutInfo(type, section, index) {
      return this.layoutInfos[section][index];
    }
  }, {
    key: 'getVisibleLayoutInfos',
    value: function getVisibleLayoutInfos(rect) {
      var res = [];
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this.layoutInfos[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var section = _step.value;
          var _iteratorNormalCompletion2 = true;
          var _didIteratorError2 = false;
          var _iteratorError2 = undefined;

          try {
            for (var _iterator2 = section[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
              var layoutInfo = _step2.value;

              if (layoutInfo.rect.intersects(rect)) {
                res.push(layoutInfo);
              }
            }
          } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion2 && _iterator2.return) {
                _iterator2.return();
              }
            } finally {
              if (_didIteratorError2) {
                throw _iteratorError2;
              }
            }
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return res;
    }
  }, {
    key: 'validate',
    value: function validate(invalidationContext) {
      // Compute the number of columns needed to display the content
      var availableWidth = this.collectionView.size.width - this.margin * 2;
      var columns = Math.floor(this.collectionView.size.width / (this.minItemSize.width + this.minSpace.width));
      this.numColumns = Math.max(1, Math.min(this.maxColumns, columns));

      // Compute the available width (minus the space between items)
      var width = availableWidth - this.minSpace.width * (this.numColumns - 1);

      // Compute the item width based on the space available
      var itemWidth = Math.round(width / this.numColumns);
      itemWidth = Math.max(this.minItemSize.width, Math.min(this.maxItemSize.width, itemWidth));
      this.itemWidth = itemWidth;

      // Compute the horizontal spacing
      var horizontalSpacing = Math.round((availableWidth - this.numColumns * itemWidth) / (this.numColumns - 1));

      // Setup an array of column heights
      var columnHeights = Array(this.numColumns).fill(this.margin);

      var delegate = this.collectionView.delegate;
      var oldLayoutInfos = this.layoutInfos;
      this.layoutInfos = [];

      var columnLayoutInfos = Array(this.numColumns).fill().map(function () {
        return [];
      });

      var numSections = this.collectionView.getNumberOfSections();
      for (var section = 0; section < numSections; section++) {
        this.layoutInfos[section] = [];

        var numItems = this.collectionView.getSectionLength(section);
        for (var i = 0; i < numItems; i++) {
          var layoutInfo = new _collectionView.LayoutInfo('item', section, i);

          // Compute the height of the item. Use the existing height if available,
          // otherwise call the delegate to estimate the size.
          var old = oldLayoutInfos[section] && oldLayoutInfos[section][i];
          var height = void 0;
          var estimatedSize = true;
          if (old) {
            height = old.rect.height;
            estimatedSize = invalidationContext.sizeChanged || old.estimatedSize;
          } else if (delegate.getItemSize) {
            var size = delegate.getItemSize(this.collectionView.getItem(section, i));
            var scaledHeight = Math.round(size.height * (itemWidth / size.width));
            height = Math.max(this.minItemSize.height, Math.min(this.maxItemSize.height, scaledHeight)) + this.itemPadding;
          } else {
            height = itemWidth;
          }

          // Figure out which column to place the item in, and compute its position.
          var column = this.getNextColumnIndex(columnHeights);
          var x = this.margin + column * (itemWidth + horizontalSpacing);
          var y = columnHeights[column];

          layoutInfo.rect = new _collectionView.Rect(x, y, itemWidth, height);
          layoutInfo.estimatedSize = estimatedSize;
          this.layoutInfos[section][i] = layoutInfo;
          columnLayoutInfos[column].push(layoutInfo);

          if (layoutInfo.estimatedSize && !invalidationContext.contentChanged && !this.collectionView._transaction) {
            this.updateItemSize(new _collectionView.IndexPath(section, i));
          }

          columnHeights[column] += layoutInfo.rect.height + this.minSpace.height;
        }

        // Reset all columns to the maximum for the next section
        var maxHeight = Math.max.apply(Math, columnHeights) - this.minSpace.height + this.margin;
        columnHeights.fill(maxHeight);
      }

      this.contentHeight = columnHeights[0];
    }
  }, {
    key: 'getContentSize',
    value: function getContentSize() {
      return new _collectionView.Size(this.collectionView.size.width, this.contentHeight);
    }
  }, {
    key: 'getNextColumnIndex',
    value: function getNextColumnIndex(columnHeights) {
      var minIndex = 0;
      for (var i = 0; i < columnHeights.length; i++) {
        if (columnHeights[i] < columnHeights[minIndex]) {
          minIndex = i;
        }
      }

      return minIndex;
    }
  }, {
    key: 'updateItemSize',
    value: function updateItemSize(indexPath) {
      var section = indexPath.section,
          index = indexPath.index;

      var view = this.collectionView.getItemView(section, index);
      if (!view) {
        return false;
      }

      var layoutInfo = this.layoutInfos[section][index];
      var size = view.getSize();

      if (size.height !== layoutInfo.rect.height) {
        layoutInfo.rect.height = size.height;
        layoutInfo.estimatedSize = view.estimatedSize || false;
        return true;
      }

      return false;
    }
  }, {
    key: 'itemInserted',
    value: function itemInserted(indexPath) {
      this.layoutInfos[indexPath.section].splice(indexPath.index, 0, null);
    }
  }, {
    key: 'itemRemoved',
    value: function itemRemoved(indexPath) {
      this.layoutInfos[indexPath.section].splice(indexPath.index, 1);
    }
  }, {
    key: 'itemMoved',
    value: function itemMoved(from, to) {
      var layoutInfo = this.layoutInfos[from.section].splice(from.index, 1)[0];
      this.layoutInfos[to.section].splice(to.index, 0, layoutInfo);
    }
  }, {
    key: 'itemReplaced',
    value: function itemReplaced(indexPath) {
      this.layoutInfos[indexPath.section][indexPath.index] = null;
    }
  }, {
    key: 'sectionInserted',
    value: function sectionInserted(section) {
      this.layoutInfos.splice(section, 0, []);
    }
  }, {
    key: 'sectionRemoved',
    value: function sectionRemoved(section) {
      this.layoutInfos.splice(section, 1);
    }
  }, {
    key: 'sectionMoved',
    value: function sectionMoved(fromSection, toSection) {
      var section = this.layoutInfos.splice(fromSection, 1)[0];
      this.layoutInfos.splice(toSection, 0, section);
    }
  }, {
    key: 'sectionReplaced',
    value: function sectionReplaced(section) {
      this.layoutInfos[section] = [];
    }
  }, {
    key: 'indexPathAbove',
    value: function indexPathAbove(indexPath) {
      var layoutInfo = this.getLayoutInfo('item', indexPath.section, indexPath.index);
      var rect = new _collectionView.Rect(layoutInfo.rect.x, 0, this.itemWidth, layoutInfo.rect.y - 1);

      return this._findClosest(layoutInfo.rect, rect);
    }
  }, {
    key: 'indexPathBelow',
    value: function indexPathBelow(indexPath) {
      var layoutInfo = this.getLayoutInfo('item', indexPath.section, indexPath.index);
      var rect = new _collectionView.Rect(layoutInfo.rect.x, layoutInfo.rect.maxY + 1, this.itemWidth, this.collectionView.contentSize.height);

      return this._findClosest(layoutInfo.rect, rect);
    }
  }, {
    key: 'indexPathLeftOf',
    value: function indexPathLeftOf(indexPath) {
      var layoutInfo = this.getLayoutInfo('item', indexPath.section, indexPath.index);
      var rect = new _collectionView.Rect(0, 0, layoutInfo.rect.x - 1, this.collectionView.contentSize.height);

      return this._findClosest(layoutInfo.rect, rect);
    }
  }, {
    key: 'indexPathRightOf',
    value: function indexPathRightOf(indexPath) {
      var layoutInfo = this.getLayoutInfo('item', indexPath.section, indexPath.index);
      var rect = new _collectionView.Rect(layoutInfo.rect.maxX + 1, 0, this.collectionView.size.width, this.collectionView.contentSize.height);

      return this._findClosest(layoutInfo.rect, rect);
    }
  }, {
    key: 'getDropTarget',
    value: function getDropTarget(point) {
      var indexPath = this.collectionView.indexPathAtPoint(point);
      if (indexPath) {
        return new _collectionView.DragTarget('item', indexPath, _collectionView.DragTarget.DROP_ON);
      }

      return new _collectionView.DragTarget('item', new _collectionView.IndexPath(0, 0), _collectionView.DragTarget.DROP_BETWEEN);
    }
  }]);

  return WaterfallLayout;
}(_BaseLayout3.default);

exports.default = WaterfallLayout;