'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class;

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _filterDOMProps = require('../../utils/filterDOMProps');

var _filterDOMProps2 = _interopRequireDefault(_filterDOMProps);

var _FocusManager = require('../../utils/FocusManager');

var _FocusManager2 = _interopRequireDefault(_FocusManager);

var _focusRing = require('../../utils/focusRing');

var _focusRing2 = _interopRequireDefault(_focusRing);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Tag = require('./Tag');

var _Tag2 = _interopRequireDefault(_Tag);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

if (process.env.SCALE_MEDIUM && process.env.SCALE_LARGE) {
  require('../../spectrum-css/tags/index.css');

  require('../../spectrum-css/tags/index-diff.css');
} else if (process.env.SCALE_LARGE) {
  require('../../spectrum-css/tags/index-lg.css');
} else {
  require('../../spectrum-css/tags/index.css');
}

if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHT) require('../../spectrum-css/tags/multiStops/light.css');
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARK) require('../../spectrum-css/tags/multiStops/dark.css');
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHTEST) require('../../spectrum-css/tags/multiStops/lightest.css');
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARKEST) require('../../spectrum-css/tags/multiStops/darkest.css');


/**
 * A TagList displays a list of Tags
 */
var TAGLIST_SELECTOR = '[role=row]:not([aria-disabled])';
var TAGLIST_SELECTED_SELECTOR = TAGLIST_SELECTOR + '[aria-selected=true]';

var TagList = (0, _focusRing2.default)(_class = function (_React$Component) {
  _inherits(TagList, _React$Component);

  function TagList() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, TagList);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = TagList.__proto__ || Object.getPrototypeOf(TagList)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      selectedIndex: null,
      focused: false
    }, _this.handleFocus = function (e) {
      var onFocus = _this.props.onFocus;

      _this.setState({ focused: true });
      onFocus(e);
    }, _this.handleBlur = function (e) {
      var onBlur = _this.props.onBlur;

      _this.setState({ focused: false });
      onBlur(e);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(TagList, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if ('selectedIndex' in nextProps) {
        this.setState({
          selectedIndex: nextProps.selectedIndex
        });
      }
    }
  }, {
    key: 'onClickItem',
    value: function onClickItem(selectedIndex, e) {
      this.setSelectedIndex(selectedIndex, e);
    }
  }, {
    key: 'setSelectedIndex',
    value: function setSelectedIndex(selectedIndex, e) {
      var lastSelectedIndex = this.state.selectedIndex;

      // If selectedIndex is defined on props then this is a controlled component and we shouldn't
      // change our own state.
      if (!('selectedIndex' in this.props)) {
        this.setState({
          selectedIndex: selectedIndex
        });
      }

      if (lastSelectedIndex !== selectedIndex) {
        this.props.onChange(selectedIndex);
      }
    }
  }, {
    key: 'baseChildProps',
    value: function baseChildProps(index) {
      var _props = this.props,
          readOnly = _props.readOnly,
          onClose = _props.onClose,
          disabled = _props.disabled;
      var _state = this.state,
          selectedIndex = _state.selectedIndex,
          focused = _state.focused;

      return {
        key: index,
        selected: !disabled && focused && selectedIndex === index,
        tabIndex: !disabled && (selectedIndex === index || !focused && selectedIndex === null) ? 0 : -1,
        closable: !readOnly,
        disabled: disabled,
        onClick: this.getChildOnClick(index),
        onFocus: this.getChildOnFocus(index),
        onClose: onClose,
        role: 'gridcell'
      };
    }
  }, {
    key: 'getChildOnClick',
    value: function getChildOnClick(index) {
      if (this.props.disabled) {
        return null;
      }
      var tagListOnClick = this.onClickItem.bind(this, index);
      return function (e) {
        tagListOnClick(e);
      };
    }
  }, {
    key: 'getChildOnFocus',
    value: function getChildOnFocus(index) {
      var _this2 = this;

      if (this.props.disabled) {
        return null;
      }
      return function (e) {
        _this2.setSelectedIndex(index, e);
        _this2.handleFocus;
      };
    }
  }, {
    key: 'renderChildren',
    value: function renderChildren() {
      var _this3 = this;

      if (this.props.values) {
        return this.renderValues();
      }
      return _react2.default.Children.map(this.props.children, function (child, index) {
        return _react2.default.cloneElement(child, _this3.baseChildProps(index));
      });
    }
  }, {
    key: 'renderValues',
    value: function renderValues() {
      var _this4 = this;

      var values = this.props.values;

      return values.map(function (value, index) {
        return _react2.default.createElement(
          _Tag2.default,
          _extends({ value: value }, _this4.baseChildProps(index)),
          value
        );
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          className = _props2.className,
          name = _props2.name,
          readOnly = _props2.readOnly,
          disabled = _props2.disabled,
          invalid = _props2.invalid,
          otherProps = _objectWithoutProperties(_props2, ['className', 'name', 'readOnly', 'disabled', 'invalid']);

      var focused = this.state.focused;


      return _react2.default.createElement(
        _FocusManager2.default,
        { itemSelector: TAGLIST_SELECTOR, selectedItemSelector: TAGLIST_SELECTED_SELECTOR, orientation: 'horizontal' },
        _react2.default.createElement(
          'div',
          _extends({}, (0, _filterDOMProps2.default)(otherProps), {
            className: (0, _classnames2.default)('spectrum-Tags', {
              'is-disabled': disabled
            }, className),
            name: name,
            readOnly: readOnly,
            disabled: disabled,
            role: 'grid',
            'aria-atomic': 'false',
            'aria-relevant': 'additions',
            'aria-live': focused ? 'polite' : 'off',
            'aria-disabled': disabled,
            'aria-invalid': invalid,
            onFocus: this.handleFocus,
            onBlur: this.handleBlur }),
          this.renderChildren()
        )
      );
    }
  }]);

  return TagList;
}(_react2.default.Component)) || _class;

TagList.displayName = 'TagList';
TagList.propTypes = {
  /** Custom CSS class to add to the tag list */
  className: _propTypes2.default.string,

  /** Whether to disable the tag list */
  disabled: _propTypes2.default.bool,

  /** Name of tag list **/
  name: _propTypes2.default.string,

  /** Function called when focus is taken away from the tag list */
  onBlur: _propTypes2.default.func,

  /** Function called when a tag  in the tag list is closed */
  onClose: _propTypes2.default.func,

  /** Function called when focus is put on the tag list */
  onFocus: _propTypes2.default.func,

  /** Whether the tag list can only be read */
  readOnly: _propTypes2.default.bool,

  /** Initial tags in the tag list */
  values: _propTypes2.default.arrayOf(_propTypes2.default.string)
};
TagList.defaultProps = {
  readOnly: false,
  disabled: false,
  onClose: function onClose() {},
  onFocus: function onFocus() {},
  onBlur: function onBlur() {},
  onChange: function onChange() {}
};
exports.default = TagList;