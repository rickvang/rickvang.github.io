{"ast":null,"code":"import _regeneratorRuntime from \"/Users/rvang/Desktop/Spectrum/testapp/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/rvang/Desktop/Spectrum/testapp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/rvang/Desktop/Spectrum/testapp/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/rvang/Desktop/Spectrum/testapp/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/rvang/Desktop/Spectrum/testapp/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/rvang/Desktop/Spectrum/testapp/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/rvang/Desktop/Spectrum/testapp/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/rvang/Desktop/Spectrum/testapp/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Provider from '@react/react-spectrum/Provider';\nimport Button from '@react/react-spectrum/Button';\nimport { TableView } from '@react/react-spectrum/TableView';\nimport ListDataSource from '@react/react-spectrum/ListDataSource';\nimport Switch from '@react/react-spectrum/Switch';\nvar columns = [{\n  title: 'Active',\n  key: 'enabled',\n  width: 100,\n  announce: false\n}, {\n  title: 'Name',\n  key: 'name',\n  minWidth: 200,\n  sortable: true,\n  divider: true\n}, {\n  title: 'Created By',\n  key: 'createdBy',\n  width: 200,\n  sortable: true\n}]; // var tableData = [\n//   {'id': 1, 'name': 'Python, carpet', 'enabled': true, 'createdBy': 'Alexandro Hindrich'},\n//   {'id': 2, 'name': 'Cormorant, flightless', 'enabled': false, 'createdBy': 'Felicity McRinn'},\n//   {'id': 3, 'name': 'Cape cobra', 'enabled': false, 'createdBy': 'Emalee Worsfield'},\n//   {'id': 4, 'name': 'Red lava crab', 'enabled': true, 'createdBy': 'Cedric Henriet'},\n//   {'id': 5, 'name': 'Tiger', 'enabled': true, 'createdBy': 'Roselin Burk'},\n//   {'id': 6, 'name': 'Blue-tongued skink', 'enabled': false, 'createdBy': 'Dru Kretschmer'},\n//   {'id': 7, 'name': 'Springbuck', 'enabled': false, 'createdBy': 'Brockie Eastham'},\n//   {'id': 8, 'name': 'Woodpecker, downy', 'enabled': true, 'createdBy': 'Lexis Bravey'},\n//   {'id': 9, 'name': 'Cape white-eye', 'enabled': true, 'createdBy': 'Vevay Wessel'},\n//   {'id': 10, 'name': 'African wild cat', 'enabled': false, 'createdBy': 'Melamie Klais'},\n// ];\n// class TableDS extends ListDataSource {\n//   constructor(data = tableData) {\n//     super();\n//     this.data = data;\n//   }\n//   async load(sortDescriptor) {\n//     let data = this.data;\n//     if (sortDescriptor) {\n//       data.sort((a, b) => a[sortDescriptor.column.key] < b[sortDescriptor.column.key] ? -sortDescriptor.direction : sortDescriptor.direction);\n//     }\n//     return new Promise((resolve) => {\n//         resolve(data.slice());\n//     });\n//   }\n//   async loadMore() {\n//     return new Promise((resolve) => {\n//       setTimeout(() => {\n//         resolve(this.data);\n//       }, 2000);\n//     });\n//   }\n// }\n// var ds = new TableDS();\n\nvar MyDataSource =\n/*#__PURE__*/\nfunction (_ListDataSource) {\n  _inherits(MyDataSource, _ListDataSource);\n\n  function MyDataSource() {\n    _classCallCheck(this, MyDataSource);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(MyDataSource).apply(this, arguments));\n  }\n\n  _createClass(MyDataSource, [{\n    key: \"load\",\n    value: function () {\n      var _load = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(sortDescriptor) {\n        var getTestData;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return fetch(\"http://127.0.0.1:8887/testapi.json\").then(function (data) {\n                  return data.json();\n                }).then(function (res) {\n                  return res;\n                });\n\n              case 2:\n                getTestData = _context.sent;\n                return _context.abrupt(\"return\", getTestData);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function load(_x) {\n        return _load.apply(this, arguments);\n      }\n\n      return load;\n    }()\n  }, {\n    key: \"loadMore\",\n    value: function () {\n      var _loadMore = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\");\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function loadMore() {\n        return _loadMore.apply(this, arguments);\n      }\n\n      return loadMore;\n    }()\n  }]);\n\n  return MyDataSource;\n}(ListDataSource);\n\nfunction renderCell(column, data, rowFocused) {\n  if (column.key === 'enabled') {\n    // Determine how to set tabIndex of Switch based on focused state of row.\n    var tabIndex = rowFocused ? 0 : -1;\n    return React.createElement(Switch, {\n      defaultChecked: data[column.key] == null ? data : data[column.key],\n      onChange: function onChange() {},\n      tabIndex: tabIndex,\n      title: column.title,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    });\n  }\n\n  return React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, data[column.key]);\n}\n\nvar testTable = React.createElement(\"div\", {\n  style: {\n    height: '100vh'\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 109\n  },\n  __self: this\n}, React.createElement(Provider, {\n  theme: \"light\",\n  style: {\n    height: \"500px\"\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 110\n  },\n  __self: this\n}, React.createElement(Button, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 111\n  },\n  __self: this\n}, \"Hello World\"), React.createElement(TableView, {\n  columns: columns,\n  dataSource: new MyDataSource(),\n  renderCell: renderCell,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 112\n  },\n  __self: this\n})), \"`\");\nReactDOM.render(testTable, document.getElementById('root'));","map":{"version":3,"sources":["/Users/rvang/Desktop/Spectrum/testapp/src/index.js"],"names":["React","ReactDOM","Provider","Button","TableView","ListDataSource","Switch","columns","title","key","width","announce","minWidth","sortable","divider","MyDataSource","sortDescriptor","fetch","then","data","json","res","getTestData","renderCell","column","rowFocused","tabIndex","testTable","height","render","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Provider from '@react/react-spectrum/Provider';\nimport Button from '@react/react-spectrum/Button';\nimport {TableView} from '@react/react-spectrum/TableView';\nimport ListDataSource from '@react/react-spectrum/ListDataSource';\nimport Switch from '@react/react-spectrum/Switch';\n\n\nlet columns = [\n  {\n    title: 'Active',\n    key: 'enabled',\n    width: 100,\n    announce: false\n  },\n  {\n    title: 'Name',\n    key: 'name',\n    minWidth: 200,\n    sortable: true,\n    divider: true\n  },\n  {\n    title: 'Created By',\n    key: 'createdBy',\n    width: 200,\n    sortable: true\n  }\n];\n\n// var tableData = [\n//   {'id': 1, 'name': 'Python, carpet', 'enabled': true, 'createdBy': 'Alexandro Hindrich'},\n//   {'id': 2, 'name': 'Cormorant, flightless', 'enabled': false, 'createdBy': 'Felicity McRinn'},\n//   {'id': 3, 'name': 'Cape cobra', 'enabled': false, 'createdBy': 'Emalee Worsfield'},\n//   {'id': 4, 'name': 'Red lava crab', 'enabled': true, 'createdBy': 'Cedric Henriet'},\n//   {'id': 5, 'name': 'Tiger', 'enabled': true, 'createdBy': 'Roselin Burk'},\n//   {'id': 6, 'name': 'Blue-tongued skink', 'enabled': false, 'createdBy': 'Dru Kretschmer'},\n//   {'id': 7, 'name': 'Springbuck', 'enabled': false, 'createdBy': 'Brockie Eastham'},\n//   {'id': 8, 'name': 'Woodpecker, downy', 'enabled': true, 'createdBy': 'Lexis Bravey'},\n//   {'id': 9, 'name': 'Cape white-eye', 'enabled': true, 'createdBy': 'Vevay Wessel'},\n//   {'id': 10, 'name': 'African wild cat', 'enabled': false, 'createdBy': 'Melamie Klais'},\n// ];\n\n// class TableDS extends ListDataSource {\n//   constructor(data = tableData) {\n//     super();\n//     this.data = data;\n//   }\n\n//   async load(sortDescriptor) {\n//     let data = this.data;\n//     if (sortDescriptor) {\n//       data.sort((a, b) => a[sortDescriptor.column.key] < b[sortDescriptor.column.key] ? -sortDescriptor.direction : sortDescriptor.direction);\n//     }\n\n//     return new Promise((resolve) => {\n//         resolve(data.slice());\n//     });\n//   }\n\n//   async loadMore() {\n//     return new Promise((resolve) => {\n//       setTimeout(() => {\n//         resolve(this.data);\n//       }, 2000);\n//     });\n//   }\n// }\n\n// var ds = new TableDS();\n\nclass MyDataSource extends ListDataSource {\n  \n\n  async load(sortDescriptor) {\n    // load some data here\n    let getTestData = await fetch(`http://127.0.0.1:8887/testapi.json`)\n                      .then(data=>{return data.json()})\n                      .then(res =>{return res})\n    \n    // If sortDescriptor is provided, then sort the data accordingly.\n    return getTestData;\n  }\n\n  async loadMore() {\n    // load more data\n    return ;\n  }\n}\n\nfunction renderCell(column, data, rowFocused) {\n  if (column.key === 'enabled') {\n    // Determine how to set tabIndex of Switch based on focused state of row.\n    var tabIndex = rowFocused ? 0 : -1;\n\n    return (\n      <Switch\n        defaultChecked={data[column.key] == null ? data : data[column.key]}\n        onChange={() => {}}\n        tabIndex={tabIndex}\n        title={column.title} />\n    );\n  }\n  return <span>{data[column.key]}</span>;\n}\n\nlet testTable = (\n  <div style={{height: '100vh'}}>\n    <Provider theme=\"light\" style={{height: `500px`}}>\n      <Button>Hello World</Button>\n      <TableView\n        columns={columns}\n        dataSource={new MyDataSource}\n        renderCell={renderCell}  />\n    </Provider>`\n  </div>\n);\n\nReactDOM.render(testTable, document.getElementById('root'));\n"]},"metadata":{},"sourceType":"module"}