'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class;

var _autobindDecorator = require('autobind-decorator');

var _autobindDecorator2 = _interopRequireDefault(_autobindDecorator);

var _ChevronRightMedium = require('../../Icon/core/ChevronRightMedium');

var _ChevronRightMedium2 = _interopRequireDefault(_ChevronRightMedium);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _createId = require('../../utils/createId');

var _createId2 = _interopRequireDefault(_createId);

var _focusRing = require('../../utils/focusRing');

var _focusRing2 = _interopRequireDefault(_focusRing);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TreeItem = (0, _autobindDecorator2.default)(_class = (0, _focusRing2.default)(_class = function (_React$Component) {
  _inherits(TreeItem, _React$Component);

  function TreeItem(props) {
    _classCallCheck(this, TreeItem);

    var _this = _possibleConstructorReturn(this, (TreeItem.__proto__ || Object.getPrototypeOf(TreeItem)).call(this, props));

    _this.itemId = (0, _createId2.default)();
    return _this;
  }

  /**
   * Sets focus to the TreeItem DOM element.
   */


  _createClass(TreeItem, [{
    key: 'focus',
    value: function focus() {
      if (this.treeitem) {
        this.treeitem.focus();
      }
    }
  }, {
    key: 'getOwnedChildIds',
    value: function getOwnedChildIds() {
      var _props = this.props,
          content = _props.content,
          collectionView = _props.collectionView,
          _props$treeId = _props.treeId,
          treeId = _props$treeId === undefined ? this.itemId : _props$treeId;
      var hasChildren = content.hasChildren,
          children = content.children,
          isExpanded = content.isExpanded,
          _content$level = content.level,
          level = _content$level === undefined ? 0 : _content$level;


      var ownedChildIds = null;

      if (hasChildren && isExpanded && children && children.length > 0) {
        // Filter visible views to only items that are children of this item, and generate ids
        ownedChildIds = collectionView.visibleViews.filter(function (view) {
          return view.content.parent === content;
        }).sort(function (a, b) {
          return a.content.index - b.content.index;
        }).map(function (view) {
          return treeId + '-' + (level + 1) + '-' + view.content.index;
        }).join(' ');
      }

      return !ownedChildIds || !ownedChildIds.length ? null : ownedChildIds;
    }
  }, {
    key: 'onToggle',
    value: function onToggle(e) {
      var _this2 = this;

      var _props2 = this.props,
          content = _props2.content,
          onToggle = _props2.onToggle;

      if (onToggle) {
        onToggle(content.item, e);
      }

      requestAnimationFrame(function () {
        return _this2.focus();
      });
    }
  }, {
    key: 'stopPropagationAndPreventDefault',
    value: function stopPropagationAndPreventDefault(e) {
      e.stopPropagation();
      e.preventDefault();
    }
  }, {
    key: 'setTreeItemRef',
    value: function setTreeItemRef(t) {
      this.treeitem = t;
    }
  }, {
    key: 'render',
    value: function render() {
      var _props3 = this.props,
          content = _props3.content,
          renderItem = _props3.renderItem,
          allowsSelection = _props3.allowsSelection,
          selected = _props3.selected,
          focused = _props3.focused,
          collectionView = _props3.collectionView,
          _props3$treeId = _props3.treeId,
          treeId = _props3$treeId === undefined ? this.itemId : _props3$treeId,
          isDropTarget = _props3['drop-target'];
      var item = content.item,
          hasChildren = content.hasChildren,
          isToggleable = content.isToggleable,
          isExpanded = content.isExpanded,
          parent = content.parent,
          _content$level2 = content.level,
          level = _content$level2 === undefined ? 0 : _content$level2;


      var itemClassName = (0, _classnames2.default)('spectrum-TreeView-item', {
        'is-open': isExpanded
      });

      var linkClassName = (0, _classnames2.default)('spectrum-TreeView-itemLink', {
        'is-selected': allowsSelection && selected,
        'is-focused': focused,
        'is-drop-target': isDropTarget
      });

      var tabIndex = null;
      if (collectionView) {
        tabIndex = focused || !collectionView.focusedIndexPath ? 0 : -1;
      }

      var setSize = parent.children ? parent.children.length : 0;
      var posInSet = content.index;
      var id = treeId + '-' + level + '-' + posInSet;
      var ownedChildIds = this.getOwnedChildIds();

      return _react2.default.createElement(
        'div',
        { className: itemClassName, role: 'presentation' },
        _react2.default.createElement(
          'a',
          {
            className: linkClassName,
            ref: this.setTreeItemRef,
            id: id,
            role: 'treeitem',
            tabIndex: tabIndex,
            'aria-selected': (allowsSelection ? selected : focused) || false,
            'aria-expanded': hasChildren ? isExpanded : null,
            'aria-level': level + 1,
            'aria-setsize': setSize,
            'aria-posinset': posInSet + 1,
            'aria-owns': ownedChildIds ? id + '-group' : null,
            onClick: !allowsSelection ? this.onToggle : null,
            onMouseDown: !allowsSelection ? this.stopPropagationAndPreventDefault : null },
          isToggleable && hasChildren && _react2.default.createElement(_ChevronRightMedium2.default, {
            className: 'spectrum-TreeView-indicator',
            size: null,
            onClick: allowsSelection ? this.onToggle : null,
            onMouseDown: this.stopPropagationAndPreventDefault }),
          renderItem(item, content),
          ownedChildIds && _react2.default.createElement('span', { className: 'u-react-spectrum-screenReaderOnly', role: 'group', id: id + '-group', 'aria-labelledby': id, 'aria-owns': ownedChildIds })
        )
      );
    }
  }]);

  return TreeItem;
}(_react2.default.Component)) || _class) || _class;

exports.default = TreeItem;