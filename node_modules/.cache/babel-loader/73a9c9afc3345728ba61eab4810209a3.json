{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _Rect = require('../Rect');\n\nvar _Rect2 = _interopRequireDefault(_Rect);\n\nvar _Size = require('../Size');\n\nvar _Size2 = _interopRequireDefault(_Size);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar DOMView = function () {\n  function DOMView(view) {\n    _classCallCheck(this, DOMView);\n\n    this.view = view;\n  }\n\n  _createClass(DOMView, [{\n    key: 'getRenderContext',\n    value: function getRenderContext() {\n      if (!this.dom) {\n        this.dom = document.createElement('div');\n      }\n\n      return this.dom;\n    }\n  }, {\n    key: 'render',\n    value: function render(backend) {\n      if (!this.backend) {\n        for (var attr in this.view.attrs) {\n          this.dom.setAttribute(attr, this.view.attrs[attr]);\n        }\n\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = this.view.events[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var _step$value = _slicedToArray(_step.value, 2),\n                event = _step$value[0],\n                handlers = _step$value[1];\n\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n\n            try {\n              for (var _iterator2 = handlers[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                var handler = _step2.value;\n                this.dom.addEventListener(event.toLowerCase(), handler);\n              }\n            } catch (err) {\n              _didIteratorError2 = true;\n              _iteratorError2 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                  _iterator2.return();\n                }\n              } finally {\n                if (_didIteratorError2) {\n                  throw _iteratorError2;\n                }\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        this.children = new Set();\n        this.backend = backend;\n      }\n\n      this.flushUpdates();\n      return this.dom;\n    }\n  }, {\n    key: 'flushUpdates',\n    value: function flushUpdates(fn) {\n      if (this.view.dirty) {\n        Object.assign(this.dom.style, this.view.style);\n        this.dom.className = this.view.getClassName();\n        var _iteratorNormalCompletion3 = true;\n        var _didIteratorError3 = false;\n        var _iteratorError3 = undefined;\n\n        try {\n          for (var _iterator3 = this.view.children[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n            var child = _step3.value;\n\n            if (!this.children.has(child)) {\n              this.dom.appendChild(child.renderBackendView ? child.renderBackendView(this.backend) : child);\n            } else if (child.renderBackendView) {\n              child.renderBackendView(this.backend);\n            }\n          }\n        } catch (err) {\n          _didIteratorError3 = true;\n          _iteratorError3 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion3 && _iterator3.return) {\n              _iterator3.return();\n            }\n          } finally {\n            if (_didIteratorError3) {\n              throw _iteratorError3;\n            }\n          }\n        }\n\n        var _iteratorNormalCompletion4 = true;\n        var _didIteratorError4 = false;\n        var _iteratorError4 = undefined;\n\n        try {\n          for (var _iterator4 = this.children[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n            var _child = _step4.value;\n\n            if (!this.view.children.has(_child)) {\n              this.dom.removeChild(_child.backendView ? _child.backendView.dom : _child);\n            }\n          }\n        } catch (err) {\n          _didIteratorError4 = true;\n          _iteratorError4 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion4 && _iterator4.return) {\n              _iterator4.return();\n            }\n          } finally {\n            if (_didIteratorError4) {\n              throw _iteratorError4;\n            }\n          }\n        }\n\n        this.children = new Set(this.view.children);\n        this.view.dirty = false;\n      }\n\n      if (fn) {\n        fn();\n      }\n    }\n  }, {\n    key: 'forceStyleUpdate',\n    value: function forceStyleUpdate() {\n      window.getComputedStyle(this.getDOMNode()).opacity;\n    }\n  }, {\n    key: 'getRect',\n    value: function getRect() {\n      var rect = this.getDOMNode().getBoundingClientRect();\n      return new _Rect2.default(rect.left, rect.top, rect.width, rect.height);\n    }\n  }, {\n    key: 'getSize',\n    value: function getSize() {\n      var node = this.getDOMNode().firstChild; // TODO\n\n      var style = window.getComputedStyle(node);\n      var xMargins = parseInt(style.marginLeft, 10) + parseInt(style.marginRight, 10) || 0;\n      var yMargins = parseInt(style.marginTop, 10) + parseInt(style.marginBottom, 10) || 0;\n      return new _Size2.default(node.offsetWidth + xMargins, node.offsetHeight + yMargins);\n    }\n  }, {\n    key: 'getDOMNode',\n    value: function getDOMNode() {\n      return this.dom;\n    }\n  }, {\n    key: 'triggerEvent',\n    value: function triggerEvent(event) {\n      var evt = document.createEvent('Event');\n      evt.initEvent(event, false, false);\n      this.getDOMNode().dispatchEvent(evt);\n    }\n  }]);\n\n  return DOMView;\n}();\n\nexports.default = DOMView;","map":null,"metadata":{},"sourceType":"script"}