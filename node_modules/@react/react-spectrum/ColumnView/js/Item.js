'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class;

var _Checkbox = require('../../Checkbox');

var _Checkbox2 = _interopRequireDefault(_Checkbox);

var _ChevronRightMedium = require('../../Icon/core/ChevronRightMedium');

var _ChevronRightMedium2 = _interopRequireDefault(_ChevronRightMedium);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _filterDOMProps = require('../../utils/filterDOMProps');

var _filterDOMProps2 = _interopRequireDefault(_filterDOMProps);

var _focusRing = require('../../utils/focusRing');

var _focusRing2 = _interopRequireDefault(_focusRing);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*
 * A wrapper for an Item within an ItemColumn that will manage the Item's state
 */
var Item = (0, _focusRing2.default)(_class = function (_React$Component) {
  _inherits(Item, _React$Component);

  function Item() {
    _classCallCheck(this, Item);

    return _possibleConstructorReturn(this, (Item.__proto__ || Object.getPrototypeOf(Item)).apply(this, arguments));
  }

  _createClass(Item, [{
    key: 'focus',
    value: function focus() {
      if (this.itemRef) {
        this.itemRef.focus();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          item = _props.item,
          renderItem = _props.renderItem,
          highlighted = _props.selected,
          allowsSelection = _props.allowsSelection,
          allowsBranchSelection = _props.allowsBranchSelection,
          isSelected = _props.isSelected,
          focused = _props.focused,
          column = _props.column,
          _props$level = _props.level,
          level = _props$level === undefined ? 0 : _props$level,
          detailNode = _props.detailNode,
          collectionView = _props.collectionView,
          props = _objectWithoutProperties(_props, ['item', 'renderItem', 'selected', 'allowsSelection', 'allowsBranchSelection', 'isSelected', 'focused', 'column', 'level', 'detailNode', 'collectionView']);

      var className = (0, _classnames2.default)('spectrum-AssetList-item', {
        'is-selectable': allowsBranchSelection,
        'is-branch': item.hasChildren,
        'is-navigated': highlighted && !isSelected,
        'is-selected': isSelected
      });

      var id = item.getItemId();
      var labelId = id + '-label';
      var columnFocused = column && column.props.focused;
      var tabIndex = columnFocused && focused ? 0 : -1;
      if (columnFocused && !focused && collectionView && !collectionView.focusedIndexPath) {
        tabIndex = 0;
      }

      var setSize = item.parent.children.getSectionLength(0);
      var isExpanded = item.hasChildren ? highlighted || false : null;
      var ownedColumnId = isExpanded || detailNode === item ? item.getColumnId() : null;
      var ariaDescribedby = detailNode === item ? ownedColumnId : null;

      return _react2.default.createElement(
        'div',
        _extends({
          ref: function ref(i) {
            return _this2.itemRef = i;
          },
          id: id,
          tabIndex: tabIndex,
          role: 'treeitem',
          'aria-selected': allowsSelection && (allowsBranchSelection || !item.hasChildren) ? isSelected || false : null,
          'aria-level': level + 1,
          'aria-posinset': item.index + 1,
          'aria-setsize': setSize,
          'aria-expanded': isExpanded,
          'aria-labelledby': labelId,
          'aria-describedby': ariaDescribedby,
          'aria-owns': ownedColumnId,
          className: className
        }, (0, _filterDOMProps2.default)(props)),
        allowsSelection && allowsBranchSelection && this.renderCheckbox(labelId),
        _react2.default.createElement(
          'span',
          { role: 'presentation', className: 'spectrum-AssetList-itemLabel', id: labelId },
          renderItem(item.item, item)
        ),
        item.hasChildren && this.renderChevron(),
        allowsSelection && !allowsBranchSelection && !item.hasChildren && this.renderCheckbox()
      );
    }
  }, {
    key: 'renderChevron',
    value: function renderChevron() {
      return _react2.default.createElement(_ChevronRightMedium2.default, { className: 'spectrum-AssetList-itemChildIndicator', size: 'XS' });
    }
  }, {
    key: 'renderCheckbox',
    value: function renderCheckbox(labelId) {
      var _this3 = this;

      var _props2 = this.props,
          isSelected = _props2.isSelected,
          onSelect = _props2.onSelect;


      return _react2.default.createElement(_Checkbox2.default, {
        'aria-hidden': 'true',
        'aria-labelledby': labelId,
        tabIndex: -1,
        className: 'spectrum-AssetList-itemSelector',
        onMouseDown: function onMouseDown(e) {
          return e.stopPropagation();
        },
        onFocus: function onFocus(e) {
          e.preventDefault();
          _this3.focus();
        },
        checked: isSelected,
        onChange: onSelect });
    }
  }]);

  return Item;
}(_react2.default.Component)) || _class;

exports.default = Item;