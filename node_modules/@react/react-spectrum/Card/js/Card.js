'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class;

var _autobindDecorator = require('autobind-decorator');

var _autobindDecorator2 = _interopRequireDefault(_autobindDecorator);

var _Checkbox = require('../../Checkbox/js/Checkbox');

var _Checkbox2 = _interopRequireDefault(_Checkbox);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _filterDOMProps = require('../../utils/filterDOMProps');

var _filterDOMProps2 = _interopRequireDefault(_filterDOMProps);

var _intl = require('../../utils/intl');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

require('../style/index.css');

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var intlMessages = {
  'en-US': _interopRequireDefault(require('./../intl/en-US.json')).default
};

if (process.env.SCALE_MEDIUM && process.env.SCALE_LARGE) {
  require('../../spectrum-css-overrides/card/index.css');

  require('../../spectrum-css-overrides/card/index-diff.css');
} else if (process.env.SCALE_LARGE) {
  require('../../spectrum-css-overrides/card/index-lg.css');
} else {
  require('../../spectrum-css-overrides/card/index.css');
}

if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHT) require('../../spectrum-css-overrides/card/multiStops/light.css');
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARK) require('../../spectrum-css-overrides/card/multiStops/dark.css');
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHTEST) require('../../spectrum-css-overrides/card/multiStops/lightest.css');
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARKEST) require('../../spectrum-css-overrides/card/multiStops/darkest.css');

if (process.env.SCALE_MEDIUM && process.env.SCALE_LARGE) {
  require('../../spectrum-css/quickaction/index.css');

  require('../../spectrum-css/quickaction/index-diff.css');
} else if (process.env.SCALE_LARGE) {
  require('../../spectrum-css/quickaction/index-lg.css');
} else {
  require('../../spectrum-css/quickaction/index.css');
}

if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHT) require('../../spectrum-css/quickaction/multiStops/light.css');
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARK) require('../../spectrum-css/quickaction/multiStops/dark.css');
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHTEST) require('../../spectrum-css/quickaction/multiStops/lightest.css');
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARKEST) require('../../spectrum-css/quickaction/multiStops/darkest.css');


var formatMessage = (0, _intl.messageFormatter)(intlMessages);

var Card = (0, _autobindDecorator2.default)(_class = function (_React$Component) {
  _inherits(Card, _React$Component);

  function Card() {
    _classCallCheck(this, Card);

    return _possibleConstructorReturn(this, (Card.__proto__ || Object.getPrototypeOf(Card)).apply(this, arguments));
  }

  _createClass(Card, [{
    key: 'getChildContext',
    value: function getChildContext() {
      var actionMenu = this.props.actionMenu;
      if (this.props.size === 'S') {
        actionMenu = null;
      }

      // Find the CardBody to determine if it has a title.
      // This is used in CardPreview to decide whether to default the 
      // image to decorative for accessibility.
      var cardBody = _react2.default.Children.toArray(this.props.children).find(function (child) {
        return child.type.displayName === 'CardBody';
      });
      var hasTitle = Boolean(cardBody && cardBody.props.title);

      return {
        cardVariant: this.props.variant,
        cardSize: this.props.size,
        actionMenu: actionMenu,
        onLoad: this.props.onLoad,
        hasTitle: hasTitle
      };
    }
  }, {
    key: 'handleCheckboxClick',
    value: function handleCheckboxClick(evt) {
      if (this.props.onSelectionChange) {
        evt.stopPropagation();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          variant = _props.variant,
          size = _props.size,
          selected = _props.selected,
          allowsSelection = _props.allowsSelection,
          isDropTarget = _props.isDropTarget,
          quickActions = _props.quickActions,
          actionMenu = _props.actionMenu,
          children = _props.children,
          className = _props.className,
          otherProps = _objectWithoutProperties(_props, ['variant', 'size', 'selected', 'allowsSelection', 'isDropTarget', 'quickActions', 'actionMenu', 'children', 'className']);

      // Small size is not supported for standard cards


      if (variant === 'standard' && size === 'S') {
        size = 'L';
      }

      var checkbox = null;
      if (allowsSelection) {
        checkbox = _react2.default.createElement(
          'div',
          { className: (0, _classnames2.default)('spectrum-QuickActions', 'spectrum-Card-quickActions') },
          _react2.default.createElement(_Checkbox2.default, {
            onChange: this.props.onSelectionChange,
            onClick: this.handleCheckboxClick,
            checked: selected,
            title: formatMessage('select') })
        );
      }

      if (quickActions && actionMenu) {
        throw new Error('Either quick actions or an action button can be passed to Card, not both.');
      }

      if (size === 'S' && actionMenu) {
        quickActions = _react2.default.createElement(
          'div',
          { className: 'spectrum-QuickActions spectrum-Card-actions' },
          actionMenu
        );
      }

      var assetClass = (0, _classnames2.default)('spectrum-Card', 'spectrum-Card--' + variant, {
        'spectrum-Card--large': size === 'L',
        'spectrum-Card--small': size === 'S',
        'is-selected': selected,
        'is-drop-target': isDropTarget
      }, className);

      return _react2.default.createElement(
        'div',
        _extends({}, (0, _filterDOMProps2.default)(otherProps), { className: assetClass }),
        children,
        checkbox,
        quickActions
      );
    }
  }]);

  return Card;
}(_react2.default.Component)) || _class;

Card.propTypes = {
  /** Card variant */
  variant: _propTypes2.default.oneOf(['standard', 'quiet', 'gallery']),

  /** Card can be large or small size */
  size: _propTypes2.default.oneOf(['S', 'L']),

  /** Whether or not the card supports selection */
  allowsSelection: _propTypes2.default.bool,

  /** Whether or not the card is selected */
  selected: _propTypes2.default.bool,

  /** What happens when the checkbox is clicked */
  onSelectionChange: _propTypes2.default.func,

  /** Whether the card is currently a drop target */
  isDropTarget: _propTypes2.default.bool,

  /** Quick actions to display on the card. */
  quickActions: _propTypes2.default.element,

  /** Action menu to display in the body of the card. */
  actionMenu: _propTypes2.default.element
};
Card.defaultProps = {
  variant: 'standard',
  size: 'L',
  selected: false,
  allowsSelection: true
};
Card.childContextTypes = {
  cardVariant: _propTypes2.default.string,
  cardSize: _propTypes2.default.string,
  actionMenu: _propTypes2.default.element,
  onLoad: _propTypes2.default.func,
  hasTitle: _propTypes2.default.bool
};
exports.default = Card;